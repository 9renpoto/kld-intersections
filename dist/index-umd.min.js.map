{"version":3,"file":"index-umd.min.js","sources":["../node_modules/kld-affine/lib/Point2D.js","../node_modules/kld-affine/lib/Vector2D.js","../node_modules/kld-affine/lib/Matrix2D.js","../node_modules/kld-polynomial/lib/Polynomial.js","../lib/IntersectionArgs.js","../lib/Intersection.js","../node_modules/kld-path-parser/lib/PathLexeme.js","../node_modules/kld-path-parser/lib/PathLexer.js","../node_modules/kld-path-parser/lib/PathParser.js","../lib/PathHandler.js","../lib/Shapes.js","../lib/AffineShapes.js","../lib/IntersectionQuery.js"],"sourcesContent":["/**\n *  Point2D.js\n *  @module Point2D\n *  @copyright 2001-2019 Kevin Lindsey\n */\n\n/**\n *  Point2D\n *\n *  @memberof module:kld-affine\n */\nclass Point2D {\n    /**\n     *  Point2D\n     *\n     *  @param {number} x\n     *  @param {number} y\n     *  @returns {module:kld-affine.Point2D}\n     */\n    constructor(x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     *  clone\n     *\n     *  @returns {module:kld-affine.Point2D}\n     */\n    clone() {\n        return new this.constructor(this.x, this.y);\n    }\n\n    /**\n     *  add\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @returns {module:kld-affine.Point2D}\n     */\n    add(that) {\n        return new this.constructor(this.x + that.x, this.y + that.y);\n    }\n\n    /**\n     *  subtract\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @returns {module:kld-affine.Point2D}\n     */\n    subtract(that) {\n        return new this.constructor(this.x - that.x, this.y - that.y);\n    }\n\n    /**\n     *  multiply\n     *\n     *  @param {number} scalar\n     *  @returns {module:kld-affine.Point2D}\n     */\n    multiply(scalar) {\n        return new this.constructor(this.x * scalar, this.y * scalar);\n    }\n\n    /**\n     *  divide\n     *\n     *  @param {number} scalar\n     *  @returns {module:kld-affine.Point2D}\n     */\n    divide(scalar) {\n        return new this.constructor(this.x / scalar, this.y / scalar);\n    }\n\n    /**\n     *  equals\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @returns {boolean}\n     */\n    equals(that) {\n        return (this.x === that.x && this.y === that.y);\n    }\n\n    /**\n     *  precisionEquals\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @param {number} precision\n     *  @returns {boolean}\n     */\n    precisionEquals(that, precision) {\n        return (\n            Math.abs(this.x - that.x) < precision &&\n            Math.abs(this.y - that.y) < precision\n        );\n    }\n\n    // utility methods\n\n    /**\n     *  lerp\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @param {number} t\n     *  @returns {module:kld-affine.Point2D}\n     */\n    lerp(that, t) {\n        const omt = 1.0 - t;\n\n        return new this.constructor(\n            this.x * omt + that.x * t,\n            this.y * omt + that.y * t\n        );\n    }\n\n    /**\n     *  distanceFrom\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @returns {number}\n     */\n    distanceFrom(that) {\n        const dx = this.x - that.x;\n        const dy = this.y - that.y;\n\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    /**\n     *  min\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @returns {number}\n     */\n    min(that) {\n        return new this.constructor(\n            Math.min(this.x, that.x),\n            Math.min(this.y, that.y)\n        );\n    }\n\n    /**\n     *  max\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @returns {number}\n     */\n    max(that) {\n        return new this.constructor(\n            Math.max(this.x, that.x),\n            Math.max(this.y, that.y)\n        );\n    }\n\n    /**\n     *  transform\n     *\n     *  @param {module:kld-affine.Matrix2D} matrix\n     *  @returns {module:kld-affine.Point2D}\n     */\n    transform(matrix) {\n        return new this.constructor(\n            matrix.a * this.x + matrix.c * this.y + matrix.e,\n            matrix.b * this.x + matrix.d * this.y + matrix.f\n        );\n    }\n\n    /**\n     *  toString\n     *\n     *  @returns {string}\n     */\n    toString() {\n        return `point(${this.x},${this.y})`;\n    }\n}\n\nexport default Point2D;\n","/**\n *  Vector2D.js\n *  @module Vector2D\n *  @copyright 2001-2019 Kevin Lindsey\n */\n\n/**\n *  Vector2D\n *\n *  @memberof module:kld-affine\n */\nclass Vector2D {\n    /**\n     *  Vector2D\n     *\n     *  @param {number} x\n     *  @param {number} y\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    constructor(x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     *  fromPoints\n     *\n     *  @param {module:kld-affine.Point2D} p1\n     *  @param {module:kld-affine.Point2D} p2\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    static fromPoints(p1, p2) {\n        return new Vector2D(\n            p2.x - p1.x,\n            p2.y - p1.y\n        );\n    }\n\n    /**\n     *  length\n     *\n     *  @returns {number}\n     */\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    /**\n     *  magnitude\n     *\n     *  @returns {number}\n     */\n    magnitude() {\n        return this.x * this.x + this.y * this.y;\n    }\n\n    /**\n     *  dot\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {number}\n     */\n    dot(that) {\n        return this.x * that.x + this.y * that.y;\n    }\n\n    /**\n     *  cross\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {number}\n     */\n    cross(that) {\n        return this.x * that.y - this.y * that.x;\n    }\n\n    /**\n     *  determinant\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {number}\n     */\n    determinant(that) {\n        return this.x * that.y - this.y * that.x;\n    }\n\n    /**\n     *  unit\n     *\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    unit() {\n        return this.divide(this.length());\n    }\n\n    /**\n     *  add\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    add(that) {\n        return new this.constructor(this.x + that.x, this.y + that.y);\n    }\n\n    /**\n     *  subtract\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    subtract(that) {\n        return new this.constructor(this.x - that.x, this.y - that.y);\n    }\n\n    /**\n     *  multiply\n     *\n     *  @param {number} scalar\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    multiply(scalar) {\n        return new this.constructor(this.x * scalar, this.y * scalar);\n    }\n\n    /**\n     *  divide\n     *\n     *  @param {number} scalar\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    divide(scalar) {\n        return new this.constructor(this.x / scalar, this.y / scalar);\n    }\n\n    /**\n     *  angleBetween\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {number}\n     */\n    angleBetween(that) {\n        let cos = this.dot(that) / (this.length() * that.length());\n        cos = Math.max(-1, Math.min(cos, 1));\n        const radians = Math.acos(cos);\n\n        return (this.cross(that) < 0.0) ? -radians : radians;\n    }\n\n    /**\n     *  Find a vector is that is perpendicular to this vector\n     *\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    perp() {\n        return new this.constructor(-this.y, this.x);\n    }\n\n    /**\n     *  Find the component of the specified vector that is perpendicular to\n     *  this vector\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    perpendicular(that) {\n        return this.subtract(this.project(that));\n    }\n\n    /**\n     *  project\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    project(that) {\n        const percent = this.dot(that) / that.dot(that);\n\n        return that.multiply(percent);\n    }\n\n    /**\n     *  transform\n     *\n     *  @param {module:kld-affine.Matrix2D} matrix\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    transform(matrix) {\n        return new this.constructor(\n            matrix.a * this.x + matrix.c * this.y,\n            matrix.b * this.x + matrix.d * this.y\n        );\n    }\n\n    /**\n     *  equals\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {boolean}\n     */\n    equals(that) {\n        return (\n            this.x === that.x &&\n            this.y === that.y\n        );\n    }\n\n    /**\n     *  precisionEquals\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @param {number} precision\n     *  @returns {boolean}\n     */\n    precisionEquals(that, precision) {\n        return (\n            Math.abs(this.x - that.x) < precision &&\n            Math.abs(this.y - that.y) < precision\n        );\n    }\n\n    /**\n     *  toString\n     *\n     *  @returns {string}\n     */\n    toString() {\n        return `vector(${this.x},${this.y})`;\n    }\n}\n\nexport default Vector2D;\n","/**\n *  Matrix2D.js\n *  @module Matrix2D\n *  @copyright 2001-2019 Kevin Lindsey\n */\n\n/**\n *  Matrix2D\n *\n *  @memberof module:kld-affine\n */\nclass Matrix2D {\n    /**\n     *  A 2D Matrix of the form:<br>\n     *  [a c e]<br>\n     *  [b d f]<br>\n     *  [0 0 1]<br>\n     *\n     *  @param {number} a\n     *  @param {number} b\n     *  @param {number} c\n     *  @param {number} d\n     *  @param {number} e\n     *  @param {number} f\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    constructor(a = 1, b = 0, c = 0, d = 1, e = 0, f = 0) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.e = e;\n        this.f = f;\n    }\n\n    /**\n     *  translation\n     *\n     *  @param {number} tx\n     *  @param {number} ty\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static translation(tx, ty) {\n        return new Matrix2D(1, 0, 0, 1, tx, ty);\n    }\n\n    /**\n     *  scaling\n     *\n     *  @param {number} scale\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static scaling(scale) {\n        return new Matrix2D(scale, 0, 0, scale, 0, 0);\n    }\n\n    /**\n     *  scalingAt\n     *\n     *  @param {number} scale\n     *  @param {module:kld-affine.Point2D} center\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static scalingAt(scale, center) {\n        return new Matrix2D(\n            scale,\n            0,\n            0,\n            scale,\n            center.x - center.x * scale,\n            center.y - center.y * scale\n        );\n    }\n\n    /**\n     *  nonUniformScaling\n     *\n     *  @param {number} scaleX\n     *  @param {number} scaleY\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static nonUniformScaling(scaleX, scaleY) {\n        return new Matrix2D(scaleX, 0, 0, scaleY, 0, 0);\n    }\n\n    /**\n     *  nonUniformScalingAt\n     *\n     *  @param {number} scaleX\n     *  @param {number} scaleY\n     *  @param {module:kld-affine.Point2D} center\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static nonUniformScalingAt(scaleX, scaleY, center) {\n        return new Matrix2D(\n            scaleX,\n            0,\n            0,\n            scaleY,\n            center.x - center.x * scaleX,\n            center.y - center.y * scaleY\n        );\n    }\n\n    /**\n     *  rotation\n     *\n     *  @param {number} radians\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static rotation(radians) {\n        const c = Math.cos(radians);\n        const s = Math.sin(radians);\n\n        return new Matrix2D(c, s, -s, c, 0, 0);\n    }\n\n    /**\n     *  rotationAt\n     *\n     *  @param {number} radians\n     *  @param {module:kld-affine.Point2D} center\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static rotationAt(radians, center) {\n        const c = Math.cos(radians);\n        const s = Math.sin(radians);\n\n        return new Matrix2D(\n            c,\n            s,\n            -s,\n            c,\n            center.x - center.x * c + center.y * s,\n            center.y - center.y * c - center.x * s\n        );\n    }\n\n    /**\n     *  rotationFromVector\n     *\n     *  @param {module:kld-affine.Vector2D} vector\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static rotationFromVector(vector) {\n        const unit = vector.unit();\n        const c = unit.x; // cos\n        const s = unit.y; // sin\n\n        return new Matrix2D(c, s, -s, c, 0, 0);\n    }\n\n    /**\n     *  xFlip\n     *\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static xFlip() {\n        return new Matrix2D(-1, 0, 0, 1, 0, 0);\n    }\n\n    /**\n     *  yFlip\n     *\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static yFlip() {\n        return new Matrix2D(1, 0, 0, -1, 0, 0);\n    }\n\n    /**\n     *  xSkew\n     *\n     *  @param {number} radians\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static xSkew(radians) {\n        const t = Math.tan(radians);\n\n        return new Matrix2D(1, 0, t, 1, 0, 0);\n    }\n\n    /**\n     *  ySkew\n     *\n     *  @param {number} radians\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static ySkew(radians) {\n        const t = Math.tan(radians);\n\n        return new Matrix2D(1, t, 0, 1, 0, 0);\n    }\n\n    /**\n     *  multiply\n     *\n     *  @param {module:kld-affine.Matrix2D} that\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    multiply(that) {\n        if (this.isIdentity()) {\n            return that;\n        }\n\n        if (that.isIdentity()) {\n            return this;\n        }\n\n        return new this.constructor(\n            this.a * that.a + this.c * that.b,\n            this.b * that.a + this.d * that.b,\n            this.a * that.c + this.c * that.d,\n            this.b * that.c + this.d * that.d,\n            this.a * that.e + this.c * that.f + this.e,\n            this.b * that.e + this.d * that.f + this.f\n        );\n    }\n\n    /**\n     *  inverse\n     *\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    inverse() {\n        if (this.isIdentity()) {\n            return this;\n        }\n\n        const det1 = this.a * this.d - this.b * this.c;\n\n        if (det1 === 0.0) {\n            throw new Error(\"Matrix is not invertible\");\n        }\n\n        const idet = 1.0 / det1;\n        const det2 = this.f * this.c - this.e * this.d;\n        const det3 = this.e * this.b - this.f * this.a;\n\n        return new this.constructor(\n            this.d * idet,\n            -this.b * idet,\n            -this.c * idet,\n            this.a * idet,\n            det2 * idet,\n            det3 * idet\n        );\n    }\n\n    /**\n     *  translate\n     *\n     *  @param {number} tx\n     *  @param {number} ty\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    translate(tx, ty) {\n        return new this.constructor(\n            this.a,\n            this.b,\n            this.c,\n            this.d,\n            this.a * tx + this.c * ty + this.e,\n            this.b * tx + this.d * ty + this.f\n        );\n    }\n\n    /**\n     *  scale\n     *\n     *  @param {number} scale\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    scale(scale) {\n        return new this.constructor(\n            this.a * scale,\n            this.b * scale,\n            this.c * scale,\n            this.d * scale,\n            this.e,\n            this.f\n        );\n    }\n\n    /**\n     *  scaleAt\n     *\n     *  @param {number} scale\n     *  @param {module:kld-affine.Point2D} center\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    scaleAt(scale, center) {\n        const dx = center.x - scale * center.x;\n        const dy = center.y - scale * center.y;\n\n        return new this.constructor(\n            this.a * scale,\n            this.b * scale,\n            this.c * scale,\n            this.d * scale,\n            this.a * dx + this.c * dy + this.e,\n            this.b * dx + this.d * dy + this.f\n        );\n    }\n\n    /**\n     *  scaleNonUniform\n     *\n     *  @param {number} scaleX\n     *  @param {number} scaleY\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    scaleNonUniform(scaleX, scaleY) {\n        return new this.constructor(\n            this.a * scaleX,\n            this.b * scaleX,\n            this.c * scaleY,\n            this.d * scaleY,\n            this.e,\n            this.f\n        );\n    }\n\n    /**\n     *  scaleNonUniformAt\n     *\n     *  @param {number} scaleX\n     *  @param {number} scaleY\n     *  @param {module:kld-affine.Point2D} center\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    scaleNonUniformAt(scaleX, scaleY, center) {\n        const dx = center.x - scaleX * center.x;\n        const dy = center.y - scaleY * center.y;\n\n        return new this.constructor(\n            this.a * scaleX,\n            this.b * scaleX,\n            this.c * scaleY,\n            this.d * scaleY,\n            this.a * dx + this.c * dy + this.e,\n            this.b * dx + this.d * dy + this.f\n        );\n    }\n\n    /**\n     *  rotate\n     *\n     *  @param {number} radians\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    rotate(radians) {\n        const c = Math.cos(radians);\n        const s = Math.sin(radians);\n\n        return new this.constructor(\n            this.a * c + this.c * s,\n            this.b * c + this.d * s,\n            this.a * -s + this.c * c,\n            this.b * -s + this.d * c,\n            this.e,\n            this.f\n        );\n    }\n\n    /**\n     *  rotateAt\n     *\n     *  @param {number} radians\n     *  @param {module:kld-affine.Point2D} center\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    rotateAt(radians, center) {\n        const cos = Math.cos(radians);\n        const sin = Math.sin(radians);\n        const cx = center.x;\n        const cy = center.y;\n\n        const a = this.a * cos + this.c * sin;\n        const b = this.b * cos + this.d * sin;\n        const c = this.c * cos - this.a * sin;\n        const d = this.d * cos - this.b * sin;\n\n        return new this.constructor(\n            a,\n            b,\n            c,\n            d,\n            (this.a - a) * cx + (this.c - c) * cy + this.e,\n            (this.b - b) * cx + (this.d - d) * cy + this.f\n        );\n    }\n\n    /**\n     *  rotateFromVector\n     *\n     *  @param {module:kld-affine.Vector2D} vector\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    rotateFromVector(vector) {\n        const unit = vector.unit();\n        const c = unit.x; // cos\n        const s = unit.y; // sin\n\n        return new this.constructor(\n            this.a * c + this.c * s,\n            this.b * c + this.d * s,\n            this.a * -s + this.c * c,\n            this.b * -s + this.d * c,\n            this.e,\n            this.f\n        );\n    }\n\n    /**\n     *  flipX\n     *\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    flipX() {\n        return new this.constructor(\n            -this.a,\n            -this.b,\n            this.c,\n            this.d,\n            this.e,\n            this.f\n        );\n    }\n\n    /**\n     *  flipY\n     *\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    flipY() {\n        return new this.constructor(\n            this.a,\n            this.b,\n            -this.c,\n            -this.d,\n            this.e,\n            this.f\n        );\n    }\n\n    /**\n     *  skewX\n     *\n     *  @param {number} radians\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    skewX(radians) {\n        const t = Math.tan(radians);\n\n        return new this.constructor(\n            this.a,\n            this.b,\n            this.c + this.a * t,\n            this.d + this.b * t,\n            this.e,\n            this.f\n        );\n    }\n\n    // TODO: skewXAt\n\n    /**\n     *  skewY\n     *\n     *  @param {number} radians\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    skewY(radians) {\n        const t = Math.tan(radians);\n\n        return new this.constructor(\n            this.a + this.c * t,\n            this.b + this.d * t,\n            this.c,\n            this.d,\n            this.e,\n            this.f\n        );\n    }\n\n    // TODO: skewYAt\n\n    /**\n     *  isIdentity\n     *\n     *  @returns {boolean}\n     */\n    isIdentity() {\n        return (\n            this.a === 1.0 &&\n            this.b === 0.0 &&\n            this.c === 0.0 &&\n            this.d === 1.0 &&\n            this.e === 0.0 &&\n            this.f === 0.0\n        );\n    }\n\n    /**\n     *  isInvertible\n     *\n     *  @returns {boolean}\n     */\n    isInvertible() {\n        return this.a * this.d - this.b * this.c !== 0.0;\n    }\n\n    /**\n     *  getScale\n     *\n     *  @returns {{ scaleX: number, scaleY: number }}\n     */\n    getScale() {\n        return {\n            scaleX: Math.sqrt(this.a * this.a + this.c * this.c),\n            scaleY: Math.sqrt(this.b * this.b + this.d * this.d)\n        };\n    }\n\n    /**\n     *  Calculates matrix Singular Value Decomposition\n     *\n     *  The resulting matrices — translation, rotation, scale, and rotation0 — return\n     *  this matrix when they are multiplied together in the listed order\n     *\n     *  @see Jim Blinn's article {@link http://dx.doi.org/10.1109/38.486688}\n     *  @see {@link http://math.stackexchange.com/questions/861674/decompose-a-2d-arbitrary-transform-into-only-scaling-and-rotation}\n     *\n     *  @returns {{\n     *    translation: module:kld-affine.Matrix2D,\n     *    rotation: module:kld-affine.Matrix2D,\n     *    scale: module:kld-affine.Matrix2D,\n     *    rotation0: module:kld-affine.Matrix2D\n     *  }}\n     */\n    getDecomposition() {\n        const E = (this.a + this.d) * 0.5;\n        const F = (this.a - this.d) * 0.5;\n        const G = (this.b + this.c) * 0.5;\n        const H = (this.b - this.c) * 0.5;\n\n        const Q = Math.sqrt(E * E + H * H);\n        const R = Math.sqrt(F * F + G * G);\n        const scaleX = Q + R;\n        const scaleY = Q - R;\n\n        const a1 = Math.atan2(G, F);\n        const a2 = Math.atan2(H, E);\n        const theta = (a2 - a1) * 0.5;\n        const phi = (a2 + a1) * 0.5;\n\n        return {\n            translation: this.constructor.translation(this.e, this.f),\n            rotation: this.constructor.rotation(phi),\n            scale: this.constructor.nonUniformScaling(scaleX, scaleY),\n            rotation0: this.constructor.rotation(theta)\n        };\n    }\n\n    /**\n     *  equals\n     *\n     *  @param {module:kld-affine.Matrix2D} that\n     *  @returns {boolean}\n     */\n    equals(that) {\n        return (\n            this.a === that.a &&\n            this.b === that.b &&\n            this.c === that.c &&\n            this.d === that.d &&\n            this.e === that.e &&\n            this.f === that.f\n        );\n    }\n\n    /**\n     *  precisionEquals\n     *\n     *  @param {module:kld-affine.Matrix2D} that\n     *  @param {number} precision\n     *  @returns {boolean}\n     */\n    precisionEquals(that, precision) {\n        return (\n            Math.abs(this.a - that.a) < precision &&\n            Math.abs(this.b - that.b) < precision &&\n            Math.abs(this.c - that.c) < precision &&\n            Math.abs(this.d - that.d) < precision &&\n            Math.abs(this.e - that.e) < precision &&\n            Math.abs(this.f - that.f) < precision\n        );\n    }\n\n    /**\n     *  toString\n     *\n     *  @returns {string}\n     */\n    toString() {\n        return `matrix(${this.a},${this.b},${this.c},${this.d},${this.e},${this.f})`;\n    }\n}\n\n/**\n *  Identity matrix\n *\n *  @returns {module:kld-affine.Matrix2D}\n */\nMatrix2D.IDENTITY = new Matrix2D();\nMatrix2D.IDENTITY.isIdentity = () => true;\n\n\nexport default Matrix2D;\n","/* eslint-disable camelcase */\n/**\n *  Polynomial.js\n *\n *  @module Polynomial\n *  @copyright 2002-2019 Kevin Lindsey<br>\n *  -<br>\n *  Contribution {@link http://github.com/Quazistax/kld-polynomial}<br>\n *  copyright 2015 Robert Benko (Quazistax) <quazistax@gmail.com><br>\n *  MIT license\n */\n\n/**\n *  Sign of a number (+1, -1, +0, -0).\n *\n *  @param {number} x\n *  @returns {number}\n */\nfunction sign(x) {\n    // eslint-disable-next-line no-self-compare\n    return typeof x === \"number\" ? x ? x < 0 ? -1 : 1 : x === x ? x : NaN : NaN;\n}\n\n/**\n *  Polynomial\n *\n *  @memberof module:kld-polynomial\n */\nclass Polynomial {\n    /**\n     *  Polynomial\n     *\n     *  @param {Array<number>} coefs\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    constructor(...coefs) {\n        this.coefs = [];\n\n        for (let i = coefs.length - 1; i >= 0; i--) {\n            this.coefs.push(coefs[i]);\n        }\n\n        this._variable = \"t\";\n        this._s = 0;\n    }\n\n    /**\n     *  Based on polint in \"Numerical Recipes in C, 2nd Edition\", pages 109-110\n     *\n     *  @param {Array<number>} xs\n     *  @param {Array<number>} ys\n     *  @param {number} n\n     *  @param {number} offset\n     *  @param {number} x\n     *\n     *  @returns {{y: number, dy: number}}\n     */\n    static interpolate(xs, ys, n, offset, x) {\n        if (xs.constructor !== Array || ys.constructor !== Array) {\n            throw new TypeError(\"xs and ys must be arrays\");\n        }\n        if (isNaN(n) || isNaN(offset) || isNaN(x)) {\n            throw new TypeError(\"n, offset, and x must be numbers\");\n        }\n\n        let i, y;\n        let dy = 0;\n        const c = new Array(n);\n        const d = new Array(n);\n        let ns = 0;\n\n        let diff = Math.abs(x - xs[offset]);\n\n        for (i = 0; i < n; i++) {\n            const dift = Math.abs(x - xs[offset + i]);\n\n            if (dift < diff) {\n                ns = i;\n                diff = dift;\n            }\n            c[i] = d[i] = ys[offset + i];\n        }\n\n        y = ys[offset + ns];\n        ns--;\n\n        for (let m = 1; m < n; m++) {\n            for (i = 0; i < n - m; i++) {\n                const ho = xs[offset + i] - x;\n                const hp = xs[offset + i + m] - x;\n                const w = c[i + 1] - d[i];\n                let den = ho - hp;\n\n                if (den === 0.0) {\n                    throw new RangeError(\"Unable to interpolate polynomial. Two numbers in n were identical (to within roundoff)\");\n                }\n\n                den = w / den;\n                d[i] = hp * den;\n                c[i] = ho * den;\n            }\n\n            dy = (2 * (ns + 1) < (n - m)) ? c[ns + 1] : d[ns--];\n            y += dy;\n        }\n\n        return {y, dy};\n    }\n\n    /**\n     *  Newton's (Newton-Raphson) method for finding Real roots on univariate function. <br/>\n     *  When using bounds, algorithm falls back to secant if newton goes out of range.\n     *  Bisection is fallback for secant when determined secant is not efficient enough.\n     *  @see {@link http://en.wikipedia.org/wiki/Newton%27s_method}\n     *  @see {@link http://en.wikipedia.org/wiki/Secant_method}\n     *  @see {@link http://en.wikipedia.org/wiki/Bisection_method}\n     *\n     *  @param {number} x0 - Initial root guess\n     *  @param {Function} f - Function which root we are trying to find\n     *  @param {Function} df - Derivative of function f\n     *  @param {number} max_iterations - Maximum number of algorithm iterations\n     *  @param {number} [min] - Left bound value\n     *  @param {number} [max] - Right bound value\n     *  @returns {number} root\n     */\n    static newtonSecantBisection(x0, f, df, max_iterations, min, max) {\n        let x, prev_dfx = 0, dfx, prev_x_ef_correction = 0, x_correction, x_new;\n        let y, y_atmin, y_atmax;\n\n        x = x0;\n\n        const ACCURACY = 14;\n        const min_correction_factor = Math.pow(10, -ACCURACY);\n        const isBounded = (typeof min === \"number\" && typeof max === \"number\");\n\n        if (isBounded) {\n            if (min > max) {\n                throw new RangeError(\"Min must be greater than max\");\n            }\n\n            y_atmin = f(min);\n            y_atmax = f(max);\n\n            if (sign(y_atmin) === sign(y_atmax)) {\n                throw new RangeError(\"Y values of bounds must be of opposite sign\");\n            }\n        }\n\n        const isEnoughCorrection = function() {\n            // stop if correction is too small or if correction is in simple loop\n            return (Math.abs(x_correction) <= min_correction_factor * Math.abs(x)) ||\n                (prev_x_ef_correction === (x - x_correction) - x);\n        };\n\n        for (let i = 0; i < max_iterations; i++) {\n            dfx = df(x);\n\n            if (dfx === 0) {\n                if (prev_dfx === 0) {\n                    // error\n                    throw new RangeError(\"df(x) is zero\");\n                }\n                else {\n                    // use previous derivation value\n                    dfx = prev_dfx;\n                }\n                // or move x a little?\n                // dfx = df(x != 0 ? x + x * 1e-15 : 1e-15);\n            }\n\n            prev_dfx = dfx;\n            y = f(x);\n            x_correction = y / dfx;\n            x_new = x - x_correction;\n\n            if (isEnoughCorrection()) {\n                break;\n            }\n\n            if (isBounded) {\n                if (sign(y) === sign(y_atmax)) {\n                    max = x;\n                    y_atmax = y;\n                }\n                else if (sign(y) === sign(y_atmin)) {\n                    min = x;\n                    y_atmin = y;\n                }\n                else {\n                    x = x_new;\n                    break;\n                }\n\n                if ((x_new < min) || (x_new > max)) {\n                    if (sign(y_atmin) === sign(y_atmax)) {\n                        break;\n                    }\n\n                    const RATIO_LIMIT = 50;\n                    const AIMED_BISECT_OFFSET = 0.25; // [0, 0.5)\n                    const dy = y_atmax - y_atmin;\n                    const dx = max - min;\n\n                    if (dy === 0) {\n                        x_correction = x - (min + dx * 0.5);\n                    }\n                    else if (Math.abs(dy / Math.min(y_atmin, y_atmax)) > RATIO_LIMIT) {\n                        x_correction = x - (min + dx * (0.5 + (Math.abs(y_atmin) < Math.abs(y_atmax) ? -AIMED_BISECT_OFFSET : AIMED_BISECT_OFFSET)));\n                    }\n                    else {\n                        x_correction = x - (min - y_atmin / dy * dx);\n                    }\n                    x_new = x - x_correction;\n\n                    if (isEnoughCorrection()) {\n                        break;\n                    }\n                }\n            }\n\n            prev_x_ef_correction = x - x_new;\n            x = x_new;\n        }\n\n        return x;\n    }\n\n    /**\n     *  Clones this polynomial and return the clone.\n     *\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    clone() {\n        const poly = new Polynomial();\n\n        poly.coefs = this.coefs.slice();\n\n        return poly;\n    }\n\n    /**\n     *  eval\n     *\n     *  @param {number} x\n     */\n    eval(x) {\n        if (isNaN(x)) {\n            throw new TypeError(`Parameter must be a number. Found '${x}'`);\n        }\n\n        let result = 0;\n\n        for (let i = this.coefs.length - 1; i >= 0; i--) {\n            result = result * x + this.coefs[i];\n        }\n\n        return result;\n    }\n\n    /**\n     *  add\n     *\n     *  @param {module:kld-polynomial.Polynomial} that\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    add(that) {\n        const result = new Polynomial();\n        const d1 = this.getDegree();\n        const d2 = that.getDegree();\n        const dmax = Math.max(d1, d2);\n\n        for (let i = 0; i <= dmax; i++) {\n            const v1 = (i <= d1) ? this.coefs[i] : 0;\n            const v2 = (i <= d2) ? that.coefs[i] : 0;\n\n            result.coefs[i] = v1 + v2;\n        }\n\n        return result;\n    }\n\n    /**\n     *  multiply\n     *\n     *  @param {module:kld-polynomial.Polynomial} that\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    multiply(that) {\n        const result = new Polynomial();\n\n        for (let i = 0; i <= this.getDegree() + that.getDegree(); i++) {\n            result.coefs.push(0);\n        }\n\n        for (let i = 0; i <= this.getDegree(); i++) {\n            for (let j = 0; j <= that.getDegree(); j++) {\n                result.coefs[i + j] += this.coefs[i] * that.coefs[j];\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  divideEqualsScalar\n     *\n     *  @deprecated To be replaced by divideScalar\n     *  @param {number} scalar\n     */\n    divideEqualsScalar(scalar) {\n        for (let i = 0; i < this.coefs.length; i++) {\n            this.coefs[i] /= scalar;\n        }\n    }\n\n    /**\n     *  simplifyEquals\n     *\n     *  @deprecated To be replaced by simplify\n     *  @param {number} TOLERANCE\n     */\n    simplifyEquals(TOLERANCE = 1e-12) {\n        for (let i = this.getDegree(); i >= 0; i--) {\n            if (Math.abs(this.coefs[i]) <= TOLERANCE) {\n                this.coefs.pop();\n            }\n            else {\n                break;\n            }\n        }\n    }\n\n    /**\n     *  Sets small coefficients to zero.\n     *\n     *  @deprecated To be replaced by removeZeros\n     *  @param {number} TOLERANCE\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    removeZerosEquals(TOLERANCE = 1e-15) {\n        const c = this.coefs;\n        const err = 10 * TOLERANCE * Math.abs(\n            c.reduce((pv, cv) => {\n                return Math.abs(cv) > Math.abs(pv) ? cv : pv;\n            })\n        );\n\n        for (let i = 0; i < c.length - 1; i++) {\n            if (Math.abs(c[i]) < err) {\n                c[i] = 0;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     *  Scales polynomial so that leading coefficient becomes 1.\n     *\n     *  @deprecated To be replaced by getMonic\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    monicEquals() {\n        const c = this.coefs;\n\n        if (c[c.length - 1] !== 1) {\n            this.divideEqualsScalar(c[c.length - 1]);\n        }\n\n        return this;\n    }\n\n    /**\n     *  toString\n     *\n     *  @returns {string}\n     */\n    toString() {\n        const coefs = [];\n        const signs = [];\n\n        for (let i = this.coefs.length - 1; i >= 0; i--) {\n            let value = Math.round(this.coefs[i] * 1000) / 1000;\n\n            if (value !== 0) {\n                const signString = (value < 0) ? \" - \" : \" + \";\n\n                value = Math.abs(value);\n\n                if (i > 0) {\n                    if (value === 1) {\n                        value = this._variable;\n                    }\n                    else {\n                        value += this._variable;\n                    }\n                }\n\n                if (i > 1) {\n                    value += \"^\" + i;\n                }\n\n                signs.push(signString);\n                coefs.push(value);\n            }\n        }\n\n        signs[0] = (signs[0] === \" + \") ? \"\" : \"-\";\n\n        let result = \"\";\n\n        for (let i = 0; i < coefs.length; i++) {\n            result += signs[i] + coefs[i];\n        }\n\n        return result;\n    }\n\n    /**\n     *  bisection\n     *\n     *  @param {number} min\n     *  @param {number} max\n     *  @param {number} [TOLERANCE]\n     *  @param {number} [ACCURACY]\n     *  @returns {number}\n     */\n    bisection(min, max, TOLERANCE = 1e-6, ACCURACY = 15) {\n        let minValue = this.eval(min);\n        let maxValue = this.eval(max);\n        let result;\n\n        if (Math.abs(minValue) <= TOLERANCE) {\n            result = min;\n        }\n        else if (Math.abs(maxValue) <= TOLERANCE) {\n            result = max;\n        }\n        else if (minValue * maxValue <= 0) {\n            const tmp1 = Math.log(max - min);\n            const tmp2 = Math.LN10 * ACCURACY;\n            const maxIterations = Math.ceil((tmp1 + tmp2) / Math.LN2);\n\n            for (let i = 0; i < maxIterations; i++) {\n                result = 0.5 * (min + max);\n                const value = this.eval(result);\n\n                if (Math.abs(value) <= TOLERANCE) {\n                    break;\n                }\n\n                if (value * minValue < 0) {\n                    max = result;\n                    maxValue = value;\n                }\n                else {\n                    min = result;\n                    minValue = value;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  Based on trapzd in \"Numerical Recipes in C, 2nd Edition\", page 137\n     *\n     *  @param {number} min\n     *  @param {number} max\n     *  @param {number} n\n     *  @returns {number}\n     */\n    trapezoid(min, max, n) {\n        if (isNaN(min) || isNaN(max) || isNaN(n)) {\n            throw new TypeError(\"Parameters must be numbers\");\n        }\n\n        const range = max - min;\n\n        if (n === 1) {\n            const minValue = this.eval(min);\n            const maxValue = this.eval(max);\n\n            this._s = 0.5 * range * (minValue + maxValue);\n        }\n        else {\n            const iter = 1 << (n - 2);\n            const delta = range / iter;\n            let x = min + 0.5 * delta;\n            let sum = 0;\n\n            for (let i = 0; i < iter; i++) {\n                sum += this.eval(x);\n                x += delta;\n            }\n\n            this._s = 0.5 * (this._s + range * sum / iter);\n        }\n\n        if (isNaN(this._s)) {\n            throw new TypeError(\"this._s is NaN\");\n        }\n\n        return this._s;\n    }\n\n    /**\n     *  Based on trapzd in \"Numerical Recipes in C, 2nd Edition\", page 139\n     *\n     *  @param {number} min\n     *  @param {number} max\n     *  @returns {number}\n     */\n    simpson(min, max) {\n        if (isNaN(min) || isNaN(max)) {\n            throw new TypeError(\"Parameters must be numbers\");\n        }\n\n        const range = max - min;\n        let st = 0.5 * range * (this.eval(min) + this.eval(max));\n        let t = st;\n        let s = 4.0 * st / 3.0;\n        let os = s;\n        let ost = st;\n        const TOLERANCE = 1e-7;\n\n        let iter = 1;\n\n        for (let n = 2; n <= 20; n++) {\n            const delta = range / iter;\n            let x = min + 0.5 * delta;\n            let sum = 0;\n\n            for (let i = 1; i <= iter; i++) {\n                sum += this.eval(x);\n                x += delta;\n            }\n\n            t = 0.5 * (t + range * sum / iter);\n            st = t;\n            s = (4.0 * st - ost) / 3.0;\n\n            if (Math.abs(s - os) < TOLERANCE * Math.abs(os)) {\n                break;\n            }\n\n            os = s;\n            ost = st;\n            iter <<= 1;\n        }\n\n        return s;\n    }\n\n    /**\n     *  romberg\n     *\n     *  @param {number} min\n     *  @param {number} max\n     *  @returns {number}\n     */\n    romberg(min, max) {\n        if (isNaN(min) || isNaN(max)) {\n            throw new TypeError(\"Parameters must be numbers\");\n        }\n\n        const MAX = 20;\n        const K = 3;\n        const TOLERANCE = 1e-6;\n        const s = new Array(MAX + 1);\n        const h = new Array(MAX + 1);\n        let result = {y: 0, dy: 0};\n\n        h[0] = 1.0;\n\n        for (let j = 1; j <= MAX; j++) {\n            s[j - 1] = this.trapezoid(min, max, j);\n\n            if (j >= K) {\n                result = Polynomial.interpolate(h, s, K, j - K, 0.0);\n                if (Math.abs(result.dy) <= TOLERANCE * result.y) {\n                    break;\n                }\n            }\n\n            s[j] = s[j - 1];\n            h[j] = 0.25 * h[j - 1];\n        }\n\n        return result.y;\n    }\n\n    /**\n     *  Estimate what is the maximum polynomial evaluation error value under which polynomial evaluation could be in fact 0.\n     *\n     *  @param {number} maxAbsX\n     *  @returns {number}\n     */\n    zeroErrorEstimate(maxAbsX) {\n        const poly = this;\n        const ERRF = 1e-15;\n\n        if (typeof maxAbsX === \"undefined\") {\n            const rb = poly.bounds();\n\n            maxAbsX = Math.max(Math.abs(rb.minX), Math.abs(rb.maxX));\n        }\n\n        if (maxAbsX < 0.001) {\n            return 2 * Math.abs(poly.eval(ERRF));\n        }\n\n        const n = poly.coefs.length - 1;\n        const an = poly.coefs[n];\n\n        return 10 * ERRF * poly.coefs.reduce((m, v, i) => {\n            const nm = v / an * Math.pow(maxAbsX, i);\n            return nm > m ? nm : m;\n        }, 0);\n    }\n\n    /**\n     *  Calculates upper Real roots bounds. <br/>\n     *  Real roots are in interval [negX, posX]. Determined by Fujiwara method.\n     *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n     *\n     *  @returns {{ negX: number, posX: number }}\n     */\n    boundsUpperRealFujiwara() {\n        let a = this.coefs;\n        const n = a.length - 1;\n        const an = a[n];\n\n        if (an !== 1) {\n            a = this.coefs.map(v => v / an);\n        }\n\n        const b = a.map((v, i) => {\n            return (i < n)\n                ? Math.pow(Math.abs((i === 0) ? v / 2 : v), 1 / (n - i))\n                : v;\n        });\n\n        let coefSelectionFunc;\n        const find2Max = function(acc, bi, i) {\n            if (coefSelectionFunc(i)) {\n                if (acc.max < bi) {\n                    acc.nearmax = acc.max;\n                    acc.max = bi;\n                }\n                else if (acc.nearmax < bi) {\n                    acc.nearmax = bi;\n                }\n            }\n            return acc;\n        };\n\n        coefSelectionFunc = function(i) {\n            return i < n && a[i] < 0;\n        };\n\n        // eslint-disable-next-line unicorn/no-fn-reference-in-iterator\n        const max_nearmax_pos = b.reduce(find2Max, {max: 0, nearmax: 0});\n\n        coefSelectionFunc = function(i) {\n            return i < n && ((n % 2 === i % 2) ? a[i] < 0 : a[i] > 0);\n        };\n\n        // eslint-disable-next-line unicorn/no-fn-reference-in-iterator\n        const max_nearmax_neg = b.reduce(find2Max, {max: 0, nearmax: 0});\n\n        return {\n            negX: -2 * max_nearmax_neg.max,\n            posX: 2 * max_nearmax_pos.max\n        };\n    }\n\n    /**\n     *  Calculates lower Real roots bounds. <br/>\n     *  There are no Real roots in interval <negX, posX>. Determined by Fujiwara method.\n     *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n     *\n     *  @returns {{ negX: number, posX: number }}\n     */\n    boundsLowerRealFujiwara() {\n        const poly = new Polynomial();\n\n        poly.coefs = this.coefs.slice().reverse();\n\n        const res = poly.boundsUpperRealFujiwara();\n\n        res.negX = 1 / res.negX;\n        res.posX = 1 / res.posX;\n\n        return res;\n    }\n\n    /**\n     *  Calculates left and right Real roots bounds. <br/>\n     *  Real roots are in interval [minX, maxX]. Combines Fujiwara lower and upper bounds to get minimal interval.\n     *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n     *\n     *  @returns {{ minX: number, maxX: number }}\n    */\n    bounds() {\n        const urb = this.boundsUpperRealFujiwara();\n        const rb = {minX: urb.negX, maxX: urb.posX};\n\n        if (urb.negX === 0 && urb.posX === 0) {\n            return rb;\n        }\n\n        if (urb.negX === 0) {\n            rb.minX = this.boundsLowerRealFujiwara().posX;\n        }\n        else if (urb.posX === 0) {\n            rb.maxX = this.boundsLowerRealFujiwara().negX;\n        }\n\n        if (rb.minX > rb.maxX) {\n            rb.minX = rb.maxX = 0;\n        }\n\n        return rb;\n        // TODO: if sure that there are no complex roots\n        // (maybe by using Sturm's theorem) use:\n        // return this.boundsRealLaguerre();\n    }\n\n    /**\n     *  Calculates absolute upper roots bound. <br/>\n     *  All (Complex and Real) roots magnitudes are &lt;= result. Determined by Rouche method.\n     *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n     *\n     *  @returns {number}\n     */\n    boundUpperAbsRouche() {\n        const a = this.coefs;\n        const n = a.length - 1;\n        const max = a.reduce((prev, curr, i) => {\n            if (i !== n) {\n                curr = Math.abs(curr);\n                return (prev < curr) ? curr : prev;\n            }\n            return prev;\n        }, 0);\n\n        return 1 + max / Math.abs(a[n]);\n    }\n\n    /**\n     *  Calculates absolute lower roots bound. <br/>\n     *  All (Complex and Real) roots magnitudes are &gt;= result. Determined by Rouche method.\n     *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n     *\n     *  @returns {number}\n     */\n    boundLowerAbsRouche() {\n        const a = this.coefs;\n        const max = a.reduce((prev, curr, i) => {\n            if (i !== 0) {\n                curr = Math.abs(curr);\n                return (prev < curr) ? curr : prev;\n            }\n            return prev;\n        }, 0);\n\n        return Math.abs(a[0]) / (Math.abs(a[0]) + max);\n    }\n\n    /**\n     *  Calculates left and right Real roots bounds.<br/>\n     *  WORKS ONLY if all polynomial roots are Real.\n     *  Real roots are in interval [minX, maxX]. Determined by Laguerre method.\n     *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n     *\n     *  @returns {{ minX: number, maxX: number }}\n     */\n    boundsRealLaguerre() {\n        const a = this.coefs;\n        const n = a.length - 1;\n        const p1 = -a[n - 1] / (n * a[n]);\n        const undersqrt = a[n - 1] * a[n - 1] - 2 * n / (n - 1) * a[n] * a[n - 2];\n        let p2 = (n - 1) / (n * a[n]) * Math.sqrt(undersqrt);\n\n        if (p2 < 0) {\n            p2 = -p2;\n        }\n\n        return {\n            minX: p1 - p2,\n            maxX: p1 + p2\n        };\n    }\n\n    /**\n     *  Root count by Descartes rule of signs. <br/>\n     *  Returns maximum number of positive and negative real roots and minimum number of complex roots.\n     *  @see {@link http://en.wikipedia.org/wiki/Descartes%27_rule_of_signs}\n     *\n     *  @returns {{maxRealPos: number, maxRealNeg: number, minComplex: number}}\n     */\n    countRootsDescartes() {\n        const a = this.coefs;\n        const n = a.length - 1;\n        const accum = a.reduce((acc, ai, i) => {\n            if (acc.prev_a !== 0 && ai !== 0) {\n                if ((acc.prev_a < 0) === (ai > 0)) {\n                    acc.pos++;\n                }\n                if (((i % 2 === 0) !== (acc.prev_a < 0)) === ((i % 2 === 1) !== (ai > 0))) {\n                    acc.neg++;\n                }\n            }\n            acc.prev_a = ai;\n            return acc;\n        }, {pos: 0, neg: 0, prev_a: 0});\n\n        return {\n            maxRealPos: accum.pos,\n            maxRealNeg: accum.neg,\n            minComplex: n - (accum.pos + accum.neg)\n        };\n    }\n\n    // getters and setters\n\n    /**\n     *  get degree\n     *\n     *  @returns {number}\n     */\n    getDegree() {\n        return this.coefs.length - 1;\n    }\n\n    /**\n     *  getDerivative\n     *\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    getDerivative() {\n        const derivative = new Polynomial();\n\n        for (let i = 1; i < this.coefs.length; i++) {\n            derivative.coefs.push(i * this.coefs[i]);\n        }\n\n        return derivative;\n    }\n\n    /**\n     *  getRoots\n     *\n     *  @returns {Array<number>}\n     */\n    getRoots() {\n        let result;\n\n        this.simplifyEquals();\n\n        switch (this.getDegree()) {\n            case 0: result = []; break;\n            case 1: result = this.getLinearRoot(); break;\n            case 2: result = this.getQuadraticRoots(); break;\n            case 3: result = this.getCubicRoots(); break;\n            case 4: result = this.getQuarticRoots(); break;\n            default:\n                result = [];\n        }\n\n        return result;\n    }\n\n    /**\n     *  getRootsInInterval\n     *\n     *  @param {number} min\n     *  @param {number} max\n     *  @returns {Array<number>}\n     */\n    getRootsInInterval(min, max) {\n        const roots = [];\n\n        /**\n         *  @param {number} value\n         */\n        function push(value) {\n            if (typeof value === \"number\") {\n                roots.push(value);\n            }\n        }\n\n        if (this.getDegree() === 0) {\n            throw new RangeError(\"Unexpected empty polynomial\");\n        }\n        else if (this.getDegree() === 1) {\n            push(this.bisection(min, max));\n        }\n        else {\n            // get roots of derivative\n            const deriv = this.getDerivative();\n            const droots = deriv.getRootsInInterval(min, max);\n\n            if (droots.length > 0) {\n                // find root on [min, droots[0]]\n                push(this.bisection(min, droots[0]));\n\n                // find root on [droots[i],droots[i+1]] for 0 <= i <= count-2\n                for (let i = 0; i <= droots.length - 2; i++) {\n                    push(this.bisection(droots[i], droots[i + 1]));\n                }\n\n                // find root on [droots[count-1],xmax]\n                push(this.bisection(droots[droots.length - 1], max));\n            }\n            else {\n                // polynomial is monotone on [min,max], has at most one root\n                push(this.bisection(min, max));\n            }\n        }\n\n        return roots;\n    }\n\n    /**\n     *  getLinearRoot\n     *\n     *  @returns {number}\n     */\n    getLinearRoot() {\n        const result = [];\n        const a = this.coefs[1];\n\n        if (a !== 0) {\n            result.push(-this.coefs[0] / a);\n        }\n\n        return result;\n    }\n\n    /**\n     *  getQuadraticRoots\n     *\n     *  @returns {Array<number>}\n     */\n    getQuadraticRoots() {\n        const results = [];\n\n        if (this.getDegree() === 2) {\n            const a = this.coefs[2];\n            const b = this.coefs[1] / a;\n            const c = this.coefs[0] / a;\n            const d = b * b - 4 * c;\n\n            if (d > 0) {\n                const e = Math.sqrt(d);\n\n                results.push(0.5 * (-b + e));\n                results.push(0.5 * (-b - e));\n            }\n            else if (d === 0) {\n                // really two roots with same value, but we only return one\n                results.push(0.5 * -b);\n            }\n            // else imaginary results\n        }\n\n        return results;\n    }\n\n    /**\n     *  getCubicRoots\n     *\n     *  This code is based on MgcPolynomial.cpp written by David Eberly.  His\n     *  code along with many other excellent examples are avaiable at his site:\n     *  http://www.geometrictools.com\n     *\n     *  @returns {Array<number>}\n     */\n    getCubicRoots() {\n        const results = [];\n\n        if (this.getDegree() === 3) {\n            const c3 = this.coefs[3];\n            const c2 = this.coefs[2] / c3;\n            const c1 = this.coefs[1] / c3;\n            const c0 = this.coefs[0] / c3;\n\n            const a = (3 * c1 - c2 * c2) / 3;\n            const b = (2 * c2 * c2 * c2 - 9 * c1 * c2 + 27 * c0) / 27;\n            const offset = c2 / 3;\n            let discrim = b * b / 4 + a * a * a / 27;\n            const halfB = b / 2;\n\n            const ZEROepsilon = this.zeroErrorEstimate();\n\n            if (Math.abs(discrim) <= ZEROepsilon) {\n                discrim = 0;\n            }\n\n            if (discrim > 0) {\n                const e = Math.sqrt(discrim);\n                let root; // eslint-disable-line no-shadow\n\n                let tmp = -halfB + e;\n\n                if (tmp >= 0) {\n                    root = Math.pow(tmp, 1 / 3);\n                }\n                else {\n                    root = -Math.pow(-tmp, 1 / 3);\n                }\n\n                tmp = -halfB - e;\n\n                if (tmp >= 0) {\n                    root += Math.pow(tmp, 1 / 3);\n                }\n                else {\n                    root -= Math.pow(-tmp, 1 / 3);\n                }\n\n                results.push(root - offset);\n            }\n            else if (discrim < 0) {\n                const distance = Math.sqrt(-a / 3);\n                const angle = Math.atan2(Math.sqrt(-discrim), -halfB) / 3;\n                const cos = Math.cos(angle);\n                const sin = Math.sin(angle);\n                const sqrt3 = Math.sqrt(3);\n\n                results.push(2 * distance * cos - offset);\n                results.push(-distance * (cos + sqrt3 * sin) - offset);\n                results.push(-distance * (cos - sqrt3 * sin) - offset);\n            }\n            else {\n                let tmp;\n\n                if (halfB >= 0) {\n                    tmp = -Math.pow(halfB, 1 / 3);\n                }\n                else {\n                    tmp = Math.pow(-halfB, 1 / 3);\n                }\n\n                results.push(2 * tmp - offset);\n                // really should return next root twice, but we return only one\n                results.push(-tmp - offset);\n            }\n        }\n\n        return results;\n    }\n\n    /**\n     *  Calculates roots of quartic polynomial. <br/>\n     *  First, derivative roots are found, then used to split quartic polynomial\n     *  into segments, each containing one root of quartic polynomial.\n     *  Segments are then passed to newton's method to find roots.\n     *\n     *  @returns {Array<number>} roots\n     */\n    getQuarticRoots() {\n        let results = [];\n        const n = this.getDegree();\n\n        if (n === 4) {\n            const poly = new Polynomial();\n\n            poly.coefs = this.coefs.slice();\n            poly.divideEqualsScalar(poly.coefs[n]);\n\n            const ERRF = 1e-15;\n\n            if (Math.abs(poly.coefs[0]) < 10 * ERRF * Math.abs(poly.coefs[3])) {\n                poly.coefs[0] = 0;\n            }\n\n            const poly_d = poly.getDerivative();\n            const derrt = poly_d.getRoots().sort((a, b) => a - b);\n            const dery = [];\n            const nr = derrt.length - 1;\n            const rb = this.bounds();\n\n            const maxabsX = Math.max(Math.abs(rb.minX), Math.abs(rb.maxX));\n            const ZEROepsilon = this.zeroErrorEstimate(maxabsX);\n\n            for (let i = 0; i <= nr; i++) {\n                dery.push(poly.eval(derrt[i]));\n            }\n\n            for (let i = 0; i <= nr; i++) {\n                if (Math.abs(dery[i]) < ZEROepsilon) {\n                    dery[i] = 0;\n                }\n            }\n\n            let i = 0;\n            const dx = Math.max(0.1 * (rb.maxX - rb.minX) / n, ERRF);\n            const guesses = [];\n            const minmax = [];\n\n            if (nr > -1) {\n                if (dery[0] !== 0) {\n                    if (sign(dery[0]) !== sign(poly.eval(derrt[0] - dx) - dery[0])) {\n                        guesses.push(derrt[0] - dx);\n                        minmax.push([rb.minX, derrt[0]]);\n                    }\n                }\n                else {\n                    results.push(derrt[0], derrt[0]);\n                    i++;\n                }\n\n                for (; i < nr; i++) {\n                    if (dery[i + 1] === 0) {\n                        results.push(derrt[i + 1], derrt[i + 1]);\n                        i++;\n                    }\n                    else if (sign(dery[i]) !== sign(dery[i + 1])) {\n                        guesses.push((derrt[i] + derrt[i + 1]) / 2);\n                        minmax.push([derrt[i], derrt[i + 1]]);\n                    }\n                }\n                if (dery[nr] !== 0 && sign(dery[nr]) !== sign(poly.eval(derrt[nr] + dx) - dery[nr])) {\n                    guesses.push(derrt[nr] + dx);\n                    minmax.push([derrt[nr], rb.maxX]);\n                }\n            }\n\n            /**\n             *  @param {number} x\n             *  @returns {number}\n             */\n            const f = function(x) {\n                return poly.eval(x);\n            };\n\n            /**\n             *  @param {number} x\n             *  @returns {number}\n             */\n            const df = function(x) {\n                return poly_d.eval(x);\n            };\n\n            if (guesses.length > 0) {\n                for (i = 0; i < guesses.length; i++) {\n                    guesses[i] = Polynomial.newtonSecantBisection(guesses[i], f, df, 32, minmax[i][0], minmax[i][1]);\n                }\n            }\n\n            results = results.concat(guesses);\n        }\n\n        return results;\n    }\n}\n\nexport default Polynomial;\n","/**\n *\n *   IntersectionArgs.js\n *\n *   @copyright 2002, 2017 Kevin Lindsey\n *\n */\n\n/**\n *  IntersectionArgs\n * @memberof module:kld-intersections\n */\nclass IntersectionArgs {\n    /**\n     *  @param {string} name\n     *  @param {Array<module:kld-intersections.Point2D>} args\n     *  @returns {module:kld-intersections.IntersectionArgs}\n     */\n    constructor(name, args) {\n        this.init(name, args);\n    }\n    /**\n     *  init\n     *\n     *  @param {string} name\n     *  @param {Array<module:kld-intersections.Point2D>} args\n     */\n    init(name, args) {\n        this.name = name;\n        this.args = args;\n    }\n}\n\nexport default IntersectionArgs;\n","/* eslint-disable camelcase, no-labels */\n/**\n *\n *  Intersection.js\n *\n *  copyright 2002, 2013 Kevin Lindsey\n */\n\nimport {Point2D, Vector2D} from \"kld-affine\";\nimport {Polynomial} from \"kld-polynomial\";\nimport IntersectionArgs from \"./IntersectionArgs.js\";\n\nconst TWO_PI = 2.0 * Math.PI;\nconst UNIT_X = new Vector2D(1, 0);\n\n/**\n * @memberof module:kld-intersections.Intersection~\n * @param {*} o\n * @returns {boolean}\n */\nfunction isNullish(o) {\n    return o === null || o === undefined;\n}\n\n/**\n *  bezout\n *\n *  This code is based on MgcIntr2DElpElp.cpp written by David Eberly.  His\n *  code along with many other excellent examples are avaiable at his site:\n *  http://www.magic-software.com\n *\n *  @param {Array<module:kld-intersections.Point2D>} e1\n *  @param {Array<module:kld-intersections.Point2D>} e2\n *  @returns {external:Polynomial}\n */\nfunction bezout(e1, e2) {\n    const AB = e1[0] * e2[1] - e2[0] * e1[1];\n    const AC = e1[0] * e2[2] - e2[0] * e1[2];\n    const AD = e1[0] * e2[3] - e2[0] * e1[3];\n    const AE = e1[0] * e2[4] - e2[0] * e1[4];\n    const AF = e1[0] * e2[5] - e2[0] * e1[5];\n    const BC = e1[1] * e2[2] - e2[1] * e1[2];\n    const BE = e1[1] * e2[4] - e2[1] * e1[4];\n    const BF = e1[1] * e2[5] - e2[1] * e1[5];\n    const CD = e1[2] * e2[3] - e2[2] * e1[3];\n    const DE = e1[3] * e2[4] - e2[3] * e1[4];\n    const DF = e1[3] * e2[5] - e2[3] * e1[5];\n    const BFpDE = BF + DE;\n    const BEmCD = BE - CD;\n\n    return new Polynomial(\n        AB * BC - AC * AC,\n        AB * BEmCD + AD * BC - 2 * AC * AE,\n        AB * BFpDE + AD * BEmCD - AE * AE - 2 * AC * AF,\n        AB * DF + AD * BFpDE - 2 * AE * AF,\n        AD * DF - AF * AF\n    );\n}\n\n/**\n * normalizeAngle\n *\n * @param {number} radians\n * @returns {number}\n */\nfunction normalizeAngle(radians) {\n    const normal = radians % TWO_PI;\n\n    return normal < 0.0 ? normal + TWO_PI : normal;\n}\n\n/**\n * restrictPointsToArc\n *\n * @param {module:kld-intersections.Intersection} intersections\n * @param {module:kld-intersections.Point2D} center\n * @param {number} radiusX\n * @param {number} radiusY\n * @param {number} startRadians\n * @param {number} endRadians\n * @returns {module:kld-intersections.Intersection}\n */\nfunction restrictPointsToArc(intersections, center, radiusX, radiusY, startRadians, endRadians) {\n    if (intersections.points.length === 0) {\n        return intersections;\n    }\n\n    const result = new Intersection(\"No Intersection\");\n    const startNormal = normalizeAngle(startRadians);\n    const endNormal = normalizeAngle(endRadians);\n\n    for (const p of intersections.points) {\n        const a = normalizeAngle(UNIT_X.angleBetween(Vector2D.fromPoints(center, p)));\n\n        if (startNormal <= a && a <= endNormal) {\n            result.appendPoint(p);\n        }\n    }\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n}\n\n/**\n *  closePolygon\n *  @memberof module:kld-intersections.Intersection~\n *  @param {Array<module:kld-intersections.Point2D>} points\n *  @returns {Array<module:kld-intersections.Point2D>}\n */\nfunction closePolygon(points) {\n    const copy = points.slice();\n\n    copy.push(points[0]);\n\n    return copy;\n}\n\n/**\n * Intersection\n * @memberof module:kld-intersections\n */\nclass Intersection {\n    /**\n     *  @param {string} status\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    constructor(status) {\n        this.init(status);\n    }\n\n\n    /**\n     *  init\n     *\n     *  @param {string} status\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    init(status) {\n        this.status = status;\n        this.points = [];\n    }\n\n    /**\n     *  intersect\n     *\n     *  @param {module:kld-intersections.IntersectionArgs} shape1\n     *  @param {module:kld-intersections.IntersectionArgs} shape2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersect(shape1, shape2) {\n        let result;\n\n        if (!isNullish(shape1) && !isNullish(shape2)) {\n            if (shape1.name === \"Path\") {\n                result = Intersection.intersectPathShape(shape1, shape2);\n            }\n            else if (shape2.name === \"Path\") {\n                result = Intersection.intersectPathShape(shape2, shape1);\n            }\n            else if (shape1.name === \"Arc\") {\n                result = Intersection.intersectArcShape(shape1, shape2);\n            }\n            else if (shape2.name === \"Arc\") {\n                result = Intersection.intersectArcShape(shape2, shape1);\n            }\n            else {\n                let method;\n                let args;\n\n                if (shape1.name < shape2.name) {\n                    method = \"intersect\" + shape1.name + shape2.name;\n                    args = shape1.args.concat(shape2.args);\n                }\n                else {\n                    method = \"intersect\" + shape2.name + shape1.name;\n                    args = shape2.args.concat(shape1.args);\n                }\n\n                if (!(method in Intersection)) {\n                    throw new Error(\"Intersection not available: \" + method);\n                }\n\n                result = Intersection[method].apply(null, args);\n            }\n        }\n        else {\n            result = new Intersection(\"No Intersection\");\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectPathShape\n     *\n     *  @param {module:kld-intersections.IntersectionArgs} path\n     *  @param {module:kld-intersections.IntersectionArgs} shape\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPathShape(path, shape) {\n        const result = new Intersection(\"No Intersection\");\n\n        for (const segment of path.args) {\n            const inter = Intersection.intersect(segment, shape);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     * intersectArcShape\n     *\n     * @param {module:kld-intersections.IntersectionArgs} arc\n     * @param {module:kld-intersections.IntersectionArgs} shape\n     * @returns {module:kld-intersections.Intersection}\n     */\n    static intersectArcShape(arc, shape) {\n        const [center, radiusX, radiusY, startRadians, endRadians] = arc.args;\n        const ellipse = new IntersectionArgs(\"Ellipse\", [center, radiusX, radiusY]);\n        const ellipse_result = Intersection.intersect(ellipse, shape);\n\n        // return ellipse_result;\n        return restrictPointsToArc(ellipse_result, center, radiusX, radiusY, startRadians, endRadians);\n    }\n\n    /**\n     *  intersectBezier2Bezier2\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} a3\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @param {module:kld-intersections.Point2D} b3\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Bezier2(a1, a2, a3, b1, b2, b3) {\n        let a, b;\n        const result = new Intersection(\"No Intersection\");\n\n        a = a2.multiply(-2);\n        const c12 = a1.add(a.add(a3));\n\n        a = a1.multiply(-2);\n        b = a2.multiply(2);\n        const c11 = a.add(b);\n\n        const c10 = new Point2D(a1.x, a1.y);\n\n        a = b2.multiply(-2);\n        const c22 = b1.add(a.add(b3));\n\n        a = b1.multiply(-2);\n        b = b2.multiply(2);\n        const c21 = a.add(b);\n\n        const c20 = new Point2D(b1.x, b1.y);\n\n        // bezout\n        a = c12.x * c11.y - c11.x * c12.y;\n        b = c22.x * c11.y - c11.x * c22.y;\n        const c = c21.x * c11.y - c11.x * c21.y;\n        const d = c11.x * (c10.y - c20.y) + c11.y * (-c10.x + c20.x);\n        const e = c22.x * c12.y - c12.x * c22.y;\n        const f = c21.x * c12.y - c12.x * c21.y;\n        const g = c12.x * (c10.y - c20.y) + c12.y * (-c10.x + c20.x);\n\n        // determinant\n        const poly = new Polynomial(\n            -e * e,\n            -2 * e * f,\n            a * b - f * f - 2 * e * g,\n            a * c - 2 * f * g,\n            a * d - g * g\n        );\n\n        const roots = poly.getRoots();\n\n        for (const s of roots) {\n            if (0 <= s && s <= 1) {\n                const xp = new Polynomial(\n                    c12.x,\n                    c11.x,\n                    c10.x - c20.x - s * c21.x - s * s * c22.x\n                );\n                xp.simplifyEquals();\n                const xRoots = xp.getRoots();\n                const yp = new Polynomial(\n                    c12.y,\n                    c11.y,\n                    c10.y - c20.y - s * c21.y - s * s * c22.y\n                );\n                yp.simplifyEquals();\n                const yRoots = yp.getRoots();\n\n                if (xRoots.length > 0 && yRoots.length > 0) {\n                    const TOLERANCE = 1e-4;\n\n                    checkRoots:\n                    for (const xRoot of xRoots) {\n                        if (0 <= xRoot && xRoot <= 1) {\n                            for (let k = 0; k < yRoots.length; k++) {\n                                if (Math.abs(xRoot - yRoots[k]) < TOLERANCE) {\n                                    result.points.push(c22.multiply(s * s).add(c21.multiply(s).add(c20)));\n                                    break checkRoots;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Bezier3\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} a3\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @param {module:kld-intersections.Point2D} b3\n     *  @param {module:kld-intersections.Point2D} b4\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Bezier3(a1, a2, a3, b1, b2, b3, b4) {\n        let a, b, c, d;\n        const result = new Intersection(\"No Intersection\");\n\n        a = a2.multiply(-2);\n        const c12 = a1.add(a.add(a3));\n\n        a = a1.multiply(-2);\n        b = a2.multiply(2);\n        const c11 = a.add(b);\n\n        const c10 = new Point2D(a1.x, a1.y);\n\n        a = b1.multiply(-1);\n        b = b2.multiply(3);\n        c = b3.multiply(-3);\n        d = a.add(b.add(c.add(b4)));\n        const c23 = new Point2D(d.x, d.y);\n\n        a = b1.multiply(3);\n        b = b2.multiply(-6);\n        c = b3.multiply(3);\n        d = a.add(b.add(c));\n        const c22 = new Point2D(d.x, d.y);\n\n        a = b1.multiply(-3);\n        b = b2.multiply(3);\n        c = a.add(b);\n        const c21 = new Point2D(c.x, c.y);\n\n        const c20 = new Point2D(b1.x, b1.y);\n\n        const c10x2 = c10.x * c10.x;\n        const c10y2 = c10.y * c10.y;\n        const c11x2 = c11.x * c11.x;\n        const c11y2 = c11.y * c11.y;\n        const c12x2 = c12.x * c12.x;\n        const c12y2 = c12.y * c12.y;\n        const c20x2 = c20.x * c20.x;\n        const c20y2 = c20.y * c20.y;\n        const c21x2 = c21.x * c21.x;\n        const c21y2 = c21.y * c21.y;\n        const c22x2 = c22.x * c22.x;\n        const c22y2 = c22.y * c22.y;\n        const c23x2 = c23.x * c23.x;\n        const c23y2 = c23.y * c23.y;\n\n        const poly = new Polynomial(\n            -2 * c12.x * c12.y * c23.x * c23.y + c12x2 * c23y2 + c12y2 * c23x2,\n            -2 * c12.x * c12.y * c22.x * c23.y - 2 * c12.x * c12.y * c22.y * c23.x + 2 * c12y2 * c22.x * c23.x +\n                2 * c12x2 * c22.y * c23.y,\n            -2 * c12.x * c21.x * c12.y * c23.y - 2 * c12.x * c12.y * c21.y * c23.x - 2 * c12.x * c12.y * c22.x * c22.y +\n                2 * c21.x * c12y2 * c23.x + c12y2 * c22x2 + c12x2 * (2 * c21.y * c23.y + c22y2),\n            2 * c10.x * c12.x * c12.y * c23.y + 2 * c10.y * c12.x * c12.y * c23.x + c11.x * c11.y * c12.x * c23.y +\n                c11.x * c11.y * c12.y * c23.x - 2 * c20.x * c12.x * c12.y * c23.y - 2 * c12.x * c20.y * c12.y * c23.x -\n                2 * c12.x * c21.x * c12.y * c22.y - 2 * c12.x * c12.y * c21.y * c22.x - 2 * c10.x * c12y2 * c23.x -\n                2 * c10.y * c12x2 * c23.y + 2 * c20.x * c12y2 * c23.x + 2 * c21.x * c12y2 * c22.x -\n                c11y2 * c12.x * c23.x - c11x2 * c12.y * c23.y + c12x2 * (2 * c20.y * c23.y + 2 * c21.y * c22.y),\n            2 * c10.x * c12.x * c12.y * c22.y + 2 * c10.y * c12.x * c12.y * c22.x + c11.x * c11.y * c12.x * c22.y +\n                c11.x * c11.y * c12.y * c22.x - 2 * c20.x * c12.x * c12.y * c22.y - 2 * c12.x * c20.y * c12.y * c22.x -\n                2 * c12.x * c21.x * c12.y * c21.y - 2 * c10.x * c12y2 * c22.x - 2 * c10.y * c12x2 * c22.y +\n                2 * c20.x * c12y2 * c22.x - c11y2 * c12.x * c22.x - c11x2 * c12.y * c22.y + c21x2 * c12y2 +\n                c12x2 * (2 * c20.y * c22.y + c21y2),\n            2 * c10.x * c12.x * c12.y * c21.y + 2 * c10.y * c12.x * c21.x * c12.y + c11.x * c11.y * c12.x * c21.y +\n                c11.x * c11.y * c21.x * c12.y - 2 * c20.x * c12.x * c12.y * c21.y - 2 * c12.x * c20.y * c21.x * c12.y -\n                2 * c10.x * c21.x * c12y2 - 2 * c10.y * c12x2 * c21.y + 2 * c20.x * c21.x * c12y2 -\n                c11y2 * c12.x * c21.x - c11x2 * c12.y * c21.y + 2 * c12x2 * c20.y * c21.y,\n            -2 * c10.x * c10.y * c12.x * c12.y - c10.x * c11.x * c11.y * c12.y - c10.y * c11.x * c11.y * c12.x +\n                2 * c10.x * c12.x * c20.y * c12.y + 2 * c10.y * c20.x * c12.x * c12.y + c11.x * c20.x * c11.y * c12.y +\n                c11.x * c11.y * c12.x * c20.y - 2 * c20.x * c12.x * c20.y * c12.y - 2 * c10.x * c20.x * c12y2 +\n                c10.x * c11y2 * c12.x + c10.y * c11x2 * c12.y - 2 * c10.y * c12x2 * c20.y -\n                c20.x * c11y2 * c12.x - c11x2 * c20.y * c12.y + c10x2 * c12y2 + c10y2 * c12x2 +\n                c20x2 * c12y2 + c12x2 * c20y2\n        );\n        const roots = poly.getRootsInInterval(0, 1);\n\n        for (const s of roots) {\n            const xRoots = new Polynomial(\n                c12.x,\n                c11.x,\n                c10.x - c20.x - s * c21.x - s * s * c22.x - s * s * s * c23.x\n            ).getRoots();\n            const yRoots = new Polynomial(\n                c12.y,\n                c11.y,\n                c10.y - c20.y - s * c21.y - s * s * c22.y - s * s * s * c23.y\n            ).getRoots();\n\n            if (xRoots.length > 0 && yRoots.length > 0) {\n                const TOLERANCE = 1e-4;\n\n                checkRoots:\n                for (const xRoot of xRoots) {\n                    if (0 <= xRoot && xRoot <= 1) {\n                        for (let k = 0; k < yRoots.length; k++) {\n                            if (Math.abs(xRoot - yRoots[k]) < TOLERANCE) {\n                                result.points.push(\n                                    c23.multiply(s * s * s).add(c22.multiply(s * s).add(c21.multiply(s).add(c20)))\n                                );\n                                break checkRoots;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Circle\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Circle(p1, p2, p3, c, r) {\n        return Intersection.intersectBezier2Ellipse(p1, p2, p3, c, r, r);\n    }\n\n    /**\n     *  intersectBezier2Ellipse\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} ec\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Ellipse(p1, p2, p3, ec, rx, ry) {\n        let a; // temporary variables\n        // c2, c1, c0; // coefficients of quadratic\n        const result = new Intersection(\"No Intersection\");\n\n        a = p2.multiply(-2);\n        const c2 = p1.add(a.add(p3));\n\n        a = p1.multiply(-2);\n        const b = p2.multiply(2);\n        const c1 = a.add(b);\n\n        const c0 = new Point2D(p1.x, p1.y);\n\n        const rxrx = rx * rx;\n        const ryry = ry * ry;\n        const roots = new Polynomial(\n            ryry * c2.x * c2.x + rxrx * c2.y * c2.y,\n            2 * (ryry * c2.x * c1.x + rxrx * c2.y * c1.y),\n            ryry * (2 * c2.x * c0.x + c1.x * c1.x) + rxrx * (2 * c2.y * c0.y + c1.y * c1.y) -\n                2 * (ryry * ec.x * c2.x + rxrx * ec.y * c2.y),\n            2 * (ryry * c1.x * (c0.x - ec.x) + rxrx * c1.y * (c0.y - ec.y)),\n            ryry * (c0.x * c0.x + ec.x * ec.x) + rxrx * (c0.y * c0.y + ec.y * ec.y) -\n                2 * (ryry * ec.x * c0.x + rxrx * ec.y * c0.y) - rxrx * ryry\n        ).getRoots();\n\n        for (const t of roots) {\n            if (0 <= t && t <= 1) {\n                result.points.push(c2.multiply(t * t).add(c1.multiply(t).add(c0)));\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Line\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Line(p1, p2, p3, a1, a2) {\n        let a; // temporary variables\n        // let c2, c1, c0; // coefficients of quadratic\n        // cl; // c coefficient for normal form of line\n        // n; // normal for normal form of line\n        const min = a1.min(a2); // used to determine if point is on line segment\n        const max = a1.max(a2); // used to determine if point is on line segment\n        const result = new Intersection(\"No Intersection\");\n\n        a = p2.multiply(-2);\n        const c2 = p1.add(a.add(p3));\n\n        a = p1.multiply(-2);\n        const b = p2.multiply(2);\n        const c1 = a.add(b);\n\n        const c0 = new Point2D(p1.x, p1.y);\n\n        // Convert line to normal form: ax + by + c = 0\n        // Find normal to line: negative inverse of original line's slope\n        const n = new Vector2D(a1.y - a2.y, a2.x - a1.x);\n\n        // Determine new c coefficient\n        const cl = a1.x * a2.y - a2.x * a1.y;\n\n        // Transform cubic coefficients to line's coordinate system and find roots\n        // of cubic\n        const roots = new Polynomial(\n            n.dot(c2),\n            n.dot(c1),\n            n.dot(c0) + cl\n        ).getRoots();\n\n        // Any roots in closed interval [0,1] are intersections on Bezier, but\n        // might not be on the line segment.\n        // Find intersections and calculate point coordinates\n        for (const t of roots) {\n            if (0 <= t && t <= 1) {\n                // We're within the Bezier curve\n                // Find point on Bezier\n                const p4 = p1.lerp(p2, t);\n                const p5 = p2.lerp(p3, t);\n\n                const p6 = p4.lerp(p5, t);\n\n                // See if point is on line segment\n                // Had to make special cases for vertical and horizontal lines due\n                // to slight errors in calculation of p6\n                if (a1.x === a2.x) {\n                    if (min.y <= p6.y && p6.y <= max.y) {\n                        result.status = \"Intersection\";\n                        result.appendPoint(p6);\n                    }\n                }\n                else if (a1.y === a2.y) {\n                    if (min.x <= p6.x && p6.x <= max.x) {\n                        result.status = \"Intersection\";\n                        result.appendPoint(p6);\n                    }\n                }\n                else if (min.x <= p6.x && p6.x <= max.x && min.y <= p6.y && p6.y <= max.y) {\n                    result.status = \"Intersection\";\n                    result.appendPoint(p6);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Polygon\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Polygon(p1, p2, p3, points) {\n        return Intersection.intersectBezier2Polyline(p1, p2, p3, closePolygon(points));\n    }\n\n    /**\n     *  intersectBezier2Polyline\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Polyline(p1, p2, p3, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n\n        for (let i = 0; i < len - 1; i++) {\n            const a1 = points[i];\n            const a2 = points[i + 1];\n            const inter = Intersection.intersectBezier2Line(p1, p2, p3, a1, a2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Rectangle\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Rectangle(p1, p2, p3, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectBezier2Line(p1, p2, p3, min, topRight);\n        const inter2 = Intersection.intersectBezier2Line(p1, p2, p3, topRight, max);\n        const inter3 = Intersection.intersectBezier2Line(p1, p2, p3, max, bottomLeft);\n        const inter4 = Intersection.intersectBezier2Line(p1, p2, p3, bottomLeft, min);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Bezier3\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} a3\n     *  @param {module:kld-intersections.Point2D} a4\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @param {module:kld-intersections.Point2D} b3\n     *  @param {module:kld-intersections.Point2D} b4\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Bezier3(a1, a2, a3, a4, b1, b2, b3, b4) {\n        let a, b, c, d; // temporary variables\n        // c13, c12, c11, c10; // coefficients of cubic\n        // c23, c22, c21, c20; // coefficients of cubic\n        const result = new Intersection(\"No Intersection\");\n\n        // Calculate the coefficients of cubic polynomial\n        a = a1.multiply(-1);\n        b = a2.multiply(3);\n        c = a3.multiply(-3);\n        d = a.add(b.add(c.add(a4)));\n        const c13 = new Point2D(d.x, d.y);\n\n        a = a1.multiply(3);\n        b = a2.multiply(-6);\n        c = a3.multiply(3);\n        d = a.add(b.add(c));\n        const c12 = new Point2D(d.x, d.y);\n\n        a = a1.multiply(-3);\n        b = a2.multiply(3);\n        c = a.add(b);\n        const c11 = new Point2D(c.x, c.y);\n\n        const c10 = new Point2D(a1.x, a1.y);\n\n        a = b1.multiply(-1);\n        b = b2.multiply(3);\n        c = b3.multiply(-3);\n        d = a.add(b.add(c.add(b4)));\n        const c23 = new Point2D(d.x, d.y);\n\n        a = b1.multiply(3);\n        b = b2.multiply(-6);\n        c = b3.multiply(3);\n        d = a.add(b.add(c));\n        const c22 = new Point2D(d.x, d.y);\n\n        a = b1.multiply(-3);\n        b = b2.multiply(3);\n        c = a.add(b);\n        const c21 = new Point2D(c.x, c.y);\n\n        const c20 = new Point2D(b1.x, b1.y);\n\n        // bezout\n        a = c13.x * c12.y - c12.x * c13.y;\n        b = c13.x * c11.y - c11.x * c13.y;\n        const c0 = c13.x * c10.y - c10.x * c13.y + c20.x * c13.y - c13.x * c20.y;\n        const c1 = c21.x * c13.y - c13.x * c21.y;\n        const c2 = c22.x * c13.y - c13.x * c22.y;\n        const c3 = c23.x * c13.y - c13.x * c23.y;\n        d = c13.x * c11.y - c11.x * c13.y;\n        const e0 = c13.x * c10.y + c12.x * c11.y - c11.x * c12.y - c10.x * c13.y + c20.x * c13.y - c13.x * c20.y;\n        const e1 = c21.x * c13.y - c13.x * c21.y;\n        const e2 = c22.x * c13.y - c13.x * c22.y;\n        const e3 = c23.x * c13.y - c13.x * c23.y;\n        const f0 = c12.x * c10.y - c10.x * c12.y + c20.x * c12.y - c12.x * c20.y;\n        const f1 = c21.x * c12.y - c12.x * c21.y;\n        const f2 = c22.x * c12.y - c12.x * c22.y;\n        const f3 = c23.x * c12.y - c12.x * c23.y;\n        const g0 = c13.x * c10.y - c10.x * c13.y + c20.x * c13.y - c13.x * c20.y;\n        const g1 = c21.x * c13.y - c13.x * c21.y;\n        const g2 = c22.x * c13.y - c13.x * c22.y;\n        const g3 = c23.x * c13.y - c13.x * c23.y;\n        const h0 = c12.x * c10.y - c10.x * c12.y + c20.x * c12.y - c12.x * c20.y;\n        const h1 = c21.x * c12.y - c12.x * c21.y;\n        const h2 = c22.x * c12.y - c12.x * c22.y;\n        const h3 = c23.x * c12.y - c12.x * c23.y;\n        const i0 = c11.x * c10.y - c10.x * c11.y + c20.x * c11.y - c11.x * c20.y;\n        const i1 = c21.x * c11.y - c11.x * c21.y;\n        const i2 = c22.x * c11.y - c11.x * c22.y;\n        const i3 = c23.x * c11.y - c11.x * c23.y;\n\n        // determinant\n        const poly = new Polynomial(\n            -c3 * e3 * g3,\n            -c3 * e3 * g2 - c3 * e2 * g3 - c2 * e3 * g3,\n            -c3 * e3 * g1 - c3 * e2 * g2 - c2 * e3 * g2 - c3 * e1 * g3 - c2 * e2 * g3 - c1 * e3 * g3,\n            -c3 * e3 * g0 - c3 * e2 * g1 - c2 * e3 * g1 - c3 * e1 * g2 - c2 * e2 * g2 - c1 * e3 * g2 - c3 * e0 * g3 - c2 * e1 * g3 - c1 * e2 * g3 - c0 * e3 * g3 + b * f3 * g3 + c3 * d * h3 - a * f3 * h3 + a * e3 * i3,\n            -c3 * e2 * g0 - c2 * e3 * g0 - c3 * e1 * g1 - c2 * e2 * g1 - c1 * e3 * g1 - c3 * e0 * g2 - c2 * e1 * g2 - c1 * e2 * g2 - c0 * e3 * g2 + b * f3 * g2 - c2 * e0 * g3 - c1 * e1 * g3 - c0 * e2 * g3 + b * f2 * g3 + c3 * d * h2 - a * f3 * h2 + c2 * d * h3 - a * f2 * h3 + a * e3 * i2 + a * e2 * i3,\n            -c3 * e1 * g0 - c2 * e2 * g0 - c1 * e3 * g0 - c3 * e0 * g1 - c2 * e1 * g1 - c1 * e2 * g1 - c0 * e3 * g1 + b * f3 * g1 - c2 * e0 * g2 - c1 * e1 * g2 - c0 * e2 * g2 + b * f2 * g2 - c1 * e0 * g3 - c0 * e1 * g3 + b * f1 * g3 + c3 * d * h1 - a * f3 * h1 + c2 * d * h2 - a * f2 * h2 + c1 * d * h3 - a * f1 * h3 + a * e3 * i1 + a * e2 * i2 + a * e1 * i3,\n            -c3 * e0 * g0 - c2 * e1 * g0 - c1 * e2 * g0 - c0 * e3 * g0 + b * f3 * g0 - c2 * e0 * g1 - c1 * e1 * g1 - c0 * e2 * g1 + b * f2 * g1 - c1 * e0 * g2 - c0 * e1 * g2 + b * f1 * g2 - c0 * e0 * g3 + b * f0 * g3 + c3 * d * h0 - a * f3 * h0 + c2 * d * h1 - a * f2 * h1 + c1 * d * h2 - a * f1 * h2 + c0 * d * h3 - a * f0 * h3 + a * e3 * i0 + a * e2 * i1 + a * e1 * i2 - b * d * i3 + a * e0 * i3,\n            -c2 * e0 * g0 - c1 * e1 * g0 - c0 * e2 * g0 + b * f2 * g0 - c1 * e0 * g1 - c0 * e1 * g1 + b * f1 * g1 - c0 * e0 * g2 + b * f0 * g2 + c2 * d * h0 - a * f2 * h0 + c1 * d * h1 - a * f1 * h1 + c0 * d * h2 - a * f0 * h2 + a * e2 * i0 + a * e1 * i1 - b * d * i2 + a * e0 * i2,\n            -c1 * e0 * g0 - c0 * e1 * g0 + b * f1 * g0 - c0 * e0 * g1 + b * f0 * g1 + c1 * d * h0 - a * f1 * h0 + c0 * d * h1 - a * f0 * h1 + a * e1 * i0 - b * d * i1 + a * e0 * i1,\n            -c0 * e0 * g0 + b * f0 * g0 + c0 * d * h0 - a * f0 * h0 - b * d * i0 + a * e0 * i0\n        );\n        poly.simplifyEquals();\n        const roots = poly.getRootsInInterval(0, 1);\n\n        for (const s of roots) {\n            const xp = new Polynomial(\n                c13.x,\n                c12.x,\n                c11.x,\n                c10.x - c20.x - s * c21.x - s * s * c22.x - s * s * s * c23.x\n            );\n            xp.simplifyEquals();\n            const xRoots = xp.getRoots();\n            const yp = new Polynomial(\n                c13.y,\n                c12.y,\n                c11.y,\n                c10.y - c20.y - s * c21.y - s * s * c22.y - s * s * s * c23.y\n            );\n            yp.simplifyEquals();\n            const yRoots = yp.getRoots();\n\n            if (xRoots.length > 0 && yRoots.length > 0) {\n                const TOLERANCE = 1e-4;\n\n                checkRoots:\n                for (const xRoot of xRoots) {\n                    if (0 <= xRoot && xRoot <= 1) {\n                        for (let k = 0; k < yRoots.length; k++) {\n                            if (Math.abs(xRoot - yRoots[k]) < TOLERANCE) {\n                                result.points.push(\n                                    c23.multiply(s * s * s).add(c22.multiply(s * s).add(c21.multiply(s).add(c20)))\n                                );\n                                break checkRoots;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Circle\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Circle(p1, p2, p3, p4, c, r) {\n        return Intersection.intersectBezier3Ellipse(p1, p2, p3, p4, c, r, r);\n    }\n\n    /**\n     *  intersectBezier3Ellipse\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {module:kld-intersections.Point2D} ec\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Ellipse(p1, p2, p3, p4, ec, rx, ry) {\n        let a, b, c, d; // temporary variables\n        // c3, c2, c1, c0; // coefficients of cubic\n        const result = new Intersection(\"No Intersection\");\n\n        // Calculate the coefficients of cubic polynomial\n        a = p1.multiply(-1);\n        b = p2.multiply(3);\n        c = p3.multiply(-3);\n        d = a.add(b.add(c.add(p4)));\n        const c3 = new Point2D(d.x, d.y);\n\n        a = p1.multiply(3);\n        b = p2.multiply(-6);\n        c = p3.multiply(3);\n        d = a.add(b.add(c));\n        const c2 = new Point2D(d.x, d.y);\n\n        a = p1.multiply(-3);\n        b = p2.multiply(3);\n        c = a.add(b);\n        const c1 = new Point2D(c.x, c.y);\n\n        const c0 = new Point2D(p1.x, p1.y);\n\n        const rxrx = rx * rx;\n        const ryry = ry * ry;\n        const poly = new Polynomial(\n            c3.x * c3.x * ryry + c3.y * c3.y * rxrx,\n            2 * (c3.x * c2.x * ryry + c3.y * c2.y * rxrx),\n            2 * (c3.x * c1.x * ryry + c3.y * c1.y * rxrx) + c2.x * c2.x * ryry + c2.y * c2.y * rxrx,\n            2 * c3.x * ryry * (c0.x - ec.x) + 2 * c3.y * rxrx * (c0.y - ec.y) +\n                2 * (c2.x * c1.x * ryry + c2.y * c1.y * rxrx),\n            2 * c2.x * ryry * (c0.x - ec.x) + 2 * c2.y * rxrx * (c0.y - ec.y) +\n                c1.x * c1.x * ryry + c1.y * c1.y * rxrx,\n            2 * c1.x * ryry * (c0.x - ec.x) + 2 * c1.y * rxrx * (c0.y - ec.y),\n            c0.x * c0.x * ryry - 2 * c0.y * ec.y * rxrx - 2 * c0.x * ec.x * ryry +\n                c0.y * c0.y * rxrx + ec.x * ec.x * ryry + ec.y * ec.y * rxrx - rxrx * ryry\n        );\n        const roots = poly.getRootsInInterval(0, 1);\n\n        for (const t of roots) {\n            result.points.push(\n                c3.multiply(t * t * t).add(c2.multiply(t * t).add(c1.multiply(t).add(c0)))\n            );\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Line\n     *\n     *  Many thanks to Dan Sunday at SoftSurfer.com.  He gave me a very thorough\n     *  sketch of the algorithm used here.  Without his help, I'm not sure when I\n     *  would have figured out this intersection problem.\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Line(p1, p2, p3, p4, a1, a2) {\n        let a, b, c, d; // temporary variables\n        // c3, c2, c1, c0; // coefficients of cubic\n        // cl; // c coefficient for normal form of line\n        // n; // normal for normal form of line\n        const min = a1.min(a2); // used to determine if point is on line segment\n        const max = a1.max(a2); // used to determine if point is on line segment\n        const result = new Intersection(\"No Intersection\");\n\n        // Start with Bezier using Bernstein polynomials for weighting functions:\n        //     (1-t^3)P1 + 3t(1-t)^2P2 + 3t^2(1-t)P3 + t^3P4\n        //\n        // Expand and collect terms to form linear combinations of original Bezier\n        // controls.  This ends up with a vector cubic in t:\n        //     (-P1+3P2-3P3+P4)t^3 + (3P1-6P2+3P3)t^2 + (-3P1+3P2)t + P1\n        //             /\\                  /\\                /\\       /\\\n        //             ||                  ||                ||       ||\n        //             c3                  c2                c1       c0\n\n        // Calculate the coefficients\n        a = p1.multiply(-1);\n        b = p2.multiply(3);\n        c = p3.multiply(-3);\n        d = a.add(b.add(c.add(p4)));\n        const c3 = new Vector2D(d.x, d.y);\n\n        a = p1.multiply(3);\n        b = p2.multiply(-6);\n        c = p3.multiply(3);\n        d = a.add(b.add(c));\n        const c2 = new Vector2D(d.x, d.y);\n\n        a = p1.multiply(-3);\n        b = p2.multiply(3);\n        c = a.add(b);\n        const c1 = new Vector2D(c.x, c.y);\n\n        const c0 = new Vector2D(p1.x, p1.y);\n\n        // Convert line to normal form: ax + by + c = 0\n        // Find normal to line: negative inverse of original line's slope\n        const n = new Vector2D(a1.y - a2.y, a2.x - a1.x);\n\n        // Determine new c coefficient\n        const cl = a1.x * a2.y - a2.x * a1.y;\n\n        // ?Rotate each cubic coefficient using line for new coordinate system?\n        // Find roots of rotated cubic\n        const roots = new Polynomial(\n            n.dot(c3),\n            n.dot(c2),\n            n.dot(c1),\n            n.dot(c0) + cl\n        ).getRoots();\n\n        // Any roots in closed interval [0,1] are intersections on Bezier, but\n        // might not be on the line segment.\n        // Find intersections and calculate point coordinates\n        for (const t of roots) {\n            if (0 <= t && t <= 1) {\n                // We're within the Bezier curve\n                // Find point on Bezier\n                const p5 = p1.lerp(p2, t);\n                const p6 = p2.lerp(p3, t);\n                const p7 = p3.lerp(p4, t);\n\n                const p8 = p5.lerp(p6, t);\n                const p9 = p6.lerp(p7, t);\n\n                const p10 = p8.lerp(p9, t);\n\n                // See if point is on line segment\n                // Had to make special cases for vertical and horizontal lines due\n                // to slight errors in calculation of p10\n                if (a1.x === a2.x) {\n                    if (min.y <= p10.y && p10.y <= max.y) {\n                        result.status = \"Intersection\";\n                        result.appendPoint(p10);\n                    }\n                }\n                else if (a1.y === a2.y) {\n                    if (min.x <= p10.x && p10.x <= max.x) {\n                        result.status = \"Intersection\";\n                        result.appendPoint(p10);\n                    }\n                }\n                else if (min.x <= p10.x && p10.x <= max.x && min.y <= p10.y && p10.y <= max.y) {\n                    result.status = \"Intersection\";\n                    result.appendPoint(p10);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Polygon\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Polygon(p1, p2, p3, p4, points) {\n        return Intersection.intersectBezier3Polyline(p1, p2, p3, p4, closePolygon(points));\n    }\n\n    /**\n     *  intersectBezier3Polyline\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Polyline(p1, p2, p3, p4, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n\n        for (let i = 0; i < len - 1; i++) {\n            const a1 = points[i];\n            const a2 = points[i + 1];\n            const inter = Intersection.intersectBezier3Line(p1, p2, p3, p4, a1, a2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Rectangle\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Rectangle(p1, p2, p3, p4, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectBezier3Line(p1, p2, p3, p4, min, topRight);\n        const inter2 = Intersection.intersectBezier3Line(p1, p2, p3, p4, topRight, max);\n        const inter3 = Intersection.intersectBezier3Line(p1, p2, p3, p4, max, bottomLeft);\n        const inter4 = Intersection.intersectBezier3Line(p1, p2, p3, p4, bottomLeft, min);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectCircleCircle\n     *\n     *  @param {module:kld-intersections.Point2D} c1\n     *  @param {number} r1\n     *  @param {module:kld-intersections.Point2D} c2\n     *  @param {number} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCircleCircle(c1, r1, c2, r2) {\n        let result;\n\n        // Determine minimum and maximum radii where circles can intersect\n        const r_max = r1 + r2;\n        const r_min = Math.abs(r1 - r2);\n\n        // Determine actual distance between circle circles\n        const c_dist = c1.distanceFrom(c2);\n\n        if (c_dist > r_max) {\n            result = new Intersection(\"Outside\");\n        }\n        else if (c_dist < r_min) {\n            result = new Intersection(\"Inside\");\n        }\n        else {\n            result = new Intersection(\"Intersection\");\n\n            const a = (r1 * r1 - r2 * r2 + c_dist * c_dist) / (2 * c_dist);\n            const h = Math.sqrt(r1 * r1 - a * a);\n            const p = c1.lerp(c2, a / c_dist);\n            const b = h / c_dist;\n\n            result.points.push(\n                new Point2D(\n                    p.x - b * (c2.y - c1.y),\n                    p.y + b * (c2.x - c1.x)\n                )\n            );\n            result.points.push(\n                new Point2D(\n                    p.x + b * (c2.y - c1.y),\n                    p.y - b * (c2.x - c1.x)\n                )\n            );\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectCircleEllipse\n     *\n     *  @param {module:kld-intersections.Point2D} cc\n     *  @param {number} r\n     *  @param {module:kld-intersections.Point2D} ec\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCircleEllipse(cc, r, ec, rx, ry) {\n        return Intersection.intersectEllipseEllipse(cc, r, r, ec, rx, ry);\n    }\n\n    /**\n     *  intersectCircleLine\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCircleLine(c, r, a1, a2) {\n        let result;\n        const a = (a2.x - a1.x) * (a2.x - a1.x) +\n                 (a2.y - a1.y) * (a2.y - a1.y);\n        const b = 2 * ((a2.x - a1.x) * (a1.x - c.x) +\n                       (a2.y - a1.y) * (a1.y - c.y));\n        const cc = c.x * c.x + c.y * c.y + a1.x * a1.x + a1.y * a1.y -\n                 2 * (c.x * a1.x + c.y * a1.y) - r * r;\n        const deter = b * b - 4 * a * cc;\n\n        if (deter < 0) {\n            result = new Intersection(\"Outside\");\n        }\n        else if (deter === 0) {\n            result = new Intersection(\"Tangent\");\n            // NOTE: should calculate this point\n        }\n        else {\n            const e = Math.sqrt(deter);\n            const u1 = (-b + e) / (2 * a);\n            const u2 = (-b - e) / (2 * a);\n\n            if ((u1 < 0 || u1 > 1) && (u2 < 0 || u2 > 1)) {\n                if ((u1 < 0 && u2 < 0) || (u1 > 1 && u2 > 1)) {\n                    result = new Intersection(\"Outside\");\n                }\n                else {\n                    result = new Intersection(\"Inside\");\n                }\n            }\n            else {\n                result = new Intersection(\"Intersection\");\n\n                if (0 <= u1 && u1 <= 1) {\n                    result.points.push(a1.lerp(a2, u1));\n                }\n\n                if (0 <= u2 && u2 <= 1) {\n                    result.points.push(a1.lerp(a2, u2));\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectCirclePolygon\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCirclePolygon(c, r, points) {\n        return Intersection.intersectCirclePolyline(c, r, closePolygon(points));\n    }\n\n    /**\n     *  intersectCirclePolyline\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCirclePolyline(c, r, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n        let inter;\n\n        for (let i = 0; i < len - 1; i++) {\n            const a1 = points[i];\n            const a2 = points[i + 1];\n\n            inter = Intersection.intersectCircleLine(c, r, a1, a2);\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n        else {\n            result.status = inter.status;\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectCircleRectangle\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCircleRectangle(c, r, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectCircleLine(c, r, min, topRight);\n        const inter2 = Intersection.intersectCircleLine(c, r, topRight, max);\n        const inter3 = Intersection.intersectCircleLine(c, r, max, bottomLeft);\n        const inter4 = Intersection.intersectCircleLine(c, r, bottomLeft, min);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n        else {\n            result.status = inter1.status;\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectEllipseEllipse\n     *\n     *  This code is based on MgcIntr2DElpElp.cpp written by David Eberly.  His\n     *  code along with many other excellent examples are avaiable at his site:\n     *  http://www.magic-software.com\n     *\n     *  NOTE: Rotation will need to be added to this function\n     *\n     *  @param {module:kld-intersections.Point2D} c1\n     *  @param {number} rx1\n     *  @param {number} ry1\n     *  @param {module:kld-intersections.Point2D} c2\n     *  @param {number} rx2\n     *  @param {number} ry2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipseEllipse(c1, rx1, ry1, c2, rx2, ry2) {\n        const a = [\n            ry1 * ry1, 0, rx1 * rx1, -2 * ry1 * ry1 * c1.x, -2 * rx1 * rx1 * c1.y,\n            ry1 * ry1 * c1.x * c1.x + rx1 * rx1 * c1.y * c1.y - rx1 * rx1 * ry1 * ry1\n        ];\n        const b = [\n            ry2 * ry2, 0, rx2 * rx2, -2 * ry2 * ry2 * c2.x, -2 * rx2 * rx2 * c2.y,\n            ry2 * ry2 * c2.x * c2.x + rx2 * rx2 * c2.y * c2.y - rx2 * rx2 * ry2 * ry2\n        ];\n\n        const yPoly = bezout(a, b);\n        const yRoots = yPoly.getRoots();\n        const epsilon = 1e-3;\n        const norm0 = (a[0] * a[0] + 2 * a[1] * a[1] + a[2] * a[2]) * epsilon;\n        const norm1 = (b[0] * b[0] + 2 * b[1] * b[1] + b[2] * b[2]) * epsilon;\n        const result = new Intersection(\"No Intersection\");\n\n        for (let y = 0; y < yRoots.length; y++) {\n            const xPoly = new Polynomial(\n                a[0],\n                a[3] + yRoots[y] * a[1],\n                a[5] + yRoots[y] * (a[4] + yRoots[y] * a[2])\n            );\n            const xRoots = xPoly.getRoots();\n\n            for (let x = 0; x < xRoots.length; x++) {\n                let tst =\n                    (a[0] * xRoots[x] + a[1] * yRoots[y] + a[3]) * xRoots[x] +\n                    (a[2] * yRoots[y] + a[4]) * yRoots[y] + a[5];\n                if (Math.abs(tst) < norm0) {\n                    tst =\n                        (b[0] * xRoots[x] + b[1] * yRoots[y] + b[3]) * xRoots[x] +\n                        (b[2] * yRoots[y] + b[4]) * yRoots[y] + b[5];\n                    if (Math.abs(tst) < norm1) {\n                        result.appendPoint(new Point2D(xRoots[x], yRoots[y]));\n                    }\n                }\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectEllipseLine\n     *\n     *  NOTE: Rotation will need to be added to this function\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipseLine(c, rx, ry, a1, a2) {\n        let result;\n        const orign = new Vector2D(a1.x, a1.y);\n        const dir = Vector2D.fromPoints(a1, a2);\n        const center = new Vector2D(c.x, c.y);\n        const diff = orign.subtract(center);\n        const mDir = new Vector2D(dir.x / (rx * rx), dir.y / (ry * ry));\n        const mDiff = new Vector2D(diff.x / (rx * rx), diff.y / (ry * ry));\n\n        const a = dir.dot(mDir);\n        const b = dir.dot(mDiff);\n        c = diff.dot(mDiff) - 1.0;\n        const d = b * b - a * c;\n\n        if (d < 0) {\n            result = new Intersection(\"Outside\");\n        }\n        else if (d > 0) {\n            const root = Math.sqrt(d); // eslint-disable-line no-shadow\n            const t_a = (-b - root) / a;\n            const t_b = (-b + root) / a;\n\n            if ((t_a < 0 || 1 < t_a) && (t_b < 0 || 1 < t_b)) {\n                if ((t_a < 0 && t_b < 0) || (t_a > 1 && t_b > 1)) {\n                    result = new Intersection(\"Outside\");\n                }\n                else {\n                    result = new Intersection(\"Inside\");\n                }\n            }\n            else {\n                result = new Intersection(\"Intersection\");\n                if (0 <= t_a && t_a <= 1) {\n                    result.appendPoint(a1.lerp(a2, t_a));\n                }\n                if (0 <= t_b && t_b <= 1) {\n                    result.appendPoint(a1.lerp(a2, t_b));\n                }\n            }\n        }\n        else {\n            const t = -b / a;\n\n            if (0 <= t && t <= 1) {\n                result = new Intersection(\"Intersection\");\n                result.appendPoint(a1.lerp(a2, t));\n            }\n            else {\n                result = new Intersection(\"Outside\");\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectEllipsePolygon\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipsePolygon(c, rx, ry, points) {\n        return Intersection.intersectEllipsePolyline(c, rx, ry, closePolygon(points));\n    }\n\n    /**\n     *  intersectEllipsePolyline\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipsePolyline(c, rx, ry, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n\n        for (let i = 0; i < len - 1; i++) {\n            const b1 = points[i];\n            const b2 = points[i + 1];\n            const inter = Intersection.intersectEllipseLine(c, rx, ry, b1, b2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectEllipseRectangle\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipseRectangle(c, rx, ry, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectEllipseLine(c, rx, ry, min, topRight);\n        const inter2 = Intersection.intersectEllipseLine(c, rx, ry, topRight, max);\n        const inter3 = Intersection.intersectEllipseLine(c, rx, ry, max, bottomLeft);\n        const inter4 = Intersection.intersectEllipseLine(c, rx, ry, bottomLeft, min);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectLineLine\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectLineLine(a1, a2, b1, b2) {\n        let result;\n\n        const ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n        const ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n        const u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n        if (u_b !== 0) {\n            const ua = ua_t / u_b;\n            const ub = ub_t / u_b;\n\n            if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n                result = new Intersection(\"Intersection\");\n                result.points.push(\n                    new Point2D(\n                        a1.x + ua * (a2.x - a1.x),\n                        a1.y + ua * (a2.y - a1.y)\n                    )\n                );\n            }\n            else {\n                result = new Intersection(\"No Intersection\");\n            }\n        }\n        else if (ua_t === 0 || ub_t === 0) {\n            result = new Intersection(\"Coincident\");\n        }\n        else {\n            result = new Intersection(\"Parallel\");\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectLinePolygon\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectLinePolygon(a1, a2, points) {\n        return Intersection.intersectLinePolyline(a1, a2, closePolygon(points));\n    }\n\n    /**\n     *  intersectLinePolyline\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectLinePolyline(a1, a2, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n\n        for (let i = 0; i < len - 1; i++) {\n            const b1 = points[i];\n            const b2 = points[i + 1];\n            const inter = Intersection.intersectLineLine(a1, a2, b1, b2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectLineRectangle\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectLineRectangle(a1, a2, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectLineLine(min, topRight, a1, a2);\n        const inter2 = Intersection.intersectLineLine(topRight, max, a1, a2);\n        const inter3 = Intersection.intersectLineLine(max, bottomLeft, a1, a2);\n        const inter4 = Intersection.intersectLineLine(bottomLeft, min, a1, a2);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectPolygonPolygon\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points1\n     *  @param {Array<module:kld-intersections.Point2D>} points2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolygonPolygon(points1, points2) {\n        return Intersection.intersectPolylinePolyline(closePolygon(points1), closePolygon(points2));\n    }\n\n    /**\n     *  intersectPolygonPolyline\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points1\n     *  @param {Array<module:kld-intersections.Point2D>} points2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolygonPolyline(points1, points2) {\n        return Intersection.intersectPolylinePolyline(closePolygon(points1), points2);\n    }\n\n    /**\n     *  intersectPolygonRectangle\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolygonRectangle(points, r1, r2) {\n        return Intersection.intersectPolylineRectangle(closePolygon(points), r1, r2);\n    }\n\n    /**\n     *  intersectPolylinePolyline\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points1\n     *  @param {Array<module:kld-intersections.Point2D>} points2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolylinePolyline(points1, points2) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points1;\n\n        for (let i = 0; i < len - 1; i++) {\n            const a1 = points1[i];\n            const a2 = points1[i + 1];\n            const inter = Intersection.intersectLinePolyline(a1, a2, points2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectPolylineRectangle\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolylineRectangle(points, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectLinePolyline(min, topRight, points);\n        const inter2 = Intersection.intersectLinePolyline(topRight, max, points);\n        const inter3 = Intersection.intersectLinePolyline(max, bottomLeft, points);\n        const inter4 = Intersection.intersectLinePolyline(bottomLeft, min, points);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectRectangleRectangle\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectRectangleRectangle(a1, a2, b1, b2) {\n        const min = a1.min(a2);\n        const max = a1.max(a2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectLineRectangle(min, topRight, b1, b2);\n        const inter2 = Intersection.intersectLineRectangle(topRight, max, b1, b2);\n        const inter3 = Intersection.intersectLineRectangle(max, bottomLeft, b1, b2);\n        const inter4 = Intersection.intersectLineRectangle(bottomLeft, min, b1, b2);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectRayRay\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectRayRay(a1, a2, b1, b2) {\n        let result;\n\n        const ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n        const ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n        const u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n        if (u_b !== 0) {\n            const ua = ua_t / u_b;\n\n            result = new Intersection(\"Intersection\");\n            result.points.push(\n                new Point2D(\n                    a1.x + ua * (a2.x - a1.x),\n                    a1.y + ua * (a2.y - a1.y)\n                )\n            );\n        }\n        else if (ua_t === 0 || ub_t === 0) {\n            result = new Intersection(\"Coincident\");\n        }\n        else {\n            result = new Intersection(\"Parallel\");\n        }\n\n        return result;\n    }\n\n    /**\n     *  appendPoint\n     *\n     *  @param {module:kld-intersections.Point2D} point\n     */\n    appendPoint(point) {\n        this.points.push(point);\n    }\n\n\n    /**\n     *  appendPoints\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     */\n    appendPoints(points) {\n        this.points = this.points.concat(points);\n    }\n}\n\nexport default Intersection;\n","/**\n *  PathLexeme.js\n *\n *  @copyright 2002, 2013 Kevin Lindsey\n *  @module PathLexeme\n */\n\n/**\n *  PathLexeme\n */\nclass PathLexeme {\n    /**\n     *  PathLexeme\n     *\n     *  @param {number} type\n     *  @param {string} text\n     */\n    constructor(type, text) {\n        this.type = type;\n        this.text = text;\n    }\n\n    /**\n     *  Determine if this lexeme is of the given type\n     *\n     *  @param {number} type\n     *  @returns {boolean}\n     */\n    typeis(type) {\n        return this.type === type;\n    }\n}\n\n/*\n * token type enumerations\n */\nPathLexeme.UNDEFINED = 0;\nPathLexeme.COMMAND = 1;\nPathLexeme.NUMBER = 2;\nPathLexeme.EOD = 3;\n\nexport default PathLexeme;\n","/**\n *  PathLexer.js\n *\n *  @copyright 2003, 2013 Kevin Lindsey\n *  @module PathLexer\n */\n\nimport PathLexeme from \"./PathLexeme.js\";\n\n/**\n *  Create a new instance of PathLexer\n */\nclass PathLexer {\n    /**\n     *  @param {string} [pathData]\n     */\n    constructor(pathData) {\n        if (pathData === null || pathData === undefined) {\n            pathData = \"\";\n        }\n\n        this.setPathData(pathData);\n    }\n\n    /**\n     *  setPathData\n     *\n     *  @param {string} pathData\n     */\n    setPathData(pathData) {\n        if (typeof pathData !== \"string\") {\n            throw new TypeError(\"The first parameter must be a string\");\n        }\n\n        this._pathData = pathData;\n    }\n\n    /**\n     *  getNextToken\n     *\n     *  @returns {PathLexeme}\n     */\n    getNextToken() {\n        let result = null;\n        let d = this._pathData;\n\n        while (result === null) {\n            if (d === null || d === \"\") {\n                result = new PathLexeme(PathLexeme.EOD, \"\");\n            }\n            else if (d.match(/^([ \\t\\r\\n,]+)/)) {\n                d = d.substr(RegExp.$1.length);\n            }\n            else if (d.match(/^([AaCcHhLlMmQqSsTtVvZz])/)) {\n                result = new PathLexeme(PathLexeme.COMMAND, RegExp.$1);\n                d = d.substr(RegExp.$1.length);\n            }\n            /* eslint-disable-next-line unicorn/no-unsafe-regex */\n            else if (d.match(/^(([-+]?\\d+(\\.\\d*)?|[-+]?\\.\\d+)([eE][-+]?\\d+)?)/)) {\n                result = new PathLexeme(PathLexeme.NUMBER, RegExp.$1);\n                d = d.substr(RegExp.$1.length);\n            }\n            else {\n                throw new SyntaxError(`Unrecognized path data: ${d}`);\n            }\n        }\n\n        this._pathData = d;\n\n        return result;\n    }\n}\n\nexport default PathLexer;\n","/**\n *  PathParser.js\n *\n *  @copyright 2003, 2017 Kevin Lindsey\n *  @module PathParser\n */\n\nimport PathLexer from \"./PathLexer.js\";\nimport PathLexeme from \"./PathLexeme.js\";\n\nconst BOP = \"BOP\";\n\n/**\n *  PathParser\n */\nclass PathParser {\n    /**\n     * constructor\n     */\n    constructor() {\n        this._lexer = new PathLexer();\n        this._handler = null;\n    }\n\n    /**\n     *  parseData\n     *\n     *  @param {string} pathData\n     *  @throws {Error}\n     */\n    parseData(pathData) {\n        if (typeof pathData !== \"string\") {\n            throw new TypeError(`The first parameter must be a string: ${pathData}`);\n        }\n\n        // begin parse\n        if (this._handler !== null && typeof this._handler.beginParse === \"function\") {\n            this._handler.beginParse();\n        }\n\n        // pass the pathData to the lexer\n        const lexer = this._lexer;\n\n        lexer.setPathData(pathData);\n\n        // set mode to signify new path - Beginning Of Path\n        let mode = BOP;\n\n        // Process all tokens\n        let lastToken = null;\n        let token = lexer.getNextToken();\n\n        while (token.typeis(PathLexeme.EOD) === false) {\n            let parameterCount;\n            const params = [];\n\n            // process current token\n            switch (token.type) {\n                case PathLexeme.COMMAND:\n                    if (mode === BOP && token.text !== \"M\" && token.text !== \"m\") {\n                        throw new SyntaxError(`New paths must begin with a moveto command. Found '${token.text}'`);\n                    }\n\n                    // Set new parsing mode\n                    mode = token.text;\n\n                    // Get count of numbers that must follow this command\n                    parameterCount = PathParser.PARAMCOUNT[token.text.toUpperCase()];\n\n                    // Advance past command token\n                    token = lexer.getNextToken();\n                    break;\n\n                case PathLexeme.NUMBER:\n                    // Most commands allow you to keep repeating parameters\n                    // without specifying the command again.  We just assume\n                    // that is the case and do nothing since the mode remains\n                    // the same\n\n                    if (mode === BOP) {\n                        throw new SyntaxError(`New paths must begin with a moveto command. Found '${token.text}'`);\n                    }\n                    else {\n                        parameterCount = PathParser.PARAMCOUNT[mode.toUpperCase()];\n                    }\n                    break;\n\n                default:\n                    throw new SyntaxError(`Unrecognized command type: ${token.type}`);\n            }\n\n            // Get parameters\n            for (let i = 0; i < parameterCount; i++) {\n                switch (token.type) {\n                    case PathLexeme.COMMAND:\n                        throw new SyntaxError(`Parameter must be a number. Found '${token.text}'`);\n\n                    case PathLexeme.NUMBER:\n                        // convert current parameter to a float and add to\n                        // parameter list\n                        params[i] = parseFloat(token.text);\n                        break;\n\n                    case PathLexeme.EOD:\n                        throw new SyntaxError(\"Unexpected end of string\");\n\n                    default:\n                        throw new SyntaxError(`Unrecognized parameter type. Found type '${token.type}'`);\n                }\n\n                token = lexer.getNextToken();\n            }\n\n            // fire handler\n            if (this._handler !== null) {\n                const handler = this._handler;\n                const methodName = PathParser.METHODNAME[mode];\n\n                // convert types for arcs\n                if (mode === \"a\" || mode === \"A\") {\n                    params[3] = params[3] !== 0;\n                    params[4] = params[4] !== 0;\n                }\n\n                if (handler !== null && typeof handler[methodName] === \"function\") {\n                    handler[methodName](...params);\n                }\n            }\n\n            // Lineto's follow moveto when no command follows moveto params.  Go\n            // ahead and set the mode just in case no command follows the moveto\n            // command\n            switch (mode) {\n                case \"M\":\n                    mode = \"L\";\n                    break;\n                case \"m\":\n                    mode = \"l\";\n                    break;\n                case \"Z\":\n                case \"z\":\n                    mode = \"BOP\";\n                    break;\n                default:\n                    // ignore for now\n            }\n\n            if (token === lastToken) {\n                throw new SyntaxError(`Parser stalled on '${token.text}'`);\n            }\n            else {\n                lastToken = token;\n            }\n        }\n\n        // end parse\n        if (this._handler !== null && typeof this._handler.endParse === \"function\") {\n            this._handler.endParse();\n        }\n    }\n\n    /**\n     *  setHandler\n     *\n     *  @param {Object} handler\n     */\n    setHandler(handler) {\n        this._handler = handler;\n    }\n}\n\n/*\n * class constants\n */\nPathParser.PARAMCOUNT = {\n    A: 7,\n    C: 6,\n    H: 1,\n    L: 2,\n    M: 2,\n    Q: 4,\n    S: 4,\n    T: 2,\n    V: 1,\n    Z: 0\n};\nPathParser.METHODNAME = {\n    A: \"arcAbs\",\n    a: \"arcRel\",\n    C: \"curvetoCubicAbs\",\n    c: \"curvetoCubicRel\",\n    H: \"linetoHorizontalAbs\",\n    h: \"linetoHorizontalRel\",\n    L: \"linetoAbs\",\n    l: \"linetoRel\",\n    M: \"movetoAbs\",\n    m: \"movetoRel\",\n    Q: \"curvetoQuadraticAbs\",\n    q: \"curvetoQuadraticRel\",\n    S: \"curvetoCubicSmoothAbs\",\n    s: \"curvetoCubicSmoothRel\",\n    T: \"curvetoQuadraticSmoothAbs\",\n    t: \"curvetoQuadraticSmoothRel\",\n    V: \"linetoVerticalAbs\",\n    v: \"linetoVerticalRel\",\n    Z: \"closePath\",\n    z: \"closePath\"\n};\n\nexport default PathParser;\n","/**\n *  PathHandler.js\n *\n *  @copyright 2017 Kevin Lindsey\n */\n\nimport {Point2D, Vector2D} from \"kld-affine\";\nimport Shapes from \"./Shapes.js\";\n\nconst TWO_PI = 2.0 * Math.PI;\n\n/**\n * normalizeAngle\n *\n * @param {number} radians\n * @returns {number}\n */\nfunction normalizeAngle(radians) {\n    const normal = radians % TWO_PI;\n\n    return normal < 0.0 ? normal + TWO_PI : normal;\n}\n\n/**\n * Based on the SVG 1.1 specification, Appendix F: Implementation Requirements,\n * Section F.6 \"Elliptical arc implementation notes\"\n * {@see https://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes}\n *\n * @param {module:kld-affine.Point2D} startPoint\n * @param {module:kld-affine.Point2D} endPoint\n * @param {number} rx\n * @param {number} ry\n * @param {number} angle\n * @param {boolean} arcFlag\n * @param {boolean} sweepFlag\n * @returns {Array}\n */\nfunction getArcParameters(startPoint, endPoint, rx, ry, angle, arcFlag, sweepFlag) {\n    angle = angle * Math.PI / 180;\n\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n    const TOLERANCE = 1e-6;\n\n    // Section (F.6.5.1)\n    const halfDiff = startPoint.subtract(endPoint).multiply(0.5);\n    const x1p = halfDiff.x * c + halfDiff.y * s;\n    const y1p = halfDiff.x * -s + halfDiff.y * c;\n\n    // Section (F.6.6.1)\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n\n    // Section (F.6.6.2)\n    const x1px1p = x1p * x1p;\n    const y1py1p = y1p * y1p;\n    const lambda = (x1px1p / (rx * rx)) + (y1py1p / (ry * ry));\n\n    // Section (F.6.6.3)\n    if (lambda > 1) {\n        const factor = Math.sqrt(lambda);\n\n        rx *= factor;\n        ry *= factor;\n    }\n\n    // Section (F.6.5.2)\n    const rxrx = rx * rx;\n    const ryry = ry * ry;\n    const rxy1 = rxrx * y1py1p;\n    const ryx1 = ryry * x1px1p;\n\n    let factor = (rxrx * ryry - rxy1 - ryx1) / (rxy1 + ryx1);\n\n    if (Math.abs(factor) < TOLERANCE) {\n        factor = 0;\n    }\n\n    let sq = Math.sqrt(factor);\n\n    if (arcFlag === sweepFlag) {\n        sq = -sq;\n    }\n\n    // Section (F.6.5.3)\n    const mid = startPoint.add(endPoint).multiply(0.5);\n    const cxp = sq * rx * y1p / ry;\n    const cyp = sq * -ry * x1p / rx;\n\n    // Section (F.6.5.5 - F.6.5.6)\n    const xcr1 = (x1p - cxp) / rx;\n    const xcr2 = (x1p + cxp) / rx;\n    const ycr1 = (y1p - cyp) / ry;\n    const ycr2 = (y1p + cyp) / ry;\n\n    const theta1 = new Vector2D(1, 0).angleBetween(new Vector2D(xcr1, ycr1));\n    let deltaTheta = normalizeAngle(new Vector2D(xcr1, ycr1).angleBetween(new Vector2D(-xcr2, -ycr2)));\n\n    if (sweepFlag === false) {\n        deltaTheta -= TWO_PI;\n    }\n\n    return [\n        cxp * c - cyp * s + mid.x,\n        cxp * s + cyp * c + mid.y,\n        rx,\n        ry,\n        theta1,\n        theta1 + deltaTheta\n    ];\n}\n\n/**\n *  PathHandler\n */\nclass PathHandler {\n    /**\n     * PathHandler\n     */\n    constructor() {\n        this.shapes = [];\n        this.firstX = null;\n        this.firstY = null;\n        this.lastX = null;\n        this.lastY = null;\n        this.lastCommand = null;\n    }\n\n    /**\n     * beginParse\n     */\n    beginParse() {\n        // zero out the sub-path array\n        this.shapes = [];\n\n        // clear firstX, firstY, lastX, and lastY\n        this.firstX = null;\n        this.firstY = null;\n        this.lastX = null;\n        this.lastY = null;\n\n        // need to remember last command type to determine how to handle the\n        // relative Bezier commands\n        this.lastCommand = null;\n    }\n\n    /**\n     *  addShape\n     *\n     *  @param {IntersectionArgs} shape\n     */\n    addShape(shape) {\n        this.shapes.push(shape);\n    }\n\n    /**\n     *  arcAbs - A\n     *\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {number} xAxisRotation\n     *  @param {boolean} arcFlag\n     *  @param {boolean} sweepFlag\n     *  @param {number} x\n     *  @param {number} y\n     */\n    arcAbs(rx, ry, xAxisRotation, arcFlag, sweepFlag, x, y) {\n        if (rx === 0 || ry === 0) {\n            this.addShape(Shapes.line(\n                this.lastX, this.lastY,\n                x, y\n            ));\n        }\n        else {\n            const arcParameters = getArcParameters(\n                new Point2D(this.lastX, this.lastY),\n                new Point2D(x, y),\n                rx, ry,\n                xAxisRotation,\n                arcFlag, sweepFlag\n            );\n\n            this.addShape(Shapes.arc(...arcParameters));\n        }\n\n        this.lastCommand = \"A\";\n        this.lastX = x;\n        this.lastY = y;\n    }\n\n    /**\n     *  arcRel - a\n     *\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {number} xAxisRotation\n     *  @param {boolean} arcFlag\n     *  @param {boolean} sweepFlag\n     *  @param {number} x\n     *  @param {number} y\n     */\n    arcRel(rx, ry, xAxisRotation, arcFlag, sweepFlag, x, y) {\n        if (rx === 0 || ry === 0) {\n            this.addShape(Shapes.line(\n                this.lastX, this.lastY,\n                this.lastX + x, this.lastY + y\n            ));\n        }\n        else {\n            const arcParameters = getArcParameters(\n                new Point2D(this.lastX, this.lastY),\n                new Point2D(this.lastX + x, this.lastY + y),\n                rx, ry,\n                xAxisRotation,\n                arcFlag, sweepFlag\n            );\n\n            this.addShape(Shapes.arc(...arcParameters));\n        }\n\n        this.lastCommand = \"a\";\n        this.lastX += x;\n        this.lastY += y;\n    }\n\n    /**\n     *  curvetoCubicAbs - C\n     *\n     *  @param {number} x1\n     *  @param {number} y1\n     *  @param {number} x2\n     *  @param {number} y2\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoCubicAbs(x1, y1, x2, y2, x, y) {\n        this.addShape(Shapes.cubicBezier(\n            this.lastX, this.lastY,\n            x1, y1,\n            x2, y2,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"C\";\n    }\n\n    /**\n     *  curvetoCubicRel - c\n     *\n     *  @param {number} x1\n     *  @param {number} y1\n     *  @param {number} x2\n     *  @param {number} y2\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoCubicRel(x1, y1, x2, y2, x, y) {\n        this.addShape(Shapes.cubicBezier(\n            this.lastX, this.lastY,\n            this.lastX + x1, this.lastY + y1,\n            this.lastX + x2, this.lastY + y2,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"c\";\n    }\n\n    /**\n     *  linetoHorizontalAbs - H\n     *\n     *  @param {number} x\n     */\n    linetoHorizontalAbs(x) {\n        this.addShape(Shapes.line(\n            this.lastX, this.lastY,\n            x, this.lastY\n        ));\n\n        this.lastX = x;\n        this.lastCommand = \"H\";\n    }\n\n    /**\n     *  linetoHorizontalRel - h\n     *\n     *  @param {number} x\n     */\n    linetoHorizontalRel(x) {\n        this.addShape(Shapes.line(\n            this.lastX, this.lastY,\n            this.lastX + x, this.lastY\n        ));\n\n        this.lastX += x;\n        this.lastCommand = \"h\";\n    }\n\n    /**\n     *  linetoAbs - L\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    linetoAbs(x, y) {\n        this.addShape(Shapes.line(\n            this.lastX, this.lastY,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"L\";\n    }\n\n    /**\n     *  linetoRel - l\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    linetoRel(x, y) {\n        this.addShape(Shapes.line(\n            this.lastX, this.lastY,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"l\";\n    }\n\n    /**\n     *  movetoAbs - M\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    movetoAbs(x, y) {\n        this.firstX = x;\n        this.firstY = y;\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"M\";\n    }\n\n    /**\n     *  movetoRel - m\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    movetoRel(x, y) {\n        this.firstX += x;\n        this.firstY += y;\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"m\";\n    }\n\n    /**\n     *  curvetoQuadraticAbs - Q\n     *\n     *  @param {number} x1\n     *  @param {number} y1\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoQuadraticAbs(x1, y1, x, y) {\n        this.addShape(Shapes.quadraticBezier(\n            this.lastX, this.lastY,\n            x1, y1,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"Q\";\n    }\n\n    /**\n     *  curvetoQuadraticRel - q\n     *\n     *  @param {number} x1\n     *  @param {number} y1\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoQuadraticRel(x1, y1, x, y) {\n        this.addShape(Shapes.quadraticBezier(\n            this.lastX, this.lastY,\n            this.lastX + x1, this.lastY + y1,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"q\";\n    }\n\n    /**\n     *  curvetoCubicSmoothAbs - S\n     *\n     *  @param {number} x2\n     *  @param {number} y2\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoCubicSmoothAbs(x2, y2, x, y) {\n        let controlX, controlY;\n\n        if (this.lastCommand.match(/^[SsCc]$/)) {\n            const secondToLast = this.shapes[this.shapes.length - 1].args[2];\n\n            controlX = 2 * this.lastX - secondToLast.x;\n            controlY = 2 * this.lastX - secondToLast.y;\n        }\n        else {\n            controlX = this.lastX;\n            controlY = this.lastY;\n        }\n\n        this.addShape(Shapes.cubicBezier(\n            this.lastX, this.lastY,\n            controlX, controlY,\n            x2, y2,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"S\";\n    }\n\n    /**\n     *  curvetoCubicSmoothRel - s\n     *\n     *  @param {number} x2\n     *  @param {number} y2\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoCubicSmoothRel(x2, y2, x, y) {\n        let controlX, controlY;\n\n        if (this.lastCommand.match(/^[SsCc]$/)) {\n            const secondToLast = this.shapes[this.shapes.length - 1].args[2];\n\n            controlX = 2 * this.lastX - secondToLast.x;\n            controlY = 2 * this.lastY - secondToLast.y;\n        }\n        else {\n            controlX = this.lastX;\n            controlY = this.lastY;\n        }\n\n        this.addShape(Shapes.cubicBezier(\n            this.lastX, this.lastY,\n            controlX, controlY,\n            this.lastX + x2, this.lastY + y2,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"s\";\n    }\n\n    /**\n     *  curvetoQuadraticSmoothAbs - T\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoQuadraticSmoothAbs(x, y) {\n        let controlX, controlY;\n\n        if (this.lastCommand.match(/^[QqTt]$/)) {\n            const secondToLast = this.shapes[this.shapes.length - 1].args[1];\n\n            controlX = 2 * this.lastX - secondToLast.x;\n            controlY = 2 * this.lastY - secondToLast.y;\n        }\n        else {\n            controlX = this.lastX;\n            controlY = this.lastY;\n        }\n\n        this.addShape(Shapes.quadraticBezier(\n            this.lastX, this.lastY,\n            controlX, controlY,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"T\";\n    }\n\n    /**\n     *  curvetoQuadraticSmoothRel - t\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoQuadraticSmoothRel(x, y) {\n        let controlX, controlY;\n\n        if (this.lastCommand.match(/^[QqTt]$/)) {\n            const secondToLast = this.shapes[this.shapes.length - 1].args[1];\n\n            controlX = 2 * this.lastX - secondToLast.x;\n            controlY = 2 * this.lastY - secondToLast.y;\n        }\n        else {\n            controlX = this.lastX;\n            controlY = this.lastY;\n        }\n\n        this.addShape(Shapes.quadraticBezier(\n            this.lastX, this.lastY,\n            controlX, controlY,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"t\";\n    }\n\n    /**\n     *  linetoVerticalAbs - V\n     *\n     *  @param {number} y\n     */\n    linetoVerticalAbs(y) {\n        this.addShape(Shapes.line(\n            this.lastX, this.lastY,\n            this.lastX, y\n        ));\n\n        this.lastY = y;\n\n        this.lastCommand = \"V\";\n    }\n\n    /**\n     *  linetoVerticalRel - v\n     *\n     *  @param {number} y\n     */\n    linetoVerticalRel(y) {\n        this.addShape(Shapes.line(\n            this.lastX, this.lastY,\n            this.lastX, this.lastY + y\n        ));\n\n        this.lastY += y;\n\n        this.lastCommand = \"v\";\n    }\n\n    /**\n     *  closePath - z or Z\n     */\n    closePath() {\n        this.addShape(Shapes.line(\n            this.lastX, this.lastY,\n            this.firstX, this.firstY\n        ));\n\n        this.lastX = this.firstX;\n        this.lastY = this.firstY;\n        this.lastCommand = \"z\";\n    }\n}\n\nexport default PathHandler;\n","/**\n *  Shapes\n *\n *  @copyright 2017, Kevin Lindsey\n *  @module Shapes\n */\n\nimport {Point2D} from \"kld-affine\";\nimport {PathParser} from \"kld-path-parser\";\nimport PathHandler from \"./PathHandler.js\";\n\nimport IntersectionArgs from \"./IntersectionArgs.js\";\n\n/**\n * @namespace\n */\nconst Shapes = {};\n\n/**\n *  quadraticBezier\n *\n *  @param {number} p1x\n *  @param {number} p1y\n *  @param {number} p2x\n *  @param {number} p2y\n *  @param {number} p3x\n *  @param {number} p3y\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nShapes.quadraticBezier = function(p1x, p1y, p2x, p2y, p3x, p3y) {\n    return new IntersectionArgs(\"Bezier2\", [\n        new Point2D(p1x, p1y),\n        new Point2D(p2x, p2y),\n        new Point2D(p3x, p3y)\n    ]);\n};\n\n/**\n *  cubicBezier\n *\n *  @param {number} p1x\n *  @param {number} p1y\n *  @param {number} p2x\n *  @param {number} p2y\n *  @param {number} p3x\n *  @param {number} p3y\n *  @param {number} p4x\n *  @param {number} p4y\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nShapes.cubicBezier = function(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {\n    return new IntersectionArgs(\"Bezier3\", [\n        new Point2D(p1x, p1y),\n        new Point2D(p2x, p2y),\n        new Point2D(p3x, p3y),\n        new Point2D(p4x, p4y)\n    ]);\n};\n\n/**\n *  circle\n *\n *  @param {number} centerX\n *  @param {number} centerY\n *  @param {number} radius\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nShapes.circle = function(centerX, centerY, radius) {\n    return new IntersectionArgs(\"Circle\", [\n        new Point2D(centerX, centerY),\n        radius\n    ]);\n};\n\n/**\n *  ellipse\n *\n *  @param {number} centerX\n *  @param {number} centerY\n *  @param {number} radiusX\n *  @param {number} radiusY\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nShapes.ellipse = function(centerX, centerY, radiusX, radiusY) {\n    return new IntersectionArgs(\"Ellipse\", [\n        new Point2D(centerX, centerY),\n        radiusX,\n        radiusY\n    ]);\n};\n\n/**\n * arc\n *\n * @param {number} centerX\n * @param {number} centerY\n * @param {number} radiusX\n * @param {number} radiusY\n * @param {number} startRadians\n * @param {number} endRadians\n * @returns {module:kld-intersections.IntersectionArgs}\n */\nShapes.arc = function(centerX, centerY, radiusX, radiusY, startRadians, endRadians) {\n    return new IntersectionArgs(\"Arc\", [\n        new Point2D(centerX, centerY),\n        radiusX,\n        radiusY,\n        startRadians,\n        endRadians\n    ]);\n};\n\n/**\n *  line\n *\n *  @param {number} p1x\n *  @param {number} p1y\n *  @param {number} p2x\n *  @param {number} p2y\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nShapes.line = function(p1x, p1y, p2x, p2y) {\n    return new IntersectionArgs(\"Line\", [\n        new Point2D(p1x, p1y),\n        new Point2D(p2x, p2y)\n    ]);\n};\n\n/**\n *  path\n *\n *  @param {Array<module:kld-intersections.Shapes>} segments\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nShapes.path = function(segments) {\n    return new IntersectionArgs(\"Path\", segments);\n};\n\n/**\n *  pathData\n *\n *  @param {string} pathData\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nShapes.pathData = function(pathData) {\n    // TODO: cache parser and handler\n    const parser = new PathParser();\n    const handler = new PathHandler();\n\n    parser.setHandler(handler);\n    parser.parseData(pathData);\n\n    return Shapes.path(handler.shapes);\n};\n\n/**\n *  polygon\n *\n *  @param {Array<number>} coords\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nShapes.polygon = function(coords) {\n    const points = [];\n\n    for (let i = 0; i < coords.length; i += 2) {\n        points.push(new Point2D(coords[i], coords[i + 1]));\n    }\n\n    return new IntersectionArgs(\"Polygon\", [points]);\n};\n\n/**\n *  polyline\n *\n *  @param {Array<number>} coords\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nShapes.polyline = function(coords) {\n    const points = [];\n\n    for (let i = 0; i < coords.length; i += 2) {\n        points.push(new Point2D(coords[i], coords[i + 1]));\n    }\n\n    return new IntersectionArgs(\"Polyline\", [points]);\n};\n\n/**\n *  rectangle\n *\n *  @param {number} x\n *  @param {number} y\n *  @param {number} width\n *  @param {number} height\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nShapes.rectangle = function(x, y, width, height) {\n    return new IntersectionArgs(\"Rectangle\", [\n        new Point2D(x, y),\n        new Point2D(x + width, y + height)\n    ]);\n};\n\nexport default Shapes;\n","/**\n *  AffineShapes\n *\n *  @copyright 2017, Kevin Lindsey\n *  @module AffineShapes\n */\n\nimport {PathParser} from \"kld-path-parser\";\nimport IntersectionArgs from \"./IntersectionArgs.js\";\nimport PathHandler from \"./PathHandler.js\";\n\n/**\n * @namespace\n */\nconst AffineShapes = {};\n\n/**\n *  quadraticBezier\n *  @param {module:kld-intersections.Point2D} p1\n *  @param {module:kld-intersections.Point2D} p2\n *  @param {module:kld-intersections.Point2D} p3\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nAffineShapes.quadraticBezier = function(p1, p2, p3) {\n    return new IntersectionArgs(\"Bezier2\", [p1, p2, p3]);\n};\n\n/**\n *  cubicBezier\n *\n *  @param {module:kld-intersections.Point2D} p1\n *  @param {module:kld-intersections.Point2D} p2\n *  @param {module:kld-intersections.Point2D} p3\n *  @param {module:kld-intersections.Point2D} p4\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nAffineShapes.cubicBezier = function(p1, p2, p3, p4) {\n    return new IntersectionArgs(\"Bezier3\", [p1, p2, p3, p4]);\n};\n\n/**\n *  circle\n *\n *  @param {module:kld-intersections.Point2D} center\n *  @param {number} radius\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nAffineShapes.circle = function(center, radius) {\n    return new IntersectionArgs(\"Circle\", [center, radius]);\n};\n\n/**\n *  ellipse\n *\n *  @param {module:kld-intersections.Point2D} center\n *  @param {number} radiusX\n *  @param {number} radiusY\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nAffineShapes.ellipse = function(center, radiusX, radiusY) {\n    return new IntersectionArgs(\"Ellipse\", [center, radiusX, radiusY]);\n};\n\n/**\n * arc\n *\n * @param {module:kld-intersections.Point2D} center\n * @param {number} radiusX\n * @param {number} radiusY\n * @param {number} startRadians\n * @param {number} endRadians\n * @returns {module:kld-intersections.IntersectionArgs}\n */\nAffineShapes.arc = function(center, radiusX, radiusY, startRadians, endRadians) {\n    return new IntersectionArgs(\"Arc\", [center, radiusX, radiusY, startRadians, endRadians]);\n};\n\n/**\n *  line\n *\n *  @param {module:kld-intersections.Point2D} p1\n *  @param {module:kld-intersections.Point2D} p2\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nAffineShapes.line = function(p1, p2) {\n    return new IntersectionArgs(\"Line\", [p1, p2]);\n};\n\n/**\n *  path\n *\n *  @param {Array<module:kld-intersections.AffineShapes>} segments\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nAffineShapes.path = function(segments) {\n    return new IntersectionArgs(\"Path\", segments);\n};\n\n/**\n *  pathData\n *\n *  @param {string} pathData\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nAffineShapes.pathData = function(pathData) {\n    // TODO: cache parser and handler\n    const parser = new PathParser();\n    const handler = new PathHandler();\n\n    parser.setHandler(handler);\n    parser.parseData(pathData);\n\n    return AffineShapes.path(handler.shapes);\n};\n\n/**\n *  polygon\n *\n *  @param {Array<module:kld-intersections.Point2D>} points\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nAffineShapes.polygon = function(points) {\n    return new IntersectionArgs(\"Polygon\", [points]);\n};\n\n/**\n *  polyline\n *\n *  @param {Array<module:kld-intersections.Point2D>} points\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nAffineShapes.polyline = function(points) {\n    return new IntersectionArgs(\"Polyline\", [points]);\n};\n\n/**\n *  rectangle\n *\n *  @param {module:kld-intersections.Point2D} topLeft\n *  @param {module:kld-intersections.Vector2D} size\n *  @returns {module:kld-intersections.IntersectionArgs}\n */\nAffineShapes.rectangle = function(topLeft, size) {\n    return new IntersectionArgs(\"Rectangle\", [topLeft, topLeft.add(size)]);\n};\n\nexport default AffineShapes;\n","/**\n *\n *  IntersectionQuery.js\n *\n *  @copyright 2017 Kevin Lindsey\n * @module IntersectionQuery\n */\n\nimport {Vector2D} from \"kld-affine\";\n\n/**\n * @namespace\n */\nconst IntersectionQuery = {};\n\n\n/**\n *  pointInCircle\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {module:kld-intersections.Point2D} center\n *  @param {number} radius\n *  @returns {boolean}\n */\nIntersectionQuery.pointInCircle = function(point, center, radius) {\n    const v = Vector2D.fromPoints(center, point);\n\n    return v.length() <= radius;\n};\n\n\n/**\n *  pointInEllipse\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {module:kld-intersections.Point2D} center\n *  @param {number} radiusX\n *  @param {number} radiusY\n *  @returns {boolean}\n */\nIntersectionQuery.pointInEllipse = function(point, center, radiusX, radiusY) {\n    const len = point.subtract(center);\n\n    return (len.x * len.x) / (radiusX * radiusX) + (len.y * len.y) / (radiusY * radiusY) <= 1;\n};\n\n\n/**\n *  pointInPolyline\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {Array<module:kld-intersections.Point2D>} points\n */\nIntersectionQuery.pointInPolyline = function(point, points) {\n    const {length: len} = points;\n    let counter = 0;\n    let xInter;\n\n    let p1 = points[0];\n\n    for (let i = 1; i <= len; i++) {\n        const p2 = points[i % len];\n        const minY = Math.min(p1.y, p2.y);\n        const maxY = Math.max(p1.y, p2.y);\n        const maxX = Math.max(p1.x, p2.x);\n\n        if (p1.y !== p2.y && minY < point.y && point.y <= maxY && point.x <= maxX) {\n            xInter = (point.y - p1.y) * (p2.x - p1.x) / (p2.y - p1.y) + p1.x;\n\n            if (p1.x === p2.x || point.x <= xInter) {\n                counter++;\n            }\n        }\n\n        p1 = p2;\n    }\n\n    return (counter % 2 === 1);\n};\n\n\n/**\n *  pointInPolyline\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {Array<module:kld-intersections.Point2D>} points\n */\nIntersectionQuery.pointInPolygon = IntersectionQuery.pointInPolyline;\n\n\n/**\n *  pointInRectangle\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {module:kld-intersections.Point2D} topLeft\n *  @param {module:kld-intersections.Point2D} bottomRight\n *  @returns {boolean}\n */\nIntersectionQuery.pointInRectangle = function(point, topLeft, bottomRight) {\n    return (\n        topLeft.x <= point.x && point.x < bottomRight.x &&\n        topLeft.y <= point.y && point.y < bottomRight.y\n    );\n};\n\n\nexport default IntersectionQuery;\n"],"names":["Point2D","x","y","this","constructor","that","scalar","precision","Math","abs","t","omt","dx","dy","sqrt","min","max","matrix","a","c","e","b","d","f","Vector2D","divide","length","cos","dot","radians","acos","cross","subtract","project","percent","multiply","p1","p2","Matrix2D","isIdentity","det1","Error","idet","det2","det3","tx","ty","scale","center","scaleX","scaleY","s","sin","cx","cy","vector","unit","tan","E","F","G","H","Q","R","a1","atan2","a2","theta","phi","translation","rotation","nonUniformScaling","rotation0","sign","NaN","IDENTITY","Polynomial","coefs","i","arguments","push","_variable","_s","poly","slice","isNaN","TypeError","result","d1","getDegree","d2","dmax","v1","v2","j","TOLERANCE","pop","err","reduce","pv","cv","divideEqualsScalar","signs","value","round","signString","ACCURACY","minValue","eval","maxValue","tmp1","log","tmp2","LN10","maxIterations","ceil","LN2","n","range","iter","delta","sum","st","os","ost","Array","MAX","h","trapezoid","interpolate","maxAbsX","rb","bounds","minX","maxX","an","m","v","nm","pow","map","coefSelectionFunc","find2Max","acc","bi","nearmax","max_nearmax_pos","negX","posX","reverse","res","boundsUpperRealFujiwara","urb","boundsLowerRealFujiwara","prev","curr","undersqrt","accum","ai","prev_a","pos","neg","maxRealPos","maxRealNeg","minComplex","derivative","simplifyEquals","getLinearRoot","getQuadraticRoots","getCubicRoots","getQuarticRoots","roots","RangeError","bisection","droots","getDerivative","getRootsInInterval","results","c3","c2","c1","offset","discrim","halfB","ZEROepsilon","zeroErrorEstimate","root","tmp","distance","angle","sqrt3","poly_d","derrt","getRoots","sort","dery","nr","maxabsX","guesses","minmax","df","newtonSecantBisection","concat","xs","ys","ns","diff","dift","ho","hp","w","den","x0","max_iterations","dfx","x_correction","x_new","y_atmin","y_atmax","prev_dfx","prev_x_ef_correction","min_correction_factor","isBounded","isEnoughCorrection","IntersectionArgs","name","args","init","TWO_PI","PI","UNIT_X","isNullish","o","normalizeAngle","normal","restrictPointsToArc","intersections","radiusX","radiusY","startRadians","endRadians","points","Intersection","startNormal","endNormal","p","angleBetween","fromPoints","appendPoint","status","closePolygon","copy","point","shape1","shape2","intersectPathShape","intersectArcShape","method","apply","path","shape","segment","inter","intersect","appendPoints","arc","ellipse","a3","b1","b2","b3","c12","add","c11","c10","c22","c21","c20","g","xp","xRoots","yp","yRoots","checkRoots","xRoot","k","b4","c23","c10x2","c10y2","c11x2","c11y2","c12x2","c12y2","c20x2","c20y2","c21x2","c21y2","c22x2","c22y2","c23x2","c23y2","p3","r","intersectBezier2Ellipse","ec","rx","ry","c0","rxrx","ryry","cl","p4","lerp","p5","p6","intersectBezier2Polyline","len","intersectBezier2Line","r1","r2","topRight","bottomLeft","inter1","inter2","inter3","inter4","a4","c13","e0","e1","e2","e3","f0","f1","f2","f3","g0","g1","g2","g3","h0","h1","h2","h3","i0","i1","i2","i3","intersectBezier3Ellipse","p7","p8","p9","p10","intersectBezier3Polyline","intersectBezier3Line","r_max","r_min","c_dist","distanceFrom","cc","intersectEllipseEllipse","deter","u1","u2","intersectCirclePolyline","intersectCircleLine","rx1","ry1","rx2","ry2","AB","AC","AD","AE","AF","BC","BE","BF","CD","DE","DF","BFpDE","BEmCD","norm0","norm1","tst","orign","dir","mDir","mDiff","t_a","t_b","intersectEllipsePolyline","intersectEllipseLine","ua_t","ub_t","u_b","ua","ub","intersectLinePolyline","intersectLineLine","points1","points2","intersectPolylinePolyline","intersectPolylineRectangle","intersectLineRectangle","PathLexeme","type","text","UNDEFINED","COMMAND","NUMBER","EOD","PathLexer","pathData","setPathData","_pathData","match","substr","RegExp","$1","SyntaxError","PathParser","_lexer","_handler","beginParse","lexer","mode","lastToken","token","getNextToken","typeis","parameterCount","params","PARAMCOUNT","toUpperCase","parseFloat","handler","methodName","METHODNAME","endParse","A","C","L","M","S","T","V","Z","l","q","z","getArcParameters","startPoint","endPoint","arcFlag","sweepFlag","halfDiff","x1p","y1p","x1px1p","y1py1p","lambda","factor","rxy1","ryx1","sq","mid","cxp","cyp","xcr1","xcr2","ycr1","ycr2","theta1","deltaTheta","PathHandler","shapes","firstX","firstY","lastX","lastY","lastCommand","xAxisRotation","addShape","Shapes","line","arcParameters","x1","y1","x2","y2","cubicBezier","quadraticBezier","controlX","controlY","secondToLast","p1x","p1y","p2x","p2y","p3x","p3y","p4x","p4y","centerX","centerY","radius","segments","parser","setHandler","parseData","coords","width","height","AffineShapes","topLeft","size","IntersectionQuery","xInter","counter","minY","maxY","pointInPolygon","pointInPolyline","pointInRectangle","bottomRight"],"mappings":"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"}