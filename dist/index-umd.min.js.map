{"version":3,"file":"index-umd.min.js","sources":["../node_modules/kld-affine/lib/Point2D.js","../node_modules/kld-affine/lib/Vector2D.js","../node_modules/kld-affine/lib/Matrix2D.js","../node_modules/kld-polynomial/lib/Polynomial.js","../../kld-data-transformer/lib/GeneratedParser.js","../../kld-data-transformer/lib/Transformer.js","../lib/ShapeInfo.js","../lib/Intersection.js","../node_modules/kld-path-parser/lib/PathLexeme.js","../node_modules/kld-path-parser/lib/PathLexer.js","../node_modules/kld-path-parser/lib/PathParser.js","../lib/PathHandler.js","../lib/Shapes.js","../lib/AffineShapes.js","../lib/SvgShapes.js","../lib/IntersectionQuery.js"],"sourcesContent":["/**\n *  Point2D.js\n *  @module Point2D\n *  @copyright 2001-2019 Kevin Lindsey\n */\n\n/**\n *  Point2D\n *\n *  @memberof module:kld-affine\n */\nclass Point2D {\n    /**\n     *  Point2D\n     *\n     *  @param {number} x\n     *  @param {number} y\n     *  @returns {module:kld-affine.Point2D}\n     */\n    constructor(x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     *  clone\n     *\n     *  @returns {module:kld-affine.Point2D}\n     */\n    clone() {\n        return new this.constructor(this.x, this.y);\n    }\n\n    /**\n     *  add\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @returns {module:kld-affine.Point2D}\n     */\n    add(that) {\n        return new this.constructor(this.x + that.x, this.y + that.y);\n    }\n\n    /**\n     *  subtract\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @returns {module:kld-affine.Point2D}\n     */\n    subtract(that) {\n        return new this.constructor(this.x - that.x, this.y - that.y);\n    }\n\n    /**\n     *  multiply\n     *\n     *  @param {number} scalar\n     *  @returns {module:kld-affine.Point2D}\n     */\n    multiply(scalar) {\n        return new this.constructor(this.x * scalar, this.y * scalar);\n    }\n\n    /**\n     *  divide\n     *\n     *  @param {number} scalar\n     *  @returns {module:kld-affine.Point2D}\n     */\n    divide(scalar) {\n        return new this.constructor(this.x / scalar, this.y / scalar);\n    }\n\n    /**\n     *  equals\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @returns {boolean}\n     */\n    equals(that) {\n        return (this.x === that.x && this.y === that.y);\n    }\n\n    /**\n     *  precisionEquals\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @param {number} precision\n     *  @returns {boolean}\n     */\n    precisionEquals(that, precision) {\n        return (\n            Math.abs(this.x - that.x) < precision &&\n            Math.abs(this.y - that.y) < precision\n        );\n    }\n\n    // utility methods\n\n    /**\n     *  lerp\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @param {number} t\n     *  @returns {module:kld-affine.Point2D}\n     */\n    lerp(that, t) {\n        const omt = 1.0 - t;\n\n        return new this.constructor(\n            this.x * omt + that.x * t,\n            this.y * omt + that.y * t\n        );\n    }\n\n    /**\n     *  distanceFrom\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @returns {number}\n     */\n    distanceFrom(that) {\n        const dx = this.x - that.x;\n        const dy = this.y - that.y;\n\n        return Math.sqrt(dx * dx + dy * dy);\n    }\n\n    /**\n     *  min\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @returns {number}\n     */\n    min(that) {\n        return new this.constructor(\n            Math.min(this.x, that.x),\n            Math.min(this.y, that.y)\n        );\n    }\n\n    /**\n     *  max\n     *\n     *  @param {module:kld-affine.Point2D} that\n     *  @returns {number}\n     */\n    max(that) {\n        return new this.constructor(\n            Math.max(this.x, that.x),\n            Math.max(this.y, that.y)\n        );\n    }\n\n    /**\n     *  transform\n     *\n     *  @param {module:kld-affine.Matrix2D} matrix\n     *  @returns {module:kld-affine.Point2D}\n     */\n    transform(matrix) {\n        return new this.constructor(\n            matrix.a * this.x + matrix.c * this.y + matrix.e,\n            matrix.b * this.x + matrix.d * this.y + matrix.f\n        );\n    }\n\n    /**\n     *  toString\n     *\n     *  @returns {string}\n     */\n    toString() {\n        return `point(${this.x},${this.y})`;\n    }\n}\n\nexport default Point2D;\n","/**\n *  Vector2D.js\n *  @module Vector2D\n *  @copyright 2001-2019 Kevin Lindsey\n */\n\n/**\n *  Vector2D\n *\n *  @memberof module:kld-affine\n */\nclass Vector2D {\n    /**\n     *  Vector2D\n     *\n     *  @param {number} x\n     *  @param {number} y\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    constructor(x = 0, y = 0) {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     *  fromPoints\n     *\n     *  @param {module:kld-affine.Point2D} p1\n     *  @param {module:kld-affine.Point2D} p2\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    static fromPoints(p1, p2) {\n        return new Vector2D(\n            p2.x - p1.x,\n            p2.y - p1.y\n        );\n    }\n\n    /**\n     *  length\n     *\n     *  @returns {number}\n     */\n    length() {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n    }\n\n    /**\n     *  magnitude\n     *\n     *  @returns {number}\n     */\n    magnitude() {\n        return this.x * this.x + this.y * this.y;\n    }\n\n    /**\n     *  dot\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {number}\n     */\n    dot(that) {\n        return this.x * that.x + this.y * that.y;\n    }\n\n    /**\n     *  cross\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {number}\n     */\n    cross(that) {\n        return this.x * that.y - this.y * that.x;\n    }\n\n    /**\n     *  determinant\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {number}\n     */\n    determinant(that) {\n        return this.x * that.y - this.y * that.x;\n    }\n\n    /**\n     *  unit\n     *\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    unit() {\n        return this.divide(this.length());\n    }\n\n    /**\n     *  add\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    add(that) {\n        return new this.constructor(this.x + that.x, this.y + that.y);\n    }\n\n    /**\n     *  subtract\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    subtract(that) {\n        return new this.constructor(this.x - that.x, this.y - that.y);\n    }\n\n    /**\n     *  multiply\n     *\n     *  @param {number} scalar\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    multiply(scalar) {\n        return new this.constructor(this.x * scalar, this.y * scalar);\n    }\n\n    /**\n     *  divide\n     *\n     *  @param {number} scalar\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    divide(scalar) {\n        return new this.constructor(this.x / scalar, this.y / scalar);\n    }\n\n    /**\n     *  angleBetween\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {number}\n     */\n    angleBetween(that) {\n        let cos = this.dot(that) / (this.length() * that.length());\n        cos = Math.max(-1, Math.min(cos, 1));\n        const radians = Math.acos(cos);\n\n        return (this.cross(that) < 0.0) ? -radians : radians;\n    }\n\n    /**\n     *  Find a vector is that is perpendicular to this vector\n     *\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    perp() {\n        return new this.constructor(-this.y, this.x);\n    }\n\n    /**\n     *  Find the component of the specified vector that is perpendicular to\n     *  this vector\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    perpendicular(that) {\n        return this.subtract(this.project(that));\n    }\n\n    /**\n     *  project\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    project(that) {\n        const percent = this.dot(that) / that.dot(that);\n\n        return that.multiply(percent);\n    }\n\n    /**\n     *  transform\n     *\n     *  @param {module:kld-affine.Matrix2D} matrix\n     *  @returns {module:kld-affine.Vector2D}\n     */\n    transform(matrix) {\n        return new this.constructor(\n            matrix.a * this.x + matrix.c * this.y,\n            matrix.b * this.x + matrix.d * this.y\n        );\n    }\n\n    /**\n     *  equals\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @returns {boolean}\n     */\n    equals(that) {\n        return (\n            this.x === that.x &&\n            this.y === that.y\n        );\n    }\n\n    /**\n     *  precisionEquals\n     *\n     *  @param {module:kld-affine.Vector2D} that\n     *  @param {number} precision\n     *  @returns {boolean}\n     */\n    precisionEquals(that, precision) {\n        return (\n            Math.abs(this.x - that.x) < precision &&\n            Math.abs(this.y - that.y) < precision\n        );\n    }\n\n    /**\n     *  toString\n     *\n     *  @returns {string}\n     */\n    toString() {\n        return `vector(${this.x},${this.y})`;\n    }\n}\n\nexport default Vector2D;\n","/**\n *  Matrix2D.js\n *  @module Matrix2D\n *  @copyright 2001-2019 Kevin Lindsey\n */\n\n/**\n *  Matrix2D\n *\n *  @memberof module:kld-affine\n */\nclass Matrix2D {\n    /**\n     *  A 2D Matrix of the form:<br>\n     *  [a c e]<br>\n     *  [b d f]<br>\n     *  [0 0 1]<br>\n     *\n     *  @param {number} a\n     *  @param {number} b\n     *  @param {number} c\n     *  @param {number} d\n     *  @param {number} e\n     *  @param {number} f\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    constructor(a = 1, b = 0, c = 0, d = 1, e = 0, f = 0) {\n        this.a = a;\n        this.b = b;\n        this.c = c;\n        this.d = d;\n        this.e = e;\n        this.f = f;\n    }\n\n    /**\n     *  translation\n     *\n     *  @param {number} tx\n     *  @param {number} ty\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static translation(tx, ty) {\n        return new Matrix2D(1, 0, 0, 1, tx, ty);\n    }\n\n    /**\n     *  scaling\n     *\n     *  @param {number} scale\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static scaling(scale) {\n        return new Matrix2D(scale, 0, 0, scale, 0, 0);\n    }\n\n    /**\n     *  scalingAt\n     *\n     *  @param {number} scale\n     *  @param {module:kld-affine.Point2D} center\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static scalingAt(scale, center) {\n        return new Matrix2D(\n            scale,\n            0,\n            0,\n            scale,\n            center.x - center.x * scale,\n            center.y - center.y * scale\n        );\n    }\n\n    /**\n     *  nonUniformScaling\n     *\n     *  @param {number} scaleX\n     *  @param {number} scaleY\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static nonUniformScaling(scaleX, scaleY) {\n        return new Matrix2D(scaleX, 0, 0, scaleY, 0, 0);\n    }\n\n    /**\n     *  nonUniformScalingAt\n     *\n     *  @param {number} scaleX\n     *  @param {number} scaleY\n     *  @param {module:kld-affine.Point2D} center\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static nonUniformScalingAt(scaleX, scaleY, center) {\n        return new Matrix2D(\n            scaleX,\n            0,\n            0,\n            scaleY,\n            center.x - center.x * scaleX,\n            center.y - center.y * scaleY\n        );\n    }\n\n    /**\n     *  rotation\n     *\n     *  @param {number} radians\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static rotation(radians) {\n        const c = Math.cos(radians);\n        const s = Math.sin(radians);\n\n        return new Matrix2D(c, s, -s, c, 0, 0);\n    }\n\n    /**\n     *  rotationAt\n     *\n     *  @param {number} radians\n     *  @param {module:kld-affine.Point2D} center\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static rotationAt(radians, center) {\n        const c = Math.cos(radians);\n        const s = Math.sin(radians);\n\n        return new Matrix2D(\n            c,\n            s,\n            -s,\n            c,\n            center.x - center.x * c + center.y * s,\n            center.y - center.y * c - center.x * s\n        );\n    }\n\n    /**\n     *  rotationFromVector\n     *\n     *  @param {module:kld-affine.Vector2D} vector\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static rotationFromVector(vector) {\n        const unit = vector.unit();\n        const c = unit.x; // cos\n        const s = unit.y; // sin\n\n        return new Matrix2D(c, s, -s, c, 0, 0);\n    }\n\n    /**\n     *  xFlip\n     *\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static xFlip() {\n        return new Matrix2D(-1, 0, 0, 1, 0, 0);\n    }\n\n    /**\n     *  yFlip\n     *\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static yFlip() {\n        return new Matrix2D(1, 0, 0, -1, 0, 0);\n    }\n\n    /**\n     *  xSkew\n     *\n     *  @param {number} radians\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static xSkew(radians) {\n        const t = Math.tan(radians);\n\n        return new Matrix2D(1, 0, t, 1, 0, 0);\n    }\n\n    /**\n     *  ySkew\n     *\n     *  @param {number} radians\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    static ySkew(radians) {\n        const t = Math.tan(radians);\n\n        return new Matrix2D(1, t, 0, 1, 0, 0);\n    }\n\n    /**\n     *  multiply\n     *\n     *  @param {module:kld-affine.Matrix2D} that\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    multiply(that) {\n        if (this.isIdentity()) {\n            return that;\n        }\n\n        if (that.isIdentity()) {\n            return this;\n        }\n\n        return new this.constructor(\n            this.a * that.a + this.c * that.b,\n            this.b * that.a + this.d * that.b,\n            this.a * that.c + this.c * that.d,\n            this.b * that.c + this.d * that.d,\n            this.a * that.e + this.c * that.f + this.e,\n            this.b * that.e + this.d * that.f + this.f\n        );\n    }\n\n    /**\n     *  inverse\n     *\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    inverse() {\n        if (this.isIdentity()) {\n            return this;\n        }\n\n        const det1 = this.a * this.d - this.b * this.c;\n\n        if (det1 === 0.0) {\n            throw new Error(\"Matrix is not invertible\");\n        }\n\n        const idet = 1.0 / det1;\n        const det2 = this.f * this.c - this.e * this.d;\n        const det3 = this.e * this.b - this.f * this.a;\n\n        return new this.constructor(\n            this.d * idet,\n            -this.b * idet,\n            -this.c * idet,\n            this.a * idet,\n            det2 * idet,\n            det3 * idet\n        );\n    }\n\n    /**\n     *  translate\n     *\n     *  @param {number} tx\n     *  @param {number} ty\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    translate(tx, ty) {\n        return new this.constructor(\n            this.a,\n            this.b,\n            this.c,\n            this.d,\n            this.a * tx + this.c * ty + this.e,\n            this.b * tx + this.d * ty + this.f\n        );\n    }\n\n    /**\n     *  scale\n     *\n     *  @param {number} scale\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    scale(scale) {\n        return new this.constructor(\n            this.a * scale,\n            this.b * scale,\n            this.c * scale,\n            this.d * scale,\n            this.e,\n            this.f\n        );\n    }\n\n    /**\n     *  scaleAt\n     *\n     *  @param {number} scale\n     *  @param {module:kld-affine.Point2D} center\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    scaleAt(scale, center) {\n        const dx = center.x - scale * center.x;\n        const dy = center.y - scale * center.y;\n\n        return new this.constructor(\n            this.a * scale,\n            this.b * scale,\n            this.c * scale,\n            this.d * scale,\n            this.a * dx + this.c * dy + this.e,\n            this.b * dx + this.d * dy + this.f\n        );\n    }\n\n    /**\n     *  scaleNonUniform\n     *\n     *  @param {number} scaleX\n     *  @param {number} scaleY\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    scaleNonUniform(scaleX, scaleY) {\n        return new this.constructor(\n            this.a * scaleX,\n            this.b * scaleX,\n            this.c * scaleY,\n            this.d * scaleY,\n            this.e,\n            this.f\n        );\n    }\n\n    /**\n     *  scaleNonUniformAt\n     *\n     *  @param {number} scaleX\n     *  @param {number} scaleY\n     *  @param {module:kld-affine.Point2D} center\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    scaleNonUniformAt(scaleX, scaleY, center) {\n        const dx = center.x - scaleX * center.x;\n        const dy = center.y - scaleY * center.y;\n\n        return new this.constructor(\n            this.a * scaleX,\n            this.b * scaleX,\n            this.c * scaleY,\n            this.d * scaleY,\n            this.a * dx + this.c * dy + this.e,\n            this.b * dx + this.d * dy + this.f\n        );\n    }\n\n    /**\n     *  rotate\n     *\n     *  @param {number} radians\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    rotate(radians) {\n        const c = Math.cos(radians);\n        const s = Math.sin(radians);\n\n        return new this.constructor(\n            this.a * c + this.c * s,\n            this.b * c + this.d * s,\n            this.a * -s + this.c * c,\n            this.b * -s + this.d * c,\n            this.e,\n            this.f\n        );\n    }\n\n    /**\n     *  rotateAt\n     *\n     *  @param {number} radians\n     *  @param {module:kld-affine.Point2D} center\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    rotateAt(radians, center) {\n        const cos = Math.cos(radians);\n        const sin = Math.sin(radians);\n        const cx = center.x;\n        const cy = center.y;\n\n        const a = this.a * cos + this.c * sin;\n        const b = this.b * cos + this.d * sin;\n        const c = this.c * cos - this.a * sin;\n        const d = this.d * cos - this.b * sin;\n\n        return new this.constructor(\n            a,\n            b,\n            c,\n            d,\n            (this.a - a) * cx + (this.c - c) * cy + this.e,\n            (this.b - b) * cx + (this.d - d) * cy + this.f\n        );\n    }\n\n    /**\n     *  rotateFromVector\n     *\n     *  @param {module:kld-affine.Vector2D} vector\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    rotateFromVector(vector) {\n        const unit = vector.unit();\n        const c = unit.x; // cos\n        const s = unit.y; // sin\n\n        return new this.constructor(\n            this.a * c + this.c * s,\n            this.b * c + this.d * s,\n            this.a * -s + this.c * c,\n            this.b * -s + this.d * c,\n            this.e,\n            this.f\n        );\n    }\n\n    /**\n     *  flipX\n     *\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    flipX() {\n        return new this.constructor(\n            -this.a,\n            -this.b,\n            this.c,\n            this.d,\n            this.e,\n            this.f\n        );\n    }\n\n    /**\n     *  flipY\n     *\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    flipY() {\n        return new this.constructor(\n            this.a,\n            this.b,\n            -this.c,\n            -this.d,\n            this.e,\n            this.f\n        );\n    }\n\n    /**\n     *  skewX\n     *\n     *  @param {number} radians\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    skewX(radians) {\n        const t = Math.tan(radians);\n\n        return new this.constructor(\n            this.a,\n            this.b,\n            this.c + this.a * t,\n            this.d + this.b * t,\n            this.e,\n            this.f\n        );\n    }\n\n    // TODO: skewXAt\n\n    /**\n     *  skewY\n     *\n     *  @param {number} radians\n     *  @returns {module:kld-affine.Matrix2D}\n     */\n    skewY(radians) {\n        const t = Math.tan(radians);\n\n        return new this.constructor(\n            this.a + this.c * t,\n            this.b + this.d * t,\n            this.c,\n            this.d,\n            this.e,\n            this.f\n        );\n    }\n\n    // TODO: skewYAt\n\n    /**\n     *  isIdentity\n     *\n     *  @returns {boolean}\n     */\n    isIdentity() {\n        return (\n            this.a === 1.0 &&\n            this.b === 0.0 &&\n            this.c === 0.0 &&\n            this.d === 1.0 &&\n            this.e === 0.0 &&\n            this.f === 0.0\n        );\n    }\n\n    /**\n     *  isInvertible\n     *\n     *  @returns {boolean}\n     */\n    isInvertible() {\n        return this.a * this.d - this.b * this.c !== 0.0;\n    }\n\n    /**\n     *  getScale\n     *\n     *  @returns {{ scaleX: number, scaleY: number }}\n     */\n    getScale() {\n        return {\n            scaleX: Math.sqrt(this.a * this.a + this.c * this.c),\n            scaleY: Math.sqrt(this.b * this.b + this.d * this.d)\n        };\n    }\n\n    /**\n     *  Calculates matrix Singular Value Decomposition\n     *\n     *  The resulting matrices — translation, rotation, scale, and rotation0 — return\n     *  this matrix when they are multiplied together in the listed order\n     *\n     *  @see Jim Blinn's article {@link http://dx.doi.org/10.1109/38.486688}\n     *  @see {@link http://math.stackexchange.com/questions/861674/decompose-a-2d-arbitrary-transform-into-only-scaling-and-rotation}\n     *\n     *  @returns {{\n     *    translation: module:kld-affine.Matrix2D,\n     *    rotation: module:kld-affine.Matrix2D,\n     *    scale: module:kld-affine.Matrix2D,\n     *    rotation0: module:kld-affine.Matrix2D\n     *  }}\n     */\n    getDecomposition() {\n        const E = (this.a + this.d) * 0.5;\n        const F = (this.a - this.d) * 0.5;\n        const G = (this.b + this.c) * 0.5;\n        const H = (this.b - this.c) * 0.5;\n\n        const Q = Math.sqrt(E * E + H * H);\n        const R = Math.sqrt(F * F + G * G);\n        const scaleX = Q + R;\n        const scaleY = Q - R;\n\n        const a1 = Math.atan2(G, F);\n        const a2 = Math.atan2(H, E);\n        const theta = (a2 - a1) * 0.5;\n        const phi = (a2 + a1) * 0.5;\n\n        return {\n            translation: this.constructor.translation(this.e, this.f),\n            rotation: this.constructor.rotation(phi),\n            scale: this.constructor.nonUniformScaling(scaleX, scaleY),\n            rotation0: this.constructor.rotation(theta)\n        };\n    }\n\n    /**\n     *  equals\n     *\n     *  @param {module:kld-affine.Matrix2D} that\n     *  @returns {boolean}\n     */\n    equals(that) {\n        return (\n            this.a === that.a &&\n            this.b === that.b &&\n            this.c === that.c &&\n            this.d === that.d &&\n            this.e === that.e &&\n            this.f === that.f\n        );\n    }\n\n    /**\n     *  precisionEquals\n     *\n     *  @param {module:kld-affine.Matrix2D} that\n     *  @param {number} precision\n     *  @returns {boolean}\n     */\n    precisionEquals(that, precision) {\n        return (\n            Math.abs(this.a - that.a) < precision &&\n            Math.abs(this.b - that.b) < precision &&\n            Math.abs(this.c - that.c) < precision &&\n            Math.abs(this.d - that.d) < precision &&\n            Math.abs(this.e - that.e) < precision &&\n            Math.abs(this.f - that.f) < precision\n        );\n    }\n\n    /**\n     *  toString\n     *\n     *  @returns {string}\n     */\n    toString() {\n        return `matrix(${this.a},${this.b},${this.c},${this.d},${this.e},${this.f})`;\n    }\n}\n\n/**\n *  Identity matrix\n *\n *  @returns {module:kld-affine.Matrix2D}\n */\nMatrix2D.IDENTITY = new Matrix2D();\nMatrix2D.IDENTITY.isIdentity = () => true;\n\n\nexport default Matrix2D;\n","/* eslint-disable camelcase */\n/**\n *  Polynomial.js\n *\n *  @module Polynomial\n *  @copyright 2002-2019 Kevin Lindsey<br>\n *  -<br>\n *  Contribution {@link http://github.com/Quazistax/kld-polynomial}<br>\n *  copyright 2015 Robert Benko (Quazistax) <quazistax@gmail.com><br>\n *  MIT license\n */\n\n/**\n *  Sign of a number (+1, -1, +0, -0).\n *\n *  @param {number} x\n *  @returns {number}\n */\nfunction sign(x) {\n    // eslint-disable-next-line no-self-compare\n    return typeof x === \"number\" ? x ? x < 0 ? -1 : 1 : x === x ? x : NaN : NaN;\n}\n\n/**\n *  Polynomial\n *\n *  @memberof module:kld-polynomial\n */\nclass Polynomial {\n    /**\n     *  Polynomial\n     *\n     *  @param {Array<number>} coefs\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    constructor(...coefs) {\n        this.coefs = [];\n\n        for (let i = coefs.length - 1; i >= 0; i--) {\n            this.coefs.push(coefs[i]);\n        }\n\n        this._variable = \"t\";\n        this._s = 0;\n    }\n\n    /**\n     *  Based on polint in \"Numerical Recipes in C, 2nd Edition\", pages 109-110\n     *\n     *  @param {Array<number>} xs\n     *  @param {Array<number>} ys\n     *  @param {number} n\n     *  @param {number} offset\n     *  @param {number} x\n     *\n     *  @returns {{y: number, dy: number}}\n     */\n    static interpolate(xs, ys, n, offset, x) {\n        if (xs.constructor !== Array || ys.constructor !== Array) {\n            throw new TypeError(\"xs and ys must be arrays\");\n        }\n        if (isNaN(n) || isNaN(offset) || isNaN(x)) {\n            throw new TypeError(\"n, offset, and x must be numbers\");\n        }\n\n        let i, y;\n        let dy = 0;\n        const c = new Array(n);\n        const d = new Array(n);\n        let ns = 0;\n\n        let diff = Math.abs(x - xs[offset]);\n\n        for (i = 0; i < n; i++) {\n            const dift = Math.abs(x - xs[offset + i]);\n\n            if (dift < diff) {\n                ns = i;\n                diff = dift;\n            }\n            c[i] = d[i] = ys[offset + i];\n        }\n\n        y = ys[offset + ns];\n        ns--;\n\n        for (let m = 1; m < n; m++) {\n            for (i = 0; i < n - m; i++) {\n                const ho = xs[offset + i] - x;\n                const hp = xs[offset + i + m] - x;\n                const w = c[i + 1] - d[i];\n                let den = ho - hp;\n\n                if (den === 0.0) {\n                    throw new RangeError(\"Unable to interpolate polynomial. Two numbers in n were identical (to within roundoff)\");\n                }\n\n                den = w / den;\n                d[i] = hp * den;\n                c[i] = ho * den;\n            }\n\n            dy = (2 * (ns + 1) < (n - m)) ? c[ns + 1] : d[ns--];\n            y += dy;\n        }\n\n        return {y, dy};\n    }\n\n    /**\n     *  Newton's (Newton-Raphson) method for finding Real roots on univariate function. <br/>\n     *  When using bounds, algorithm falls back to secant if newton goes out of range.\n     *  Bisection is fallback for secant when determined secant is not efficient enough.\n     *  @see {@link http://en.wikipedia.org/wiki/Newton%27s_method}\n     *  @see {@link http://en.wikipedia.org/wiki/Secant_method}\n     *  @see {@link http://en.wikipedia.org/wiki/Bisection_method}\n     *\n     *  @param {number} x0 - Initial root guess\n     *  @param {Function} f - Function which root we are trying to find\n     *  @param {Function} df - Derivative of function f\n     *  @param {number} max_iterations - Maximum number of algorithm iterations\n     *  @param {number} [min] - Left bound value\n     *  @param {number} [max] - Right bound value\n     *  @returns {number} root\n     */\n    static newtonSecantBisection(x0, f, df, max_iterations, min, max) {\n        let x, prev_dfx = 0, dfx, prev_x_ef_correction = 0, x_correction, x_new;\n        let y, y_atmin, y_atmax;\n\n        x = x0;\n\n        const ACCURACY = 14;\n        const min_correction_factor = Math.pow(10, -ACCURACY);\n        const isBounded = (typeof min === \"number\" && typeof max === \"number\");\n\n        if (isBounded) {\n            if (min > max) {\n                throw new RangeError(\"Min must be greater than max\");\n            }\n\n            y_atmin = f(min);\n            y_atmax = f(max);\n\n            if (sign(y_atmin) === sign(y_atmax)) {\n                throw new RangeError(\"Y values of bounds must be of opposite sign\");\n            }\n        }\n\n        const isEnoughCorrection = function() {\n            // stop if correction is too small or if correction is in simple loop\n            return (Math.abs(x_correction) <= min_correction_factor * Math.abs(x)) ||\n                (prev_x_ef_correction === (x - x_correction) - x);\n        };\n\n        for (let i = 0; i < max_iterations; i++) {\n            dfx = df(x);\n\n            if (dfx === 0) {\n                if (prev_dfx === 0) {\n                    // error\n                    throw new RangeError(\"df(x) is zero\");\n                }\n                else {\n                    // use previous derivation value\n                    dfx = prev_dfx;\n                }\n                // or move x a little?\n                // dfx = df(x != 0 ? x + x * 1e-15 : 1e-15);\n            }\n\n            prev_dfx = dfx;\n            y = f(x);\n            x_correction = y / dfx;\n            x_new = x - x_correction;\n\n            if (isEnoughCorrection()) {\n                break;\n            }\n\n            if (isBounded) {\n                if (sign(y) === sign(y_atmax)) {\n                    max = x;\n                    y_atmax = y;\n                }\n                else if (sign(y) === sign(y_atmin)) {\n                    min = x;\n                    y_atmin = y;\n                }\n                else {\n                    x = x_new;\n                    break;\n                }\n\n                if ((x_new < min) || (x_new > max)) {\n                    if (sign(y_atmin) === sign(y_atmax)) {\n                        break;\n                    }\n\n                    const RATIO_LIMIT = 50;\n                    const AIMED_BISECT_OFFSET = 0.25; // [0, 0.5)\n                    const dy = y_atmax - y_atmin;\n                    const dx = max - min;\n\n                    if (dy === 0) {\n                        x_correction = x - (min + dx * 0.5);\n                    }\n                    else if (Math.abs(dy / Math.min(y_atmin, y_atmax)) > RATIO_LIMIT) {\n                        x_correction = x - (min + dx * (0.5 + (Math.abs(y_atmin) < Math.abs(y_atmax) ? -AIMED_BISECT_OFFSET : AIMED_BISECT_OFFSET)));\n                    }\n                    else {\n                        x_correction = x - (min - y_atmin / dy * dx);\n                    }\n                    x_new = x - x_correction;\n\n                    if (isEnoughCorrection()) {\n                        break;\n                    }\n                }\n            }\n\n            prev_x_ef_correction = x - x_new;\n            x = x_new;\n        }\n\n        return x;\n    }\n\n    /**\n     *  Clones this polynomial and return the clone.\n     *\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    clone() {\n        const poly = new Polynomial();\n\n        poly.coefs = this.coefs.slice();\n\n        return poly;\n    }\n\n    /**\n     *  eval\n     *\n     *  @param {number} x\n     */\n    eval(x) {\n        if (isNaN(x)) {\n            throw new TypeError(`Parameter must be a number. Found '${x}'`);\n        }\n\n        let result = 0;\n\n        for (let i = this.coefs.length - 1; i >= 0; i--) {\n            result = result * x + this.coefs[i];\n        }\n\n        return result;\n    }\n\n    /**\n     *  add\n     *\n     *  @param {module:kld-polynomial.Polynomial} that\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    add(that) {\n        const result = new Polynomial();\n        const d1 = this.getDegree();\n        const d2 = that.getDegree();\n        const dmax = Math.max(d1, d2);\n\n        for (let i = 0; i <= dmax; i++) {\n            const v1 = (i <= d1) ? this.coefs[i] : 0;\n            const v2 = (i <= d2) ? that.coefs[i] : 0;\n\n            result.coefs[i] = v1 + v2;\n        }\n\n        return result;\n    }\n\n    /**\n     *  multiply\n     *\n     *  @param {module:kld-polynomial.Polynomial} that\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    multiply(that) {\n        const result = new Polynomial();\n\n        for (let i = 0; i <= this.getDegree() + that.getDegree(); i++) {\n            result.coefs.push(0);\n        }\n\n        for (let i = 0; i <= this.getDegree(); i++) {\n            for (let j = 0; j <= that.getDegree(); j++) {\n                result.coefs[i + j] += this.coefs[i] * that.coefs[j];\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  divideEqualsScalar\n     *\n     *  @deprecated To be replaced by divideScalar\n     *  @param {number} scalar\n     */\n    divideEqualsScalar(scalar) {\n        for (let i = 0; i < this.coefs.length; i++) {\n            this.coefs[i] /= scalar;\n        }\n    }\n\n    /**\n     *  simplifyEquals\n     *\n     *  @deprecated To be replaced by simplify\n     *  @param {number} TOLERANCE\n     */\n    simplifyEquals(TOLERANCE = 1e-12) {\n        for (let i = this.getDegree(); i >= 0; i--) {\n            if (Math.abs(this.coefs[i]) <= TOLERANCE) {\n                this.coefs.pop();\n            }\n            else {\n                break;\n            }\n        }\n    }\n\n    /**\n     *  Sets small coefficients to zero.\n     *\n     *  @deprecated To be replaced by removeZeros\n     *  @param {number} TOLERANCE\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    removeZerosEquals(TOLERANCE = 1e-15) {\n        const c = this.coefs;\n        const err = 10 * TOLERANCE * Math.abs(\n            c.reduce((pv, cv) => {\n                return Math.abs(cv) > Math.abs(pv) ? cv : pv;\n            })\n        );\n\n        for (let i = 0; i < c.length - 1; i++) {\n            if (Math.abs(c[i]) < err) {\n                c[i] = 0;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     *  Scales polynomial so that leading coefficient becomes 1.\n     *\n     *  @deprecated To be replaced by getMonic\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    monicEquals() {\n        const c = this.coefs;\n\n        if (c[c.length - 1] !== 1) {\n            this.divideEqualsScalar(c[c.length - 1]);\n        }\n\n        return this;\n    }\n\n    /**\n     *  toString\n     *\n     *  @returns {string}\n     */\n    toString() {\n        const coefs = [];\n        const signs = [];\n\n        for (let i = this.coefs.length - 1; i >= 0; i--) {\n            let value = Math.round(this.coefs[i] * 1000) / 1000;\n\n            if (value !== 0) {\n                const signString = (value < 0) ? \" - \" : \" + \";\n\n                value = Math.abs(value);\n\n                if (i > 0) {\n                    if (value === 1) {\n                        value = this._variable;\n                    }\n                    else {\n                        value += this._variable;\n                    }\n                }\n\n                if (i > 1) {\n                    value += \"^\" + i;\n                }\n\n                signs.push(signString);\n                coefs.push(value);\n            }\n        }\n\n        signs[0] = (signs[0] === \" + \") ? \"\" : \"-\";\n\n        let result = \"\";\n\n        for (let i = 0; i < coefs.length; i++) {\n            result += signs[i] + coefs[i];\n        }\n\n        return result;\n    }\n\n    /**\n     *  bisection\n     *\n     *  @param {number} min\n     *  @param {number} max\n     *  @param {number} [TOLERANCE]\n     *  @param {number} [ACCURACY]\n     *  @returns {number}\n     */\n    bisection(min, max, TOLERANCE = 1e-6, ACCURACY = 15) {\n        let minValue = this.eval(min);\n        let maxValue = this.eval(max);\n        let result;\n\n        if (Math.abs(minValue) <= TOLERANCE) {\n            result = min;\n        }\n        else if (Math.abs(maxValue) <= TOLERANCE) {\n            result = max;\n        }\n        else if (minValue * maxValue <= 0) {\n            const tmp1 = Math.log(max - min);\n            const tmp2 = Math.LN10 * ACCURACY;\n            const maxIterations = Math.ceil((tmp1 + tmp2) / Math.LN2);\n\n            for (let i = 0; i < maxIterations; i++) {\n                result = 0.5 * (min + max);\n                const value = this.eval(result);\n\n                if (Math.abs(value) <= TOLERANCE) {\n                    break;\n                }\n\n                if (value * minValue < 0) {\n                    max = result;\n                    maxValue = value;\n                }\n                else {\n                    min = result;\n                    minValue = value;\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  Based on trapzd in \"Numerical Recipes in C, 2nd Edition\", page 137\n     *\n     *  @param {number} min\n     *  @param {number} max\n     *  @param {number} n\n     *  @returns {number}\n     */\n    trapezoid(min, max, n) {\n        if (isNaN(min) || isNaN(max) || isNaN(n)) {\n            throw new TypeError(\"Parameters must be numbers\");\n        }\n\n        const range = max - min;\n\n        if (n === 1) {\n            const minValue = this.eval(min);\n            const maxValue = this.eval(max);\n\n            this._s = 0.5 * range * (minValue + maxValue);\n        }\n        else {\n            const iter = 1 << (n - 2);\n            const delta = range / iter;\n            let x = min + 0.5 * delta;\n            let sum = 0;\n\n            for (let i = 0; i < iter; i++) {\n                sum += this.eval(x);\n                x += delta;\n            }\n\n            this._s = 0.5 * (this._s + range * sum / iter);\n        }\n\n        if (isNaN(this._s)) {\n            throw new TypeError(\"this._s is NaN\");\n        }\n\n        return this._s;\n    }\n\n    /**\n     *  Based on trapzd in \"Numerical Recipes in C, 2nd Edition\", page 139\n     *\n     *  @param {number} min\n     *  @param {number} max\n     *  @returns {number}\n     */\n    simpson(min, max) {\n        if (isNaN(min) || isNaN(max)) {\n            throw new TypeError(\"Parameters must be numbers\");\n        }\n\n        const range = max - min;\n        let st = 0.5 * range * (this.eval(min) + this.eval(max));\n        let t = st;\n        let s = 4.0 * st / 3.0;\n        let os = s;\n        let ost = st;\n        const TOLERANCE = 1e-7;\n\n        let iter = 1;\n\n        for (let n = 2; n <= 20; n++) {\n            const delta = range / iter;\n            let x = min + 0.5 * delta;\n            let sum = 0;\n\n            for (let i = 1; i <= iter; i++) {\n                sum += this.eval(x);\n                x += delta;\n            }\n\n            t = 0.5 * (t + range * sum / iter);\n            st = t;\n            s = (4.0 * st - ost) / 3.0;\n\n            if (Math.abs(s - os) < TOLERANCE * Math.abs(os)) {\n                break;\n            }\n\n            os = s;\n            ost = st;\n            iter <<= 1;\n        }\n\n        return s;\n    }\n\n    /**\n     *  romberg\n     *\n     *  @param {number} min\n     *  @param {number} max\n     *  @returns {number}\n     */\n    romberg(min, max) {\n        if (isNaN(min) || isNaN(max)) {\n            throw new TypeError(\"Parameters must be numbers\");\n        }\n\n        const MAX = 20;\n        const K = 3;\n        const TOLERANCE = 1e-6;\n        const s = new Array(MAX + 1);\n        const h = new Array(MAX + 1);\n        let result = {y: 0, dy: 0};\n\n        h[0] = 1.0;\n\n        for (let j = 1; j <= MAX; j++) {\n            s[j - 1] = this.trapezoid(min, max, j);\n\n            if (j >= K) {\n                result = Polynomial.interpolate(h, s, K, j - K, 0.0);\n                if (Math.abs(result.dy) <= TOLERANCE * result.y) {\n                    break;\n                }\n            }\n\n            s[j] = s[j - 1];\n            h[j] = 0.25 * h[j - 1];\n        }\n\n        return result.y;\n    }\n\n    /**\n     *  Estimate what is the maximum polynomial evaluation error value under which polynomial evaluation could be in fact 0.\n     *\n     *  @param {number} maxAbsX\n     *  @returns {number}\n     */\n    zeroErrorEstimate(maxAbsX) {\n        const poly = this;\n        const ERRF = 1e-15;\n\n        if (typeof maxAbsX === \"undefined\") {\n            const rb = poly.bounds();\n\n            maxAbsX = Math.max(Math.abs(rb.minX), Math.abs(rb.maxX));\n        }\n\n        if (maxAbsX < 0.001) {\n            return 2 * Math.abs(poly.eval(ERRF));\n        }\n\n        const n = poly.coefs.length - 1;\n        const an = poly.coefs[n];\n\n        return 10 * ERRF * poly.coefs.reduce((m, v, i) => {\n            const nm = v / an * Math.pow(maxAbsX, i);\n            return nm > m ? nm : m;\n        }, 0);\n    }\n\n    /**\n     *  Calculates upper Real roots bounds. <br/>\n     *  Real roots are in interval [negX, posX]. Determined by Fujiwara method.\n     *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n     *\n     *  @returns {{ negX: number, posX: number }}\n     */\n    boundsUpperRealFujiwara() {\n        let a = this.coefs;\n        const n = a.length - 1;\n        const an = a[n];\n\n        if (an !== 1) {\n            a = this.coefs.map(v => v / an);\n        }\n\n        const b = a.map((v, i) => {\n            return (i < n)\n                ? Math.pow(Math.abs((i === 0) ? v / 2 : v), 1 / (n - i))\n                : v;\n        });\n\n        let coefSelectionFunc;\n        const find2Max = function(acc, bi, i) {\n            if (coefSelectionFunc(i)) {\n                if (acc.max < bi) {\n                    acc.nearmax = acc.max;\n                    acc.max = bi;\n                }\n                else if (acc.nearmax < bi) {\n                    acc.nearmax = bi;\n                }\n            }\n            return acc;\n        };\n\n        coefSelectionFunc = function(i) {\n            return i < n && a[i] < 0;\n        };\n\n        // eslint-disable-next-line unicorn/no-fn-reference-in-iterator\n        const max_nearmax_pos = b.reduce(find2Max, {max: 0, nearmax: 0});\n\n        coefSelectionFunc = function(i) {\n            return i < n && ((n % 2 === i % 2) ? a[i] < 0 : a[i] > 0);\n        };\n\n        // eslint-disable-next-line unicorn/no-fn-reference-in-iterator\n        const max_nearmax_neg = b.reduce(find2Max, {max: 0, nearmax: 0});\n\n        return {\n            negX: -2 * max_nearmax_neg.max,\n            posX: 2 * max_nearmax_pos.max\n        };\n    }\n\n    /**\n     *  Calculates lower Real roots bounds. <br/>\n     *  There are no Real roots in interval <negX, posX>. Determined by Fujiwara method.\n     *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n     *\n     *  @returns {{ negX: number, posX: number }}\n     */\n    boundsLowerRealFujiwara() {\n        const poly = new Polynomial();\n\n        poly.coefs = this.coefs.slice().reverse();\n\n        const res = poly.boundsUpperRealFujiwara();\n\n        res.negX = 1 / res.negX;\n        res.posX = 1 / res.posX;\n\n        return res;\n    }\n\n    /**\n     *  Calculates left and right Real roots bounds. <br/>\n     *  Real roots are in interval [minX, maxX]. Combines Fujiwara lower and upper bounds to get minimal interval.\n     *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n     *\n     *  @returns {{ minX: number, maxX: number }}\n    */\n    bounds() {\n        const urb = this.boundsUpperRealFujiwara();\n        const rb = {minX: urb.negX, maxX: urb.posX};\n\n        if (urb.negX === 0 && urb.posX === 0) {\n            return rb;\n        }\n\n        if (urb.negX === 0) {\n            rb.minX = this.boundsLowerRealFujiwara().posX;\n        }\n        else if (urb.posX === 0) {\n            rb.maxX = this.boundsLowerRealFujiwara().negX;\n        }\n\n        if (rb.minX > rb.maxX) {\n            rb.minX = rb.maxX = 0;\n        }\n\n        return rb;\n        // TODO: if sure that there are no complex roots\n        // (maybe by using Sturm's theorem) use:\n        // return this.boundsRealLaguerre();\n    }\n\n    /**\n     *  Calculates absolute upper roots bound. <br/>\n     *  All (Complex and Real) roots magnitudes are &lt;= result. Determined by Rouche method.\n     *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n     *\n     *  @returns {number}\n     */\n    boundUpperAbsRouche() {\n        const a = this.coefs;\n        const n = a.length - 1;\n        const max = a.reduce((prev, curr, i) => {\n            if (i !== n) {\n                curr = Math.abs(curr);\n                return (prev < curr) ? curr : prev;\n            }\n            return prev;\n        }, 0);\n\n        return 1 + max / Math.abs(a[n]);\n    }\n\n    /**\n     *  Calculates absolute lower roots bound. <br/>\n     *  All (Complex and Real) roots magnitudes are &gt;= result. Determined by Rouche method.\n     *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n     *\n     *  @returns {number}\n     */\n    boundLowerAbsRouche() {\n        const a = this.coefs;\n        const max = a.reduce((prev, curr, i) => {\n            if (i !== 0) {\n                curr = Math.abs(curr);\n                return (prev < curr) ? curr : prev;\n            }\n            return prev;\n        }, 0);\n\n        return Math.abs(a[0]) / (Math.abs(a[0]) + max);\n    }\n\n    /**\n     *  Calculates left and right Real roots bounds.<br/>\n     *  WORKS ONLY if all polynomial roots are Real.\n     *  Real roots are in interval [minX, maxX]. Determined by Laguerre method.\n     *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n     *\n     *  @returns {{ minX: number, maxX: number }}\n     */\n    boundsRealLaguerre() {\n        const a = this.coefs;\n        const n = a.length - 1;\n        const p1 = -a[n - 1] / (n * a[n]);\n        const undersqrt = a[n - 1] * a[n - 1] - 2 * n / (n - 1) * a[n] * a[n - 2];\n        let p2 = (n - 1) / (n * a[n]) * Math.sqrt(undersqrt);\n\n        if (p2 < 0) {\n            p2 = -p2;\n        }\n\n        return {\n            minX: p1 - p2,\n            maxX: p1 + p2\n        };\n    }\n\n    /**\n     *  Root count by Descartes rule of signs. <br/>\n     *  Returns maximum number of positive and negative real roots and minimum number of complex roots.\n     *  @see {@link http://en.wikipedia.org/wiki/Descartes%27_rule_of_signs}\n     *\n     *  @returns {{maxRealPos: number, maxRealNeg: number, minComplex: number}}\n     */\n    countRootsDescartes() {\n        const a = this.coefs;\n        const n = a.length - 1;\n        const accum = a.reduce((acc, ai, i) => {\n            if (acc.prev_a !== 0 && ai !== 0) {\n                if ((acc.prev_a < 0) === (ai > 0)) {\n                    acc.pos++;\n                }\n                if (((i % 2 === 0) !== (acc.prev_a < 0)) === ((i % 2 === 1) !== (ai > 0))) {\n                    acc.neg++;\n                }\n            }\n            acc.prev_a = ai;\n            return acc;\n        }, {pos: 0, neg: 0, prev_a: 0});\n\n        return {\n            maxRealPos: accum.pos,\n            maxRealNeg: accum.neg,\n            minComplex: n - (accum.pos + accum.neg)\n        };\n    }\n\n    // getters and setters\n\n    /**\n     *  get degree\n     *\n     *  @returns {number}\n     */\n    getDegree() {\n        return this.coefs.length - 1;\n    }\n\n    /**\n     *  getDerivative\n     *\n     *  @returns {module:kld-polynomial.Polynomial}\n     */\n    getDerivative() {\n        const derivative = new Polynomial();\n\n        for (let i = 1; i < this.coefs.length; i++) {\n            derivative.coefs.push(i * this.coefs[i]);\n        }\n\n        return derivative;\n    }\n\n    /**\n     *  getRoots\n     *\n     *  @returns {Array<number>}\n     */\n    getRoots() {\n        let result;\n\n        this.simplifyEquals();\n\n        switch (this.getDegree()) {\n            case 0: result = []; break;\n            case 1: result = this.getLinearRoot(); break;\n            case 2: result = this.getQuadraticRoots(); break;\n            case 3: result = this.getCubicRoots(); break;\n            case 4: result = this.getQuarticRoots(); break;\n            default:\n                result = [];\n        }\n\n        return result;\n    }\n\n    /**\n     *  getRootsInInterval\n     *\n     *  @param {number} min\n     *  @param {number} max\n     *  @returns {Array<number>}\n     */\n    getRootsInInterval(min, max) {\n        const roots = [];\n\n        /**\n         *  @param {number} value\n         */\n        function push(value) {\n            if (typeof value === \"number\") {\n                roots.push(value);\n            }\n        }\n\n        if (this.getDegree() === 0) {\n            throw new RangeError(\"Unexpected empty polynomial\");\n        }\n        else if (this.getDegree() === 1) {\n            push(this.bisection(min, max));\n        }\n        else {\n            // get roots of derivative\n            const deriv = this.getDerivative();\n            const droots = deriv.getRootsInInterval(min, max);\n\n            if (droots.length > 0) {\n                // find root on [min, droots[0]]\n                push(this.bisection(min, droots[0]));\n\n                // find root on [droots[i],droots[i+1]] for 0 <= i <= count-2\n                for (let i = 0; i <= droots.length - 2; i++) {\n                    push(this.bisection(droots[i], droots[i + 1]));\n                }\n\n                // find root on [droots[count-1],xmax]\n                push(this.bisection(droots[droots.length - 1], max));\n            }\n            else {\n                // polynomial is monotone on [min,max], has at most one root\n                push(this.bisection(min, max));\n            }\n        }\n\n        return roots;\n    }\n\n    /**\n     *  getLinearRoot\n     *\n     *  @returns {number}\n     */\n    getLinearRoot() {\n        const result = [];\n        const a = this.coefs[1];\n\n        if (a !== 0) {\n            result.push(-this.coefs[0] / a);\n        }\n\n        return result;\n    }\n\n    /**\n     *  getQuadraticRoots\n     *\n     *  @returns {Array<number>}\n     */\n    getQuadraticRoots() {\n        const results = [];\n\n        if (this.getDegree() === 2) {\n            const a = this.coefs[2];\n            const b = this.coefs[1] / a;\n            const c = this.coefs[0] / a;\n            const d = b * b - 4 * c;\n\n            if (d > 0) {\n                const e = Math.sqrt(d);\n\n                results.push(0.5 * (-b + e));\n                results.push(0.5 * (-b - e));\n            }\n            else if (d === 0) {\n                // really two roots with same value, but we only return one\n                results.push(0.5 * -b);\n            }\n            // else imaginary results\n        }\n\n        return results;\n    }\n\n    /**\n     *  getCubicRoots\n     *\n     *  This code is based on MgcPolynomial.cpp written by David Eberly.  His\n     *  code along with many other excellent examples are avaiable at his site:\n     *  http://www.geometrictools.com\n     *\n     *  @returns {Array<number>}\n     */\n    getCubicRoots() {\n        const results = [];\n\n        if (this.getDegree() === 3) {\n            const c3 = this.coefs[3];\n            const c2 = this.coefs[2] / c3;\n            const c1 = this.coefs[1] / c3;\n            const c0 = this.coefs[0] / c3;\n\n            const a = (3 * c1 - c2 * c2) / 3;\n            const b = (2 * c2 * c2 * c2 - 9 * c1 * c2 + 27 * c0) / 27;\n            const offset = c2 / 3;\n            let discrim = b * b / 4 + a * a * a / 27;\n            const halfB = b / 2;\n\n            const ZEROepsilon = this.zeroErrorEstimate();\n\n            if (Math.abs(discrim) <= ZEROepsilon) {\n                discrim = 0;\n            }\n\n            if (discrim > 0) {\n                const e = Math.sqrt(discrim);\n                let root; // eslint-disable-line no-shadow\n\n                let tmp = -halfB + e;\n\n                if (tmp >= 0) {\n                    root = Math.pow(tmp, 1 / 3);\n                }\n                else {\n                    root = -Math.pow(-tmp, 1 / 3);\n                }\n\n                tmp = -halfB - e;\n\n                if (tmp >= 0) {\n                    root += Math.pow(tmp, 1 / 3);\n                }\n                else {\n                    root -= Math.pow(-tmp, 1 / 3);\n                }\n\n                results.push(root - offset);\n            }\n            else if (discrim < 0) {\n                const distance = Math.sqrt(-a / 3);\n                const angle = Math.atan2(Math.sqrt(-discrim), -halfB) / 3;\n                const cos = Math.cos(angle);\n                const sin = Math.sin(angle);\n                const sqrt3 = Math.sqrt(3);\n\n                results.push(2 * distance * cos - offset);\n                results.push(-distance * (cos + sqrt3 * sin) - offset);\n                results.push(-distance * (cos - sqrt3 * sin) - offset);\n            }\n            else {\n                let tmp;\n\n                if (halfB >= 0) {\n                    tmp = -Math.pow(halfB, 1 / 3);\n                }\n                else {\n                    tmp = Math.pow(-halfB, 1 / 3);\n                }\n\n                results.push(2 * tmp - offset);\n                // really should return next root twice, but we return only one\n                results.push(-tmp - offset);\n            }\n        }\n\n        return results;\n    }\n\n    /**\n     *  Calculates roots of quartic polynomial. <br/>\n     *  First, derivative roots are found, then used to split quartic polynomial\n     *  into segments, each containing one root of quartic polynomial.\n     *  Segments are then passed to newton's method to find roots.\n     *\n     *  @returns {Array<number>} roots\n     */\n    getQuarticRoots() {\n        let results = [];\n        const n = this.getDegree();\n\n        if (n === 4) {\n            const poly = new Polynomial();\n\n            poly.coefs = this.coefs.slice();\n            poly.divideEqualsScalar(poly.coefs[n]);\n\n            const ERRF = 1e-15;\n\n            if (Math.abs(poly.coefs[0]) < 10 * ERRF * Math.abs(poly.coefs[3])) {\n                poly.coefs[0] = 0;\n            }\n\n            const poly_d = poly.getDerivative();\n            const derrt = poly_d.getRoots().sort((a, b) => a - b);\n            const dery = [];\n            const nr = derrt.length - 1;\n            const rb = this.bounds();\n\n            const maxabsX = Math.max(Math.abs(rb.minX), Math.abs(rb.maxX));\n            const ZEROepsilon = this.zeroErrorEstimate(maxabsX);\n\n            for (let i = 0; i <= nr; i++) {\n                dery.push(poly.eval(derrt[i]));\n            }\n\n            for (let i = 0; i <= nr; i++) {\n                if (Math.abs(dery[i]) < ZEROepsilon) {\n                    dery[i] = 0;\n                }\n            }\n\n            let i = 0;\n            const dx = Math.max(0.1 * (rb.maxX - rb.minX) / n, ERRF);\n            const guesses = [];\n            const minmax = [];\n\n            if (nr > -1) {\n                if (dery[0] !== 0) {\n                    if (sign(dery[0]) !== sign(poly.eval(derrt[0] - dx) - dery[0])) {\n                        guesses.push(derrt[0] - dx);\n                        minmax.push([rb.minX, derrt[0]]);\n                    }\n                }\n                else {\n                    results.push(derrt[0], derrt[0]);\n                    i++;\n                }\n\n                for (; i < nr; i++) {\n                    if (dery[i + 1] === 0) {\n                        results.push(derrt[i + 1], derrt[i + 1]);\n                        i++;\n                    }\n                    else if (sign(dery[i]) !== sign(dery[i + 1])) {\n                        guesses.push((derrt[i] + derrt[i + 1]) / 2);\n                        minmax.push([derrt[i], derrt[i + 1]]);\n                    }\n                }\n                if (dery[nr] !== 0 && sign(dery[nr]) !== sign(poly.eval(derrt[nr] + dx) - dery[nr])) {\n                    guesses.push(derrt[nr] + dx);\n                    minmax.push([derrt[nr], rb.maxX]);\n                }\n            }\n\n            /**\n             *  @param {number} x\n             *  @returns {number}\n             */\n            const f = function(x) {\n                return poly.eval(x);\n            };\n\n            /**\n             *  @param {number} x\n             *  @returns {number}\n             */\n            const df = function(x) {\n                return poly_d.eval(x);\n            };\n\n            if (guesses.length > 0) {\n                for (i = 0; i < guesses.length; i++) {\n                    guesses[i] = Polynomial.newtonSecantBisection(guesses[i], f, df, 32, minmax[i][0], minmax[i][1]);\n                }\n            }\n\n            results = results.concat(guesses);\n        }\n\n        return results;\n    }\n}\n\nexport default Polynomial;\n","/* parser generated by jison 0.4.18 */\n/*\n  Returns a Parser object of the following structure:\n\n  Parser: {\n    yy: {}\n  }\n\n  Parser.prototype: {\n    yy: {},\n    trace: function(),\n    symbols_: {associative list: name ==> number},\n    terminals_: {associative list: number ==> name},\n    productions_: [...],\n    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),\n    table: [...],\n    defaultActions: {...},\n    parseError: function(str, hash),\n    parse: function(input),\n\n    lexer: {\n        EOF: 1,\n        parseError: function(str, hash),\n        setInput: function(input),\n        input: function(),\n        unput: function(str),\n        more: function(),\n        less: function(n),\n        pastInput: function(),\n        upcomingInput: function(),\n        showPosition: function(),\n        test_match: function(regex_match_array, rule_index),\n        next: function(),\n        lex: function(),\n        begin: function(condition),\n        popState: function(),\n        _currentRules: function(),\n        topState: function(),\n        pushState: function(condition),\n\n        options: {\n            ranges: boolean           (optional: true ==> token location info will include a .range[] member)\n            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)\n            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)\n        },\n\n        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),\n        rules: [...],\n        conditions: {associative list: name ==> set},\n    }\n  }\n\n\n  token location info (@$, _$, etc.): {\n    first_line: n,\n    last_line: n,\n    first_column: n,\n    last_column: n,\n    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)\n  }\n\n\n  the parseError function receives a 'hash' object with these members for lexer and parser errors: {\n    text:        (matched text)\n    token:       (the produced terminal token, if any)\n    line:        (yylineno)\n  }\n  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {\n    loc:         (yylloc)\n    expected:    (string describing the set of expected tokens)\n    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)\n  }\n*/\nvar parser = (function(){\nvar o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,11],$V2=[1,6],$V3=[1,7],$V4=[1,8],$V5=[1,10],$V6=[1,20],$V7=[1,21],$V8=[1,24],$V9=[1,14],$Va=[1,18],$Vb=[1,19],$Vc=[1,23],$Vd=[1,22],$Ve=[1,7,8,11,13,14,17,23,24,26,29,36,37,78,79],$Vf=[1,7,8,11,13,14,17,23,24,26,28,29,36,37,38,41,42,78,79],$Vg=[1,31],$Vh=[1,32],$Vi=[1,33],$Vj=[1,34],$Vk=[1,7,8,11,13,14,16,17,23,24,26,28,29,36,37,38,41,42,51,57,58,59,60,78,79],$Vl=[2,50],$Vm=[1,36],$Vn=[1,37],$Vo=[1,7,8,11,13,14,16,17,23,24,26,28,29,36,37,38,41,42,49,51,57,58,59,60,65,78,79],$Vp=[1,45],$Vq=[2,13],$Vr=[2,14],$Vs=[2,15],$Vt=[1,70],$Vu=[1,68],$Vv=[1,54],$Vw=[1,55],$Vx=[1,56],$Vy=[1,57],$Vz=[1,58],$VA=[1,69],$VB=[1,72],$VC=[1,59],$VD=[1,60],$VE=[1,62],$VF=[1,63],$VG=[1,65],$VH=[1,71],$VI=[38,42],$VJ=[28,42],$VK=[1,90],$VL=[1,91],$VM=[1,92],$VN=[1,111],$VO=[1,7,8,11,13,14,17,23,24,26,28,29,36,37,38,41,42,65,78,79],$VP=[1,7,8,11,13,14,17,23,24,26,28,29,36,37,38,41,42,49,51,65,78,79],$VQ=[1,120],$VR=[1,125],$VS=[1,7,8,11,13,14,16,17,23,24,26,28,29,36,37,38,41,42,51,57,58,78,79],$VT=[42,51],$VU=[1,149],$VV=[38,42,51],$VW=[38,42,49,51],$VX=[28,42,49],$VY=[1,160],$VZ=[1,161],$V_=[1,163],$V$=[1,165],$V01=[41,42],$V11=[1,166],$V21=[1,168],$V31=[2,42],$V41=[1,170],$V51=[1,175],$V61=[1,176],$V71=[1,189],$V81=[28,41,42];\nvar parser = {trace: function trace () { },\nyy: {},\nsymbols_: {\"error\":2,\"program\":3,\"statements\":4,\"statement\":5,\"transform\":6,\"GENERATOR\":7,\"IDENTIFIER\":8,\"=\":9,\"generator\":10,\"PATTERN\":11,\"namedTypePattern\":12,\"TRANSFORM\":13,\"TYPE\":14,\"typeDefinition\":15,\"<=\":16,\"_\":17,\"typePatterns\":18,\"ANY_TYPE\":19,\"ARRAY_TYPE\":20,\"arrayTypeDefinition\":21,\"BOOLEAN_TYPE\":22,\"TRUE\":23,\"FALSE\":24,\"ENUMERATION\":25,\"{\":26,\"identifiers\":27,\"}\":28,\"NULL_TYPE\":29,\"NUMBER_TYPE\":30,\"float\":31,\"OBJECT_TYPE\":32,\"objectTypeDefinition\":33,\"STRING_TYPE\":34,\"string\":35,\"UNDEFINED_TYPE\":36,\"[\":37,\"]\":38,\"transformElements\":39,\"assignments\":40,\";\":41,\",\":42,\"transformProperties\":43,\"transformProperty\":44,\":\":45,\"transforms\":46,\"assignment\":47,\"namedGenerator\":48,\"AS\":49,\"(\":50,\")\":51,\"parameterList\":52,\"arrayExpression\":53,\"boolean\":54,\"objectExpression\":55,\".\":56,\"+\":57,\"-\":58,\"*\":59,\"/\":60,\"expressionElements\":61,\"expressionElement\":62,\"expressionProperties\":63,\"expressionProperty\":64,\"|\":65,\"typePattern\":66,\"arrayPattern\":67,\"objectPattern\":68,\"patternElements\":69,\"namedPatternElement\":70,\"patternElement\":71,\"range\":72,\"integer\":73,\"..\":74,\"patternProperties\":75,\"namedPatternProperty\":76,\"namedProperty\":77,\"STRING\":78,\"NUMBER\":79,\"stringOrIdentifier\":80,\"$accept\":0,\"$end\":1},\nterminals_: {2:\"error\",7:\"GENERATOR\",8:\"IDENTIFIER\",9:\"=\",11:\"PATTERN\",13:\"TRANSFORM\",14:\"TYPE\",16:\"<=\",17:\"_\",19:\"ANY_TYPE\",20:\"ARRAY_TYPE\",22:\"BOOLEAN_TYPE\",23:\"TRUE\",24:\"FALSE\",25:\"ENUMERATION\",26:\"{\",28:\"}\",29:\"NULL_TYPE\",30:\"NUMBER_TYPE\",32:\"OBJECT_TYPE\",34:\"STRING_TYPE\",36:\"UNDEFINED_TYPE\",37:\"[\",38:\"]\",41:\";\",42:\",\",45:\":\",49:\"AS\",50:\"(\",51:\")\",56:\".\",57:\"+\",58:\"-\",59:\"*\",60:\"/\",65:\"|\",74:\"..\",78:\"STRING\",79:\"NUMBER\"},\nproductions_: [0,[3,1],[4,2],[4,1],[5,1],[5,4],[5,4],[5,4],[5,4],[6,1],[6,3],[6,3],[6,3],[6,2],[6,2],[6,2],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,4],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[15,1],[21,2],[21,3],[21,5],[39,3],[39,1],[33,2],[33,3],[33,5],[43,3],[43,1],[44,3],[44,1],[40,3],[40,1],[47,3],[46,3],[46,1],[48,1],[48,3],[10,1],[10,3],[10,4],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,1],[10,3],[10,3],[10,3],[10,3],[10,3],[53,2],[53,3],[61,3],[61,1],[62,1],[55,2],[55,3],[63,3],[63,1],[64,3],[64,1],[52,3],[52,1],[18,3],[18,1],[12,1],[12,3],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,1],[66,2],[66,2],[66,1],[67,2],[67,3],[69,3],[69,1],[70,1],[70,3],[71,1],[71,3],[71,3],[71,5],[72,3],[72,2],[72,2],[72,1],[68,2],[68,3],[75,3],[75,1],[76,1],[76,3],[77,3],[77,1],[54,1],[54,1],[35,1],[73,1],[31,1],[80,1],[80,1],[27,3],[27,1]],\nperformAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {\n/* this == yyval */\n\nvar $0 = $$.length - 1;\nswitch (yystate) {\ncase 1:\nreturn $$[$0];\nbreak;\ncase 2:\n$$[$0-1].push($$[$0]); this.$ = $$[$0-1]\nbreak;\ncase 3: case 35: case 40: case 44: case 47: case 68: case 73: case 77: case 79: case 102: case 116: case 129:\nthis.$ = [ $$[$0] ];\nbreak;\ncase 4: case 18: case 27: case 94: case 95:\nthis.$ = $$[$0];\nbreak;\ncase 5:\nthis.$ = { type: 'generator-assignment', name: $$[$0-2], value: $$[$0] };\nbreak;\ncase 6:\nthis.$ = { type: 'pattern-assignment',   name: $$[$0-2], value: $$[$0] };\nbreak;\ncase 7:\nthis.$ = { type: 'transform-assignment', name: $$[$0-2], value: $$[$0] };\nbreak;\ncase 8:\nthis.$ = { type: 'type-assignment',      name: $$[$0-2], value: $$[$0] };\nbreak;\ncase 9:\nthis.$ = { type: 'transform', patterns: [{ type: 'pattern', patternType: 'any', value: null }], returnValue: $$[$0] };\nbreak;\ncase 10:\nthis.$ = { type: 'transform', patterns: null, returnValue: $$[$0-2]   };\nbreak;\ncase 11:\nthis.$ = { type: 'transform', patterns: $$[$0],   returnValue: $$[$0-2]   };\nbreak;\ncase 12:\nthis.$ = { type: 'transform', patterns: $$[$0],   returnValue: null };\nbreak;\ncase 13:\nthis.$ = { type: 'generator-reference', name: $$[$0] };\nbreak;\ncase 14:\nthis.$ = { type: 'transform-reference', name: $$[$0] };\nbreak;\ncase 15:\nthis.$ = { type: 'type-reference',      name: $$[$0] };\nbreak;\ncase 16:\nthis.$ = { type: 'type-definition', definition: 'any', value: null };\nbreak;\ncase 17:\nthis.$ = { type: 'type-definition', definition: 'array', value: null };\nbreak;\ncase 19:\nthis.$ = { type: 'type-definition', definition: 'boolean', value: null };\nbreak;\ncase 20:\nthis.$ = { type: 'type-definition', definition: 'boolean', value: true };\nbreak;\ncase 21:\nthis.$ = { type: 'type-definition', definition: 'boolean', value: false };\nbreak;\ncase 22:\nthis.$ = { type: 'type-definition', definition: 'enumeration', value: $$[$0-1] };\nbreak;\ncase 23:\nthis.$ = { type: 'type-definition', definition: 'null', value: null };\nbreak;\ncase 24:\nthis.$ = { type: 'type-definition', definition: 'number', value: null };\nbreak;\ncase 25:\nthis.$ = { type: 'type-definition', definition: 'number', value: $$[$0] };\nbreak;\ncase 26:\nthis.$ = { type: 'type-definition', definition: 'object', value: null };\nbreak;\ncase 28:\nthis.$  = { type: 'type-definition', definition: 'string', value: null };\nbreak;\ncase 29:\nthis.$ = { type: 'type-definition', definition: 'string', value: $$[$0] };\nbreak;\ncase 30:\nthis.$ = { type: 'type-definition', definition: 'undefined', value: null };\nbreak;\ncase 31:\nthis.$ = { type: 'type-definition', definition: 'array', value: [] };\nbreak;\ncase 32:\nthis.$ = { type: 'type-definition', definition: 'array', value: $$[$0-1] };\nbreak;\ncase 33:\nthis.$ = { type: 'type-definition', definition: 'array', value: $$[$0-3].concat($$[$0-1]) };\nbreak;\ncase 34: case 39: case 43: case 46: case 67: case 72: case 76: case 78: case 101: case 115: case 128:\n$$[$0-2].push($$[$0]); this.$ = $$[$0-2]\nbreak;\ncase 36:\nthis.$ = { type: 'type-definition', definition: 'object', value: [] };\nbreak;\ncase 37:\nthis.$ = { type: 'type-definition', definition: 'object', value: $$[$0-1] };\nbreak;\ncase 38:\nthis.$ = { type: 'type-definition', definition: 'object', value: $$[$0-3].concat($$[$0-1]) };\nbreak;\ncase 41:\nthis.$ = { type: 'type-property', name: $$[$0-2], value: $$[$0] };\nbreak;\ncase 42:\nthis.$ = { type: 'type-property', name: $$[$0], value: null };\nbreak;\ncase 45:\nthis.$ = { type: 'assignment', name: $$[$0-2], value: $$[$0] };\nbreak;\ncase 48: case 80: case 103:\n$$[$0].assignTo = null; this.$ = $$[$0];\nbreak;\ncase 49: case 81: case 104: case 118:\n$$[$0-2].assignTo = $$[$0]; this.$ = $$[$0-2];\nbreak;\ncase 50:\nthis.$ = { type: 'generator', expression: { type: 'get-value', name: $$[$0] } };\nbreak;\ncase 51:\nthis.$ = { type: 'generator', expression: { type: 'invoke', name: $$[$0-2], args: [] } };\nbreak;\ncase 52:\nthis.$ = { type: 'generator', expression: { type: 'invoke', name: $$[$0-3], args: $$[$0-1] } };\nbreak;\ncase 53: case 58:\nthis.$ = { type: 'generator', expression: $$[$0] };\nbreak;\ncase 54:\nthis.$ = { type: 'generator', expression: { type: 'boolean', value: $$[$0] } };\nbreak;\ncase 55:\nthis.$ = { type: 'generator', expression: { type: 'boolean', value: null } };\nbreak;\ncase 56:\nthis.$ = { type: 'generator', expression: { type: 'number', value: $$[$0] } };\nbreak;\ncase 57:\nthis.$ = { type: 'generator', expression: { type: 'string', value: $$[$0] } };\nbreak;\ncase 59:\nthis.$ = { type: 'generator', expression: { type: 'string', value: undefined } };\nbreak;\ncase 60:\nthis.$ = { type: 'generator', expression: { type: 'get-property', left: { type: 'get-value', name: $$[$0-2] }, right: $$[$0] } };\nbreak;\ncase 61:\nthis.$ = { type: 'generator', expression: { type: 'add', left: $$[$0-2], right: $$[$0] } };\nbreak;\ncase 62:\nthis.$ = { type: 'generator', expression: { type: 'subtract', left: $$[$0-2], right: $$[$0] } };\nbreak;\ncase 63:\nthis.$ = { type: 'generator', expression: { type: 'multiply', left: $$[$0-2], right: $$[$0] } };\nbreak;\ncase 64:\nthis.$ = { type: 'generator', expression: { type: 'divide', left: $$[$0-2], right: $$[$0] } };\nbreak;\ncase 65:\nthis.$ = { type: 'array', value: [] };\nbreak;\ncase 66:\nthis.$ = { type: 'array', value: $$[$0-1] };\nbreak;\ncase 69: case 117: case 126:\nthis.$ = $$[$0]\nbreak;\ncase 70:\nthis.$ = { type: 'object', value: [] };\nbreak;\ncase 71:\nthis.$ = { type: 'object', value: $$[$0-1] };\nbreak;\ncase 74:\n$$[$0].name = $$[$0-2]; this.$ = $$[$0];\nbreak;\ncase 75:\nthis.$ = { type: 'generator', name: $$[$0], expression: { type: 'get-value', name: $$[$0] } };\nbreak;\ncase 82:\nthis.$ = { type: 'pattern', patternType: 'any', value: null };\nbreak;\ncase 83:\nthis.$ = { type: 'pattern', patternType: 'array',     value: null  };\nbreak;\ncase 84:\nthis.$ = { type: 'pattern', patternType: 'boolean',   value: null  };\nbreak;\ncase 85:\nthis.$ = { type: 'pattern', patternType: 'boolean',   value: true  };\nbreak;\ncase 86:\nthis.$ = { type: 'pattern', patternType: 'boolean',   value: false };\nbreak;\ncase 87:\nthis.$ = { type: 'pattern', patternType: 'null',      value: null  };\nbreak;\ncase 88:\nthis.$ = { type: 'pattern', patternType: 'number',    value: null  };\nbreak;\ncase 89:\nthis.$ = { type: 'pattern', patternType: 'number',    value: $$[$0]    };\nbreak;\ncase 90:\nthis.$ = { type: 'pattern', patternType: 'object',    value: null  };\nbreak;\ncase 91:\nthis.$ = { type: 'pattern', patternType: 'string',    value: null  };\nbreak;\ncase 92:\nthis.$ = { type: 'pattern', patternType: 'string',    value: $$[$0]    };\nbreak;\ncase 93:\nthis.$ = { type: 'pattern', patternType: 'undefined', value: null  };\nbreak;\ncase 96:\nthis.$ = { type: 'pattern-reference', name: $$[$0] };\nbreak;\ncase 97:\nthis.$ = { type: 'enumeration-reference', name: $$[$0] };\nbreak;\ncase 98:\nthis.$ = { type: 'pattern', patternType: 'reference', value: $$[$0] };\nbreak;\ncase 99:\nthis.$ = { type: 'pattern', patternType: 'array-pattern', value: [] };\nbreak;\ncase 100:\nthis.$ = { type: 'pattern', patternType: 'array-pattern', value: $$[$0-1] };\nbreak;\ncase 105:\nthis.$ = { type: 'element', pattern: $$[$0], range: { type: 'range', start: 1, stop: 1 } };\nbreak;\ncase 106:\nthis.$ = { type: 'element', pattern: $$[$0-2], range: $$[$0] };\nbreak;\ncase 107:\nthis.$ = { type: 'element-group', elements: $$[$0-1], range: { type: 'range', start: 1, stop: 1 } };\nbreak;\ncase 108:\nthis.$ = { type: 'element-group', elements: $$[$0-3], range: $$[$0] };\nbreak;\ncase 109:\nthis.$ = { type: 'range', start: $$[$0-2], stop: $$[$0] };\nbreak;\ncase 110:\nthis.$ = { type: 'range', start: 0, stop: $$[$0] };\nbreak;\ncase 111:\nthis.$ = { type: 'range', start: $$[$0-1], stop: Infinity };\nbreak;\ncase 112:\nthis.$ = { type: 'range', start: $$[$0], stop: $$[$0] };\nbreak;\ncase 113:\nthis.$ = { type: 'pattern', patternType: 'object', value: null };\nbreak;\ncase 114:\nthis.$ = { type: 'pattern', patternType: 'object-pattern', value: $$[$0-1] };\nbreak;\ncase 119:\nthis.$ = { type: 'property', name: $$[$0-2], pattern: $$[$0] };\nbreak;\ncase 120:\nthis.$ = { type: 'property', name: $$[$0], pattern: { type: 'pattern', patternType: 'any', value: null } };\nbreak;\ncase 121:\nthis.$ = true;\nbreak;\ncase 122:\nthis.$ = false;\nbreak;\ncase 123: case 127:\nthis.$ = $$[$0].substring(1,  $$[$0].length - 1);\nbreak;\ncase 124:\nthis.$ = parseInt($$[$0]);\nbreak;\ncase 125:\nthis.$ = parseFloat($$[$0]);\nbreak;\n}\n},\ntable: [{3:1,4:2,5:3,6:4,7:$V0,8:$V1,10:9,11:$V2,13:$V3,14:$V4,17:$V5,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,78:$Vc,79:$Vd},{1:[3]},{1:[2,1],5:25,6:4,7:$V0,8:$V1,10:9,11:$V2,13:$V3,14:$V4,17:$V5,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,78:$Vc,79:$Vd},o($Ve,[2,3]),o($Ve,[2,4]),{8:[1,26]},{8:[1,27]},{8:[1,28]},{8:[1,29]},o($Vf,[2,9],{16:[1,30],57:$Vg,58:$Vh,59:$Vi,60:$Vj}),{16:[1,35]},o($Vk,$Vl,{50:$Vm,56:$Vn}),o($Vk,[2,53]),o($Vk,[2,54]),o($Vk,[2,55]),o($Vk,[2,56]),o($Vk,[2,57]),o($Vk,[2,58]),o($Vk,[2,59]),{8:$V1,10:41,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,38:[1,38],53:12,54:13,55:17,61:39,62:40,78:$Vc,79:$Vd},o($Vk,[2,121]),o($Vk,[2,122]),o($Vo,[2,125]),o($Vo,[2,123]),{8:$Vp,28:[1,42],63:43,64:44},o($Ve,[2,2]),o($Ve,$Vq,{9:[1,46]}),{9:[1,47]},o($Ve,$Vr,{9:[1,48]}),o($Ve,$Vs,{9:[1,49]}),{8:$Vt,11:$Vu,12:52,17:[1,50],18:51,19:$Vv,20:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,29:$VC,30:$VD,31:61,32:$VE,34:$VF,35:64,36:$VG,37:$VH,66:53,67:66,68:67,78:$Vc,79:$Vd},{8:$V1,10:73,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,78:$Vc,79:$Vd},{8:$V1,10:74,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,78:$Vc,79:$Vd},{8:$V1,10:75,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,78:$Vc,79:$Vd},{8:$V1,10:76,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,78:$Vc,79:$Vd},{8:$Vt,11:$Vu,12:52,18:77,19:$Vv,20:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,29:$VC,30:$VD,31:61,32:$VE,34:$VF,35:64,36:$VG,37:$VH,66:53,67:66,68:67,78:$Vc,79:$Vd},{8:$V1,10:80,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,51:[1,78],52:79,53:12,54:13,55:17,78:$Vc,79:$Vd},{8:[1,81]},o($Vk,[2,65]),{38:[1,82],42:[1,83]},o($VI,[2,68]),o($VI,[2,69],{57:$Vg,58:$Vh,59:$Vi,60:$Vj}),o($Vk,[2,70]),{28:[1,84],42:[1,85]},o($VJ,[2,73]),o($VJ,[2,75],{45:[1,86]}),{8:$V1,10:87,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,78:$Vc,79:$Vd},{8:$Vt,11:$Vu,12:88,19:$Vv,20:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,29:$VC,30:$VD,31:61,32:$VE,34:$VF,35:64,36:$VG,37:$VH,66:53,67:66,68:67,78:$Vc,79:$Vd},{6:89,7:$VK,8:$V1,10:9,13:$VL,14:$VM,17:$V5,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,78:$Vc,79:$Vd},{15:93,19:[1,94],20:[1,95],21:96,22:[1,97],23:[1,98],24:[1,99],25:[1,100],26:[1,110],29:[1,101],30:[1,102],31:103,32:[1,104],33:105,34:[1,106],35:107,36:[1,108],37:[1,109],78:$Vc,79:$Vd},o($Vf,[2,10]),o($Vf,[2,11],{65:$VN}),o($VO,[2,79]),o($VO,[2,80],{49:[1,112]}),o($VP,[2,82]),o($VP,[2,83]),o($VP,[2,84]),o($VP,[2,85]),o($VP,[2,86]),o($VP,[2,87]),o($VP,[2,88]),o($VP,[2,89]),o($VP,[2,90]),o($VP,[2,91]),o($VP,[2,92]),o($VP,[2,93]),o($VP,[2,94]),o($VP,[2,95]),{8:[1,113]},{8:[1,114]},o($VP,[2,98]),{8:$Vt,11:$Vu,19:$Vv,20:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,29:$VC,30:$VD,31:61,32:$VE,34:$VF,35:64,36:$VG,37:$VH,38:[1,115],50:$VQ,66:119,67:66,68:67,69:116,70:117,71:118,78:$Vc,79:$Vd},{8:$VR,28:[1,121],75:122,76:123,77:124},o($VS,[2,61],{59:$Vi,60:$Vj}),o($VS,[2,62],{59:$Vi,60:$Vj}),o($Vk,[2,63]),o($Vk,[2,64]),o($Vf,[2,12],{65:$VN}),o($Vk,[2,51]),{42:[1,127],51:[1,126]},o($VT,[2,77],{57:$Vg,58:$Vh,59:$Vi,60:$Vj}),o($Vk,[2,60]),o($Vk,[2,66]),{8:$V1,10:41,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,62:128,78:$Vc,79:$Vd},o($Vk,[2,71]),{8:$Vp,64:129},{8:$V1,10:130,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,78:$Vc,79:$Vd},o($Ve,[2,5],{57:$Vg,58:$Vh,59:$Vi,60:$Vj}),o($Ve,[2,6]),o($Ve,[2,7]),{8:[1,131]},{8:[1,132]},{8:[1,133]},o($Ve,[2,8]),o($Ve,[2,16]),o($Ve,[2,17]),o($Ve,[2,18]),o($Ve,[2,19]),o($Ve,[2,20]),o($Ve,[2,21]),{26:[1,134]},o($Ve,[2,23]),o($Ve,[2,24]),o($Ve,[2,25]),o($Ve,[2,26]),o($Ve,[2,27]),o($Ve,[2,28]),o($Ve,[2,29]),o($Ve,[2,30]),{6:138,7:$VK,8:[1,140],10:9,13:$VL,14:$VM,17:$V5,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,38:[1,135],39:136,40:137,47:139,53:12,54:13,55:17,78:$Vc,79:$Vd},{8:[1,145],28:[1,141],40:143,43:142,44:144,47:139},{8:$Vt,11:$Vu,12:146,19:$Vv,20:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,29:$VC,30:$VD,31:61,32:$VE,34:$VF,35:64,36:$VG,37:$VH,66:53,67:66,68:67,78:$Vc,79:$Vd},{8:[1,147]},o($VP,[2,96]),o($VP,[2,97]),o($VP,[2,99]),{38:[1,148],42:$VU},o($VV,[2,102]),o($VV,[2,103],{49:[1,150]}),o($VW,[2,105],{41:[1,151]}),{8:$Vt,11:$Vu,19:$Vv,20:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,29:$VC,30:$VD,31:61,32:$VE,34:$VF,35:64,36:$VG,37:$VH,50:$VQ,66:119,67:66,68:67,69:152,70:117,71:118,78:$Vc,79:$Vd},o($VP,[2,113]),{28:[1,153],42:[1,154]},o($VJ,[2,116]),o($VJ,[2,117],{49:[1,155]}),o($VX,[2,120],{45:[1,156]}),o($Vk,[2,52]),{8:$V1,10:157,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,78:$Vc,79:$Vd},o($VI,[2,67]),o($VJ,[2,72]),o($VJ,[2,74],{57:$Vg,58:$Vh,59:$Vi,60:$Vj}),o($Vf,$Vq),o($Vf,$Vr),o($Vf,$Vs),{8:$VY,27:158,78:$VZ,80:159},o($Ve,[2,31]),{38:[1,162],42:$V_},{41:[1,164],42:$V$},o($VI,[2,35]),o($V01,[2,44]),o([16,38,42,57,58,59,60],$Vl,{9:$V11,50:$Vm,56:$Vn}),o($Ve,[2,36]),{28:[1,167],42:$V21},{41:[1,169],42:$V$},o($VJ,[2,40]),o($VJ,$V31,{9:$V11,45:$V41}),o($VO,[2,78]),o($VO,[2,81]),o($VP,[2,100]),{8:$Vt,11:$Vu,19:$Vv,20:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,29:$VC,30:$VD,31:61,32:$VE,34:$VF,35:64,36:$VG,37:$VH,50:$VQ,66:119,67:66,68:67,70:171,71:118,78:$Vc,79:$Vd},{8:[1,172]},{72:173,73:174,74:$V51,79:$V61},{42:$VU,51:[1,177]},o($VP,[2,114]),{8:$VR,76:178,77:124},{8:[1,179]},{8:$Vt,11:$Vu,19:$Vv,20:$Vw,22:$Vx,23:$Vy,24:$Vz,25:$VA,26:$VB,29:$VC,30:$VD,31:61,32:$VE,34:$VF,35:64,36:$VG,37:$VH,66:180,67:66,68:67,78:$Vc,79:$Vd},o($VT,[2,76],{57:$Vg,58:$Vh,59:$Vi,60:$Vj}),{28:[1,181],42:[1,182]},o($VJ,[2,129]),o($VJ,[2,126]),o($VJ,[2,127]),o($Ve,[2,32]),{6:183,7:$VK,8:$V1,10:9,13:$VL,14:$VM,17:$V5,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,78:$Vc,79:$Vd},{6:138,7:$VK,8:$V1,10:9,13:$VL,14:$VM,17:$V5,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,39:184,53:12,54:13,55:17,78:$Vc,79:$Vd},{8:[1,186],47:185},{6:187,7:$VK,8:$V1,10:9,13:$VL,14:$VM,17:$V5,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,78:$Vc,79:$Vd},o($Ve,[2,37]),{8:$V71,44:188},{8:$V71,43:190,44:144},{6:192,7:$VK,8:$V1,10:9,13:$VL,14:$VM,17:$V5,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,46:191,53:12,54:13,55:17,78:$Vc,79:$Vd},o($VV,[2,101]),o($VV,[2,104]),o($VW,[2,106]),o($VW,[2,112],{74:[1,193]}),{73:194,79:$V61},o([38,42,49,51,74],[2,124]),o($VW,[2,107],{41:[1,195]}),o($VJ,[2,115]),o($VJ,[2,118]),o($VX,[2,119]),o($Ve,[2,22]),{8:$VY,78:$VZ,80:196},o($VI,[2,34]),{38:[1,197],42:$V_},o($V01,[2,43]),{9:$V11},o($V01,[2,45]),o($VJ,[2,39]),o($VJ,$V31,{45:$V41}),{28:[1,198],42:$V21},o($VJ,[2,41],{41:[1,199]}),o($V81,[2,47]),o($VW,[2,111],{73:200,79:$V61}),o($VW,[2,110]),{72:201,73:174,74:$V51,79:$V61},o($VJ,[2,128]),o($Ve,[2,33]),o($Ve,[2,38]),{6:202,7:$VK,8:$V1,10:9,13:$VL,14:$VM,17:$V5,23:$V6,24:$V7,26:$V8,29:$V9,31:15,35:16,36:$Va,37:$Vb,53:12,54:13,55:17,78:$Vc,79:$Vd},o($VW,[2,109]),o($VW,[2,108]),o($V81,[2,46])],\ndefaultActions: {},\nparseError: function parseError (str, hash) {\n    if (hash.recoverable) {\n        this.trace(str);\n    } else {\n        var error = new Error(str);\n        error.hash = hash;\n        throw error;\n    }\n},\nparse: function parse(input) {\n    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;\n    var args = lstack.slice.call(arguments, 1);\n    var lexer = Object.create(this.lexer);\n    var sharedState = { yy: {} };\n    for (var k in this.yy) {\n        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {\n            sharedState.yy[k] = this.yy[k];\n        }\n    }\n    lexer.setInput(input, sharedState.yy);\n    sharedState.yy.lexer = lexer;\n    sharedState.yy.parser = this;\n    if (typeof lexer.yylloc == 'undefined') {\n        lexer.yylloc = {};\n    }\n    var yyloc = lexer.yylloc;\n    lstack.push(yyloc);\n    var ranges = lexer.options && lexer.options.ranges;\n    if (typeof sharedState.yy.parseError === 'function') {\n        this.parseError = sharedState.yy.parseError;\n    } else {\n        this.parseError = Object.getPrototypeOf(this).parseError;\n    }\n    function popStack(n) {\n        stack.length = stack.length - 2 * n;\n        vstack.length = vstack.length - n;\n        lstack.length = lstack.length - n;\n    }\n    _token_stack:\n        var lex = function () {\n            var token;\n            token = lexer.lex() || EOF;\n            if (typeof token !== 'number') {\n                token = self.symbols_[token] || token;\n            }\n            return token;\n        };\n    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;\n    while (true) {\n        state = stack[stack.length - 1];\n        if (this.defaultActions[state]) {\n            action = this.defaultActions[state];\n        } else {\n            if (symbol === null || typeof symbol == 'undefined') {\n                symbol = lex();\n            }\n            action = table[state] && table[state][symbol];\n        }\n                    if (typeof action === 'undefined' || !action.length || !action[0]) {\n                var errStr = '';\n                expected = [];\n                for (p in table[state]) {\n                    if (this.terminals_[p] && p > TERROR) {\n                        expected.push('\\'' + this.terminals_[p] + '\\'');\n                    }\n                }\n                if (lexer.showPosition) {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\\n' + lexer.showPosition() + '\\nExpecting ' + expected.join(', ') + ', got \\'' + (this.terminals_[symbol] || symbol) + '\\'';\n                } else {\n                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\\'' + (this.terminals_[symbol] || symbol) + '\\'');\n                }\n                this.parseError(errStr, {\n                    text: lexer.match,\n                    token: this.terminals_[symbol] || symbol,\n                    line: lexer.yylineno,\n                    loc: yyloc,\n                    expected: expected\n                });\n            }\n        if (action[0] instanceof Array && action.length > 1) {\n            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);\n        }\n        switch (action[0]) {\n        case 1:\n            stack.push(symbol);\n            vstack.push(lexer.yytext);\n            lstack.push(lexer.yylloc);\n            stack.push(action[1]);\n            symbol = null;\n            if (!preErrorSymbol) {\n                yyleng = lexer.yyleng;\n                yytext = lexer.yytext;\n                yylineno = lexer.yylineno;\n                yyloc = lexer.yylloc;\n                if (recovering > 0) {\n                    recovering--;\n                }\n            } else {\n                symbol = preErrorSymbol;\n                preErrorSymbol = null;\n            }\n            break;\n        case 2:\n            len = this.productions_[action[1]][1];\n            yyval.$ = vstack[vstack.length - len];\n            yyval._$ = {\n                first_line: lstack[lstack.length - (len || 1)].first_line,\n                last_line: lstack[lstack.length - 1].last_line,\n                first_column: lstack[lstack.length - (len || 1)].first_column,\n                last_column: lstack[lstack.length - 1].last_column\n            };\n            if (ranges) {\n                yyval._$.range = [\n                    lstack[lstack.length - (len || 1)].range[0],\n                    lstack[lstack.length - 1].range[1]\n                ];\n            }\n            r = this.performAction.apply(yyval, [\n                yytext,\n                yyleng,\n                yylineno,\n                sharedState.yy,\n                action[1],\n                vstack,\n                lstack\n            ].concat(args));\n            if (typeof r !== 'undefined') {\n                return r;\n            }\n            if (len) {\n                stack = stack.slice(0, -1 * len * 2);\n                vstack = vstack.slice(0, -1 * len);\n                lstack = lstack.slice(0, -1 * len);\n            }\n            stack.push(this.productions_[action[1]][0]);\n            vstack.push(yyval.$);\n            lstack.push(yyval._$);\n            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];\n            stack.push(newState);\n            break;\n        case 3:\n            return true;\n        }\n    }\n    return true;\n}};\n/* generated by jison-lex 0.3.4 */\nvar lexer = (function(){\nvar lexer = ({\n\nEOF:1,\n\nparseError:function parseError(str, hash) {\n        if (this.yy.parser) {\n            this.yy.parser.parseError(str, hash);\n        } else {\n            throw new Error(str);\n        }\n    },\n\n// resets the lexer, sets new input\nsetInput:function (input, yy) {\n        this.yy = yy || this.yy || {};\n        this._input = input;\n        this._more = this._backtrack = this.done = false;\n        this.yylineno = this.yyleng = 0;\n        this.yytext = this.matched = this.match = '';\n        this.conditionStack = ['INITIAL'];\n        this.yylloc = {\n            first_line: 1,\n            first_column: 0,\n            last_line: 1,\n            last_column: 0\n        };\n        if (this.options.ranges) {\n            this.yylloc.range = [0,0];\n        }\n        this.offset = 0;\n        return this;\n    },\n\n// consumes and returns one char from the input\ninput:function () {\n        var ch = this._input[0];\n        this.yytext += ch;\n        this.yyleng++;\n        this.offset++;\n        this.match += ch;\n        this.matched += ch;\n        var lines = ch.match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno++;\n            this.yylloc.last_line++;\n        } else {\n            this.yylloc.last_column++;\n        }\n        if (this.options.ranges) {\n            this.yylloc.range[1]++;\n        }\n\n        this._input = this._input.slice(1);\n        return ch;\n    },\n\n// unshifts one char (or a string) into the input\nunput:function (ch) {\n        var len = ch.length;\n        var lines = ch.split(/(?:\\r\\n?|\\n)/g);\n\n        this._input = ch + this._input;\n        this.yytext = this.yytext.substr(0, this.yytext.length - len);\n        //this.yyleng -= len;\n        this.offset -= len;\n        var oldLines = this.match.split(/(?:\\r\\n?|\\n)/g);\n        this.match = this.match.substr(0, this.match.length - 1);\n        this.matched = this.matched.substr(0, this.matched.length - 1);\n\n        if (lines.length - 1) {\n            this.yylineno -= lines.length - 1;\n        }\n        var r = this.yylloc.range;\n\n        this.yylloc = {\n            first_line: this.yylloc.first_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.first_column,\n            last_column: lines ?\n                (lines.length === oldLines.length ? this.yylloc.first_column : 0)\n                 + oldLines[oldLines.length - lines.length].length - lines[0].length :\n              this.yylloc.first_column - len\n        };\n\n        if (this.options.ranges) {\n            this.yylloc.range = [r[0], r[0] + this.yyleng - len];\n        }\n        this.yyleng = this.yytext.length;\n        return this;\n    },\n\n// When called from action, caches matched text and appends it on next action\nmore:function () {\n        this._more = true;\n        return this;\n    },\n\n// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.\nreject:function () {\n        if (this.options.backtrack_lexer) {\n            this._backtrack = true;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n\n        }\n        return this;\n    },\n\n// retain first n characters of the match\nless:function (n) {\n        this.unput(this.match.slice(n));\n    },\n\n// displays already matched input, i.e. for error messages\npastInput:function () {\n        var past = this.matched.substr(0, this.matched.length - this.match.length);\n        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\\n/g, \"\");\n    },\n\n// displays upcoming input, i.e. for error messages\nupcomingInput:function () {\n        var next = this.match;\n        if (next.length < 20) {\n            next += this._input.substr(0, 20-next.length);\n        }\n        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\\n/g, \"\");\n    },\n\n// displays the character position where the lexing error occurred, i.e. for error messages\nshowPosition:function () {\n        var pre = this.pastInput();\n        var c = new Array(pre.length + 1).join(\"-\");\n        return pre + this.upcomingInput() + \"\\n\" + c + \"^\";\n    },\n\n// test the lexed token: return FALSE when not a match, otherwise return token\ntest_match:function(match, indexed_rule) {\n        var token,\n            lines,\n            backup;\n\n        if (this.options.backtrack_lexer) {\n            // save context\n            backup = {\n                yylineno: this.yylineno,\n                yylloc: {\n                    first_line: this.yylloc.first_line,\n                    last_line: this.last_line,\n                    first_column: this.yylloc.first_column,\n                    last_column: this.yylloc.last_column\n                },\n                yytext: this.yytext,\n                match: this.match,\n                matches: this.matches,\n                matched: this.matched,\n                yyleng: this.yyleng,\n                offset: this.offset,\n                _more: this._more,\n                _input: this._input,\n                yy: this.yy,\n                conditionStack: this.conditionStack.slice(0),\n                done: this.done\n            };\n            if (this.options.ranges) {\n                backup.yylloc.range = this.yylloc.range.slice(0);\n            }\n        }\n\n        lines = match[0].match(/(?:\\r\\n?|\\n).*/g);\n        if (lines) {\n            this.yylineno += lines.length;\n        }\n        this.yylloc = {\n            first_line: this.yylloc.last_line,\n            last_line: this.yylineno + 1,\n            first_column: this.yylloc.last_column,\n            last_column: lines ?\n                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\\r?\\n?/)[0].length :\n                         this.yylloc.last_column + match[0].length\n        };\n        this.yytext += match[0];\n        this.match += match[0];\n        this.matches = match;\n        this.yyleng = this.yytext.length;\n        if (this.options.ranges) {\n            this.yylloc.range = [this.offset, this.offset += this.yyleng];\n        }\n        this._more = false;\n        this._backtrack = false;\n        this._input = this._input.slice(match[0].length);\n        this.matched += match[0];\n        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);\n        if (this.done && this._input) {\n            this.done = false;\n        }\n        if (token) {\n            return token;\n        } else if (this._backtrack) {\n            // recover context\n            for (var k in backup) {\n                this[k] = backup[k];\n            }\n            return false; // rule action called reject() implying the next rule should be tested instead.\n        }\n        return false;\n    },\n\n// return next match in input\nnext:function () {\n        if (this.done) {\n            return this.EOF;\n        }\n        if (!this._input) {\n            this.done = true;\n        }\n\n        var token,\n            match,\n            tempMatch,\n            index;\n        if (!this._more) {\n            this.yytext = '';\n            this.match = '';\n        }\n        var rules = this._currentRules();\n        for (var i = 0; i < rules.length; i++) {\n            tempMatch = this._input.match(this.rules[rules[i]]);\n            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {\n                match = tempMatch;\n                index = i;\n                if (this.options.backtrack_lexer) {\n                    token = this.test_match(tempMatch, rules[i]);\n                    if (token !== false) {\n                        return token;\n                    } else if (this._backtrack) {\n                        match = false;\n                        continue; // rule action called reject() implying a rule MISmatch.\n                    } else {\n                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n                        return false;\n                    }\n                } else if (!this.options.flex) {\n                    break;\n                }\n            }\n        }\n        if (match) {\n            token = this.test_match(match, rules[index]);\n            if (token !== false) {\n                return token;\n            }\n            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)\n            return false;\n        }\n        if (this._input === \"\") {\n            return this.EOF;\n        } else {\n            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\\n' + this.showPosition(), {\n                text: \"\",\n                token: null,\n                line: this.yylineno\n            });\n        }\n    },\n\n// return next match that has a token\nlex:function lex () {\n        var r = this.next();\n        if (r) {\n            return r;\n        } else {\n            return this.lex();\n        }\n    },\n\n// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)\nbegin:function begin (condition) {\n        this.conditionStack.push(condition);\n    },\n\n// pop the previously active lexer condition state off the condition stack\npopState:function popState () {\n        var n = this.conditionStack.length - 1;\n        if (n > 0) {\n            return this.conditionStack.pop();\n        } else {\n            return this.conditionStack[0];\n        }\n    },\n\n// produce the lexer rule set which is active for the currently active lexer condition state\n_currentRules:function _currentRules () {\n        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {\n            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;\n        } else {\n            return this.conditions[\"INITIAL\"].rules;\n        }\n    },\n\n// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available\ntopState:function topState (n) {\n        n = this.conditionStack.length - 1 - Math.abs(n || 0);\n        if (n >= 0) {\n            return this.conditionStack[n];\n        } else {\n            return \"INITIAL\";\n        }\n    },\n\n// alias for begin(condition)\npushState:function pushState (condition) {\n        this.begin(condition);\n    },\n\n// return the number of states currently on the stack\nstateStackSize:function stateStackSize() {\n        return this.conditionStack.length;\n    },\noptions: {},\nperformAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {\nvar YYSTATE=YY_START;\nswitch($avoiding_name_collisions) {\ncase 0:/* skip whitespace */\nbreak;\ncase 1:/* skip comment */\nbreak;\ncase 2:return 19\nbreak;\ncase 3:return 20\nbreak;\ncase 4:return 49\nbreak;\ncase 5:return 22\nbreak;\ncase 6:return 25\nbreak;\ncase 7:return 24\nbreak;\ncase 8:return 7\nbreak;\ncase 9:return 29\nbreak;\ncase 10:return 30\nbreak;\ncase 11:return 32\nbreak;\ncase 12:return 11\nbreak;\ncase 13:return 34\nbreak;\ncase 14:return 13\nbreak;\ncase 15:return 23\nbreak;\ncase 16:return 14\nbreak;\ncase 17:return 36\nbreak;\ncase 18:return 50\nbreak;\ncase 19:return 51\nbreak;\ncase 20:return 26\nbreak;\ncase 21:return 28\nbreak;\ncase 22:return 37\nbreak;\ncase 23:return 38\nbreak;\ncase 24:return 65\nbreak;\ncase 25:return 42\nbreak;\ncase 26:return 45\nbreak;\ncase 27:return 41\nbreak;\ncase 28:return 9\nbreak;\ncase 29:return 16\nbreak;\ncase 30:return 74\nbreak;\ncase 31:return 56\nbreak;\ncase 32:return 17\nbreak;\ncase 33:return 57\nbreak;\ncase 34:return 58\nbreak;\ncase 35:return 59\nbreak;\ncase 36:return 60\nbreak;\ncase 37:return 8\nbreak;\ncase 38:return 79\nbreak;\ncase 39:return 78\nbreak;\n}\n},\nrules: [/^(?:\\s+)/,/^(?:\\/\\/.*)/,/^(?:any)/,/^(?:array)/,/^(?:as)/,/^(?:boolean)/,/^(?:enum)/,/^(?:false)/,/^(?:generator)/,/^(?:null)/,/^(?:number)/,/^(?:object)/,/^(?:pattern)/,/^(?:string)/,/^(?:transform)/,/^(?:true)/,/^(?:type)/,/^(?:undefined)/,/^(?:\\()/,/^(?:\\))/,/^(?:{)/,/^(?:})/,/^(?:\\[)/,/^(?:\\])/,/^(?:\\|)/,/^(?:,)/,/^(?::)/,/^(?:;)/,/^(?:=)/,/^(?:<=)/,/^(?:\\.\\.)/,/^(?:\\.)/,/^(?:_)/,/^(?:\\+)/,/^(?:-)/,/^(?:\\*)/,/^(?:\\/)/,/^(?:[a-zA-Z_][a-zA-Z0-9_]*)/,/^(?:[-+]?(0|[1-9]\\d*)(\\.\\d+)?)/,/^(?:\"[^\"\\r\\n]*\")/],\nconditions: {\"INITIAL\":{\"rules\":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39],\"inclusive\":true}}\n});\nreturn lexer;\n})();\nparser.lexer = lexer;\nfunction Parser () {\n  this.yy = {};\n}\nParser.prototype = parser;parser.Parser = Parser;\nreturn new Parser;\n})();\n\nexport default parser;\n","/**\n *  Transformer.jss\n *\n *  @copyright 2019, Kevin Lindsey\n *  @module Normalizer\n */\n\n// import util from \"util\";\n// import Parser from \"./Parser.js\";\nimport Parser from \"./GeneratedParser.js\";\n\nconst FAILURE_VALUE = undefined;\n\n/**\n * Determine if object is something that can have properties\n *\n * @param {*} obj\n * @returns {boolean}\n */\nfunction isObject(obj) {\n    return obj !== null && typeof obj === \"object\";\n}\n\n/**\n * Transformer\n */\nexport default class Transformer {\n    /**\n     * Create a new empty Transformer. Normalizers can be used to validate and transform data. However, when a new\n     * Transformer has been created, it needs to be populated with one or more type descriptions. The easiest way to do\n     * this is with the static method fromSource.\n     */\n    constructor() {\n        this.types = {};\n        this.transforms = {};\n        this.patterns = {};\n        this.generators = {};\n        // this.typeCheckers = {};\n        this.typeCreators = {};\n        this.messages = [];\n        this.verbose = false;\n    }\n\n    /**\n     * Create a new instance of a Transformer with its type table initially populated from the specified normalizer\n     * source code.\n     *\n     * @param {string} source\n     * @returns {Transformer}\n     */\n    static fromSource(source) {\n        const result = new Transformer();\n\n        result.addDefinitionsFromSource(source);\n\n        return result;\n    }\n\n    /**\n     * Create a new instance of a Transformer with its type table initially populated from the specified serialization\n     * table. This table can be used to cache a parse normalized file and is the output of Parser.parse()\n     *\n     * @param {Array} table\n     * @returns {Transformer}\n     */\n    static fromTable(table) {\n        const result = new Transformer();\n\n        result.addDefinitionsFromTable(table);\n\n        return result;\n    }\n\n    /**\n     * Add all type definitions from the specified normalization source code to this Transformer instance. This will\n     * amend the current types with those specified in the code. Note that any type that has been redefined in the\n     * source code will replace any pre-existing version of that type.\n     *\n     * @param {string} source\n     */\n    addDefinitionsFromSource(source) {\n        const table = Parser.parse(source);\n\n        this.addDefinitionsFromTable(table);\n    }\n\n    /**\n     * Add all type definitions from the specified serialization table to this Transformer instance. This will amend the\n     * current types with those specified in the table. Note that any type that has been redefined in the table will\n     * replace any pre-existing version of that type.\n     *\n     * @param {Array} table\n     */\n    addDefinitionsFromTable(table) {\n        table.forEach(description => {\n            switch (description.type) {\n                case \"type-assignment\":\n                    this.types[description.name] = description.value;\n                    break;\n\n                case \"transform-assignment\":\n                    this.transforms[description.name] = description.value;\n                    break;\n\n                case \"generator-assignment\":\n                    this.generators[description.name] = description.value;\n                    break;\n\n                case \"pattern-assignment\":\n                    this.patterns[description.name] = description.value;\n                    break;\n\n                default:\n                    // ignore all other top-level statements\n            }\n        });\n    }\n\n    /**\n     * Add information\n     *\n     * @param {string} message\n     */\n    addInfo(message) {\n        if (this.verbose) {\n            this.messages.push({type: \"message\", level: \"info\", message});\n        }\n    }\n\n    /**\n     * Add a warning\n     *\n     * @param {string} message\n     */\n    addWarning(message) {\n        this.messages.push({type: \"message\", level: \"warning\", message});\n    }\n\n    /**\n     * Add an error\n     *\n     * @param {string} message\n     */\n    addError(message) {\n        this.messages.push({type: \"message\", level: \"error\", message});\n    }\n\n    /**\n     * Compile and execute the source against the specfied structure\n     *\n     * @param {string} source\n     * @param {*} structure\n     * @returns {*}\n     */\n    execute(source, structure) {\n        const statements = Parser.parse(source);\n\n        let result;\n\n        for (const statement of statements) {\n            switch (statement.type) {\n                case \"transform\":\n                    result = this.executeTransform(statement, structure);\n\n                    if (result === FAILURE_VALUE) {\n                        break;\n                    }\n                    break;\n\n                case \"type-reference\":\n                    if (statement.name in this.types) {\n                        const type = this.types[statement.name];\n                        const value = this.executeType(type, structure);\n\n                        if (value === FAILURE_VALUE) {\n                            this.addError(`type ${statement.name} was unable to transform successfully`);\n                            return FAILURE_VALUE;\n                        }\n\n                        return value;\n                    }\n\n                    this.addError(`type is not defined: ${statement.name}`);\n                    return FAILURE_VALUE;\n\n                case \"generator-assignment\":\n                    this.generators[statement.name] = statement.value;\n                    break;\n\n                case \"pattern-assignment\":\n                    this.patterns[statement.name] = statement.value;\n                    break;\n\n                case \"transform-assignment\":\n                    this.transforms[statement.name] = statement.value;\n                    break;\n\n                case \"type-assignment\":\n                    this.types[statement.name] = statement.value;\n                    break;\n\n                default:\n                    this.addError(`unknown statement type: ${statement.type}`);\n                    return FAILURE_VALUE;\n            }\n        }\n\n        return result;\n    }\n\n    /*\n     * Execute a list of transforms, until the first one succeeds\n     *\n     * @param {Array} transforms\n     * @param {*} structure\n     * @param {Object} symbolTable\n     * @returns {*}\n     */\n    executeTransforms(transforms, structure, symbolTable) {\n        for (const transform of transforms) {\n            const result = this.executeTransform(transform, structure, symbolTable);\n\n            if (result !== FAILURE_VALUE) {\n                return result;\n            }\n        }\n\n        return FAILURE_VALUE;\n    }\n\n    /*\n     * Execute a single transform\n     *\n     * @param {Object} transform\n     * @param {*} structure\n     * @param {Object} symbolTable\n     * @returns {*}\n     */\n    executeTransform(transform, structure, symbolTable = {}) {\n        let currentObject = structure;\n\n        if (transform.type === \"transform-reference\") {\n            if (transform.name in this.transforms) {\n                transform = this.transforms[transform.name];\n            }\n            else {\n                this.addError(`undefined transform reference: '${transform.name}'`);\n                return FAILURE_VALUE;\n            }\n        }\n\n        if (transform.patterns !== null) {\n            // try all patterns until one succeeds, else report as failure\n            let result = FAILURE_VALUE;\n\n            for (const pattern of transform.patterns) {\n                symbolTable = Object.create(symbolTable);\n\n                result = this.executePattern(pattern, currentObject, symbolTable);\n\n                if (result !== FAILURE_VALUE) {\n                    // pattern matched, so we can stop\n                    if (transform.returnValue !== null) {\n                        currentObject = this.executeGenerator(transform.returnValue.expression, symbolTable);\n                    }\n                    else {\n                        // if we're not messaging the result, then return all captured values (the symbol table)s\n                        currentObject = symbolTable;\n                    }\n                    break;\n                }\n            }\n\n            if (result === FAILURE_VALUE) {\n                this.addError(\"Unable to match any type patterns\");\n                return FAILURE_VALUE;\n            }\n        }\n        else {\n            // if currentObject is not an object, then it can't be used as a symbol table\n            if (isObject(currentObject)) {\n                symbolTable = Object.create(Object.assign(symbolTable, currentObject));\n            }\n\n            // NOTE: assumes we have to have a generator if we don't have a pattern. This is currently\n            // enforced in the parser\n            const value = this.executeGenerator(transform.returnValue.expression, symbolTable);\n\n            if (value === FAILURE_VALUE) {\n                this.addError(\"Unable to apply generator to current object\");\n                return FAILURE_VALUE;\n            }\n\n            currentObject = value;\n        }\n\n        return currentObject;\n    }\n\n    executeType(type, structure) {\n        switch (type.definition) {\n            case \"any\":\n                return structure;\n\n            case \"array\":\n                return this.executeArrayType(type, structure);\n\n            case \"boolean\":\n                if (typeof structure === \"boolean\") {\n                    if (type.value === null || type.value === structure) {\n                        return structure;\n                    }\n                }\n\n                return FAILURE_VALUE;\n\n            case \"enumeration\":\n                if (typeof structure === \"string\") {\n                    if (type.value.includes(structure)) {\n                        return structure;\n                    }\n                }\n\n                return FAILURE_VALUE;\n\n            case \"null\":\n                if (structure === null) {\n                    return structure;\n                }\n\n                return FAILURE_VALUE;\n\n            case \"number\":\n                if (typeof structure === \"number\") {\n                    if (type.value === null || type.value === structure) {\n                        return structure;\n                    }\n                }\n\n                return FAILURE_VALUE;\n\n            case \"object\":\n                return this.executeObjectType(type, structure);\n\n            case \"string\":\n                if (typeof structure === \"string\") {\n                    if (type.value === null || type.value === structure) {\n                        return structure;\n                    }\n                }\n\n                return FAILURE_VALUE;\n\n            case \"undefined\":\n                if (structure === undefined) {\n                    return structure;\n                }\n\n                return FAILURE_VALUE;\n\n            default:\n                this.addError(`Unrecognized type definition value: '${type.definition}'`);\n                return FAILURE_VALUE;\n        }\n    }\n\n    /*\n     * Execute an array type definition\n     *\n     * @param {object} type\n     * @param {*} structure\n     * @returns {*}\n     */\n    executeArrayType(type, structure) {\n        if (type.value === null) {\n            if (Array.isArray(structure)) {\n                return structure;\n            }\n\n            return FAILURE_VALUE;\n        }\n\n        const result = [];\n        const symbolTable = {};\n\n        for (const element of type.value) {\n            switch (element.type) {\n                case \"transform\": {\n                    const elementValue = this.executeTransform(element, structure, symbolTable);\n\n                    if (elementValue === FAILURE_VALUE) {\n                        return FAILURE_VALUE;\n                    }\n\n                    result.push(elementValue);\n                    break;\n                }\n\n                case \"assignment\":\n                    if (this.executeAssignment(element, structure, symbolTable) === FAILURE_VALUE) {\n                        return FAILURE_VALUE;\n                    }\n                    break;\n\n                default:\n                    this.addError(`Unknown element of array type: '${element.type}'`);\n                    return FAILURE_VALUE;\n            }\n        }\n\n        return result;\n    }\n\n    /*\n     * Execute an object type definition\n     *\n     * @param {object} type\n     * @param {*} structure\n     * @returns {*}\n     */\n    executeObjectType(type, structure) {\n        if (type.value === null) {\n            if (isObject(structure)) {\n                return structure;\n            }\n\n            return FAILURE_VALUE;\n        }\n\n        const result = {};\n        const symbolTable = {};\n\n        for (const property of type.value) {\n            switch (property.type) {\n                case \"type-property\": {\n                    let propertyValue = FAILURE_VALUE;\n\n                    if (property.value === null) {\n                        if (isObject(structure) && property.name in structure) {\n                            propertyValue = structure[property.name];\n                        }\n                    }\n                    else {\n                        propertyValue = this.executeTransforms(property.value, structure, symbolTable);\n                    }\n\n                    if (propertyValue === FAILURE_VALUE) {\n                        return FAILURE_VALUE;\n                    }\n\n                    result[property.name] = propertyValue;\n                    break;\n                }\n\n                case \"assignment\":\n                    if (this.executeAssignment(property, structure, symbolTable) === FAILURE_VALUE) {\n                        return FAILURE_VALUE;\n                    }\n                    break;\n\n                default:\n                    this.addError(`Unknown element of object type: '${property.type}'`);\n                    return FAILURE_VALUE;\n            }\n        }\n\n        return result;\n    }\n\n    /*\n     * execute an assignment\n     *\n     * @param {object} assignment\n     * @param {*} structure\n     * @param {object} symbolTable\n     * @returns {*}\n     */\n    executeAssignment(assignment, structure, symbolTable) {\n        const value = this.executeTransform(assignment.value, structure, symbolTable);\n\n        if (value === FAILURE_VALUE) {\n            return FAILURE_VALUE;\n        }\n\n        symbolTable[assignment.name] = value;\n\n        return value;\n    }\n\n    /*\n     * Acquire the value of a type pattern from the specified structure. Any named entities will be populated in the\n     * specified symbolTable\n     *\n     * @param {object} pattern\n     * @param {*} structure\n     * @param {object} symbolTable\n     * @returns {*}\n     */\n    executePattern(pattern, structure, symbolTable) {\n        switch (pattern.patternType) {\n            case \"any\":\n                assign(symbolTable, pattern.assignTo, structure);\n                return structure;\n\n            case \"array\":\n                if (Array.isArray(structure)) {\n                    assign(symbolTable, pattern.assignTo, structure);\n                    return structure;\n                }\n\n                return FAILURE_VALUE;\n\n            case \"array-pattern\":\n                return this.executeArrayPattern(pattern, structure, symbolTable);\n\n            case \"boolean\":\n                if (typeof structure === \"boolean\") {\n                    if (pattern.value === null || pattern.value === structure) {\n                        assign(symbolTable, pattern.assignTo, structure);\n                        return structure;\n                    }\n                }\n\n                return FAILURE_VALUE;\n\n            case \"null\":\n                if (structure === null) {\n                    assign(symbolTable, pattern.assignTo, structure);\n                    return structure;\n                }\n\n                return FAILURE_VALUE;\n\n            case \"number\":\n                if (typeof structure === \"number\") {\n                    if (pattern.value === null || pattern.value === structure) {\n                        assign(symbolTable, pattern.assignTo, structure);\n                        return structure;\n                    }\n                }\n\n                return FAILURE_VALUE;\n\n            case \"object\":\n                if (isObject(structure)) {\n                    assign(symbolTable, pattern.assignTo, structure);\n                    return structure;\n                }\n\n                return FAILURE_VALUE;\n\n            case \"object-pattern\": {\n                if (isObject(structure) === false) {\n                    return FAILURE_VALUE;\n                }\n\n                const result = {};\n\n                for (const property of pattern.value) {\n                    const {name, pattern: propertyPattern, assignTo} = property;\n\n                    if (name in structure) {\n                        const value = this.executePattern(propertyPattern, structure[name], symbolTable);\n\n                        if (value === FAILURE_VALUE) {\n                            return FAILURE_VALUE;\n                        }\n\n                        assign(symbolTable, property.assignTo, structure[name]);\n                        result[assignTo] = value;\n                    }\n                    else {\n                        return FAILURE_VALUE;\n                    }\n                }\n\n                assign(symbolTable, pattern.assignTo, structure);\n                return result;\n            }\n\n            case \"reference\":\n                if (pattern.value in this.patterns) {\n                    const referencedPattern = this.patterns[pattern.value];\n                    const result = this.executePattern(referencedPattern, structure, symbolTable);\n\n                    if (result !== FAILURE_VALUE) {\n                        assign(symbolTable, pattern.assignTo, result);\n                    }\n\n                    return result;\n                }\n\n                return FAILURE_VALUE;\n\n            case \"string\":\n                if (typeof structure === \"string\") {\n                    if (pattern.value === null || pattern.value === structure) {\n                        assign(symbolTable, pattern.assignTo, structure);\n                        return structure;\n                    }\n                }\n\n                return FAILURE_VALUE;\n\n            case \"undefined\":\n                // NOTE: Our current failure value is undefined, so this will be treated as an error. I can change\n                // FAILURE_VALUE to be a sigil. I'll just have to be careful to return undefined at the top-most level.\n                // I'm leaving this for now as this is probably not going to be used much\n                if (structure === undefined) {\n                    assign(symbolTable, pattern.assignTo, structure);\n                    return structure;\n                }\n\n                return FAILURE_VALUE;\n\n            default:\n                throw new TypeError(`unrecognized pattern type: '${pattern.type}'`);\n        }\n    }\n\n    /*\n     * Execute an array pattern\n     *\n     * @param {Object} pattern\n     * @param {*} structure\n     * @param {Object} symbolTable\n     * @returns {*}\n     */\n    executeArrayPattern(pattern, structure, symbolTable) {\n        if (Array.isArray(structure) === false) {\n            return FAILURE_VALUE;\n        }\n\n        let result = [];\n        let index = 0;\n\n        for (const element of pattern.value) {\n            const results = this.executeArrayPatternElement(element, index, structure, symbolTable);\n\n            if (results === FAILURE_VALUE) {\n                return FAILURE_VALUE;\n            }\n\n            result = result.concat(results);\n            index += results.length;\n        }\n\n        if (index === structure.length) {\n            assign(symbolTable, pattern.assignTo, structure);\n            return result;\n        }\n\n        return FAILURE_VALUE;\n    }\n\n    /*\n     * Execute an element from an array pattern\n     *\n     * @param {Object} element\n     * @param {number} index\n     * @param {*} structure\n     * @param {Object} symbolTable\n     * @returns {Array|undefined}\n     */\n    executeArrayPatternElement(element, index, structure, symbolTable) {\n        let result = [];\n\n        switch (element.type) {\n            case \"element\": {\n                const results = this.executeArrayElementPattern(element, index, structure, symbolTable);\n\n                if (results === FAILURE_VALUE) {\n                    return FAILURE_VALUE;\n                }\n\n                result = result.concat(results);\n                index += results.length;\n                break;\n            }\n\n            case \"element-group\": {\n                const results = this.executeArrayElementGroupPattern(element, index, structure, symbolTable);\n\n                if (results === FAILURE_VALUE) {\n                    return FAILURE_VALUE;\n                }\n\n                result = result.concat(results);\n                index += results.length;\n                break;\n            }\n\n            default:\n                this.addError(`Unrecognized array pattern element type: '${element.type}'`);\n                return FAILURE_VALUE;\n        }\n\n        return result;\n    }\n\n    /*\n     * Execute array element pattern\n     *\n     * @param {Object} element\n     * @param {number} index\n     * @param {*} structure\n     * @param {Object} symbolTable\n     * @returns {Array|undefined}\n     */\n    executeArrayElementPattern(element, index, structure, symbolTable) {\n        const {pattern, range: {start, stop}} = element;\n        const result = [];\n\n        for (let i = 0; i < stop; i++) {\n            const actualIndex = index + i;\n\n            // treat out-of-bounds like a failure\n            const value = (actualIndex < structure.length)\n                ? this.executePattern(pattern, structure[actualIndex], symbolTable)\n                : FAILURE_VALUE;\n\n            // if we processed enough, continue, else failure\n            if (value === FAILURE_VALUE) {\n                if (i >= start) {\n                    break;\n                }\n\n                return FAILURE_VALUE;\n            }\n\n            // save result\n            assign(symbolTable, element.assignTo, value);\n            result.push(value);\n        }\n\n        return result;\n    }\n\n    /*\n     * Execute array element group pattern\n     *\n     * @param {Object} element\n     * @param {number} index\n     * @param {*} structure\n     * @param {Object} symbolTable\n     * @returns {Array|undefined}\n     */\n    executeArrayElementGroupPattern(group, index, structure, symbolTable) {\n        const {elements, range: {start, stop}} = group;\n        let result = [];\n\n        for (const element of elements) {\n            for (let i = 0; i < stop; i++) {\n                const results = this.executeArrayPatternElement(element, index, structure, symbolTable);\n\n                if (results === FAILURE_VALUE) {\n                    if (i >= start) {\n                        return result;\n                    }\n\n                    return FAILURE_VALUE;\n                }\n\n                result = result.concat(results);\n                index += results.length;\n            }\n        }\n\n        return result;\n    }\n\n    /*\n     * Execute a method and return its value\n     *\n     * @param {object} expression\n     * @param {object} symbolTable\n     * @returns {*}\n     */\n    executeGenerator(expression, symbolTable) {\n        const getNumbers = operation => {\n            const left = this.executeGenerator(expression.left.expression, symbolTable);\n\n            if (left !== FAILURE_VALUE && typeof left === \"number\") {\n                const right = this.executeGenerator(expression.right.expression, symbolTable);\n\n                if (right !== FAILURE_VALUE && typeof right === \"number\") {\n                    return operation(left, right);\n                }\n            }\n\n            return FAILURE_VALUE;\n        };\n\n        switch (expression.type) {\n            case \"get-value\":\n                return symbolTable[expression.name];\n\n            case \"get-property\": {\n                const object = this.executeGenerator(expression.left, symbolTable);\n\n                return (isObject(object)) ? object[expression.right] : FAILURE_VALUE;\n            }\n\n            case \"add\": {\n                return getNumbers((a, b) => a + b);\n            }\n\n            case \"subtract\": {\n                return getNumbers((a, b) => a - b);\n            }\n\n            case \"multiply\": {\n                return getNumbers((a, b) => a * b);\n            }\n\n            case \"divide\": {\n                return getNumbers((a, b) => a / b);\n            }\n\n            case \"invoke\": {\n                const args = expression.args.map(arg => this.executeGenerator(arg.expression, symbolTable));\n\n                return this.createType(expression.name, args);\n            }\n\n            case \"array\":\n                return expression.value.map(\n                    elementExpression => this.executeGenerator(elementExpression.expression, symbolTable)\n                );\n\n            case \"boolean\":\n            case \"null\":\n            case \"number\":\n            case \"string\":\n            case \"undefined\":\n                return expression.value;\n\n            case \"object\": {\n                const result = {};\n\n                for (const propertyExpression of expression.value) {\n                    result[propertyExpression.name] = this.executeGenerator(propertyExpression.expression, symbolTable);\n                }\n\n                return result;\n            }\n\n            default:\n                this.addError(`Unrecognized generator expression type: '${expression.type}'`);\n                return FAILURE_VALUE;\n        }\n    }\n\n    /*\n     * Invoke a user-defined method and return its value\n     *\n     * @param {string} type\n     * @param {Array} args\n     * @returns {*}\n     */\n    createType(type, args) {\n        if (type in this.typeCreators) {\n            return this.typeCreators[type](...args);\n        }\n        else if (\"*\" in this.typeCreators) {\n            return this.typeCreators[\"*\"](type, args);\n        }\n\n        return FAILURE_VALUE;\n    }\n}\n\n/**\n * Add a symbol/value to the symbol table, warning if an overwrite is occurring\n *\n * @param {Object} symbolTable\n * @param {string} name\n * @param {*} value\n */\nfunction assign(symbolTable, name, value) {\n    if (name !== null && name !== undefined) {\n        if (name in symbolTable) {\n            /* eslint-disable-next-line no-console */\n            console.log(`warning: overwriting ${name} in symbol table`);\n        }\n\n        symbolTable[name] = value;\n    }\n}\n","/**\n *  ShapeInfo.js\n *  @copyright 2002, 2017 Kevin Lindsey\n */\n\nimport {Point2D} from \"kld-affine\";\nimport {Transformer} from \"kld-data-transformer\";\n\n/**\n *  ShapeInfo\n *  @memberof module:kld-intersections\n */\nexport default class ShapeInfo {\n    /**\n     *  @param {string} name\n     *  @param {Array} args\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    constructor(name, args) {\n        this.name = name;\n        this.args = args;\n    }\n\n    static arc(...args) {\n        return create(ShapeInfo.ARC, args, [\"center\", \"radiusX\", \"radiusY\", \"startRadians\", \"endRadians\"]);\n    }\n\n    static quadraticBezier(...args) {\n        return create(ShapeInfo.QUADRATIC_BEZIER, args, [\"p1\", \"p2\", \"p3\"]);\n    }\n\n    static cubicBezier(...args) {\n        return create(ShapeInfo.CUBIC_BEZIER, args, [\"p1\", \"p2\", \"p3\", \"p4\"]);\n    }\n\n    static circle(...args) {\n        return create(ShapeInfo.CIRCLE, args, [\"center\", \"radius\"]);\n    }\n\n    static ellipse(...args) {\n        return create(ShapeInfo.ELLIPSE, args, [\"center\", \"radiusX\", \"radiusY\"]);\n    }\n\n    static line(...args) {\n        return create(ShapeInfo.LINE, args, [\"p1\", \"p2\"]);\n    }\n\n    static path(...args) {\n        return create(ShapeInfo.PATH, args, [\"segments\"]);\n    }\n\n    static polygon(...args) {\n        return create(ShapeInfo.POLYGON, args, [\"points\"]);\n    }\n\n    static polyline(...args) {\n        return create(ShapeInfo.POLYLINE, args, [\"point\"]);\n    }\n\n    static rectangle(...args) {\n        return create(ShapeInfo.RECTANGLE, args, [\"topLeft\", \"bottomRight\"]);\n    }\n}\n\n/**\n * Create a shape\n *\n * @param {string} type\n * @param {Object} object\n * @param {Array<string>} properties\n * @returns {ShapeInfo}\n */\nfunction create(type, object, properties) {\n    let transformType;\n\n    if (object.length === 1) {\n        object = object[0];\n        transformType = type;\n    }\n    else {\n        transformType = type + \"Array\";\n    }\n\n    // normalize the data\n    const data = transformer.execute(`type ${transformType}`, object);\n\n    if (data === undefined) {\n        throw new TypeError(`${type} is not in a recognizable format: ${JSON.stringify(object)}`);\n    }\n\n    // pull out the arguments\n    const args = properties.map(name => data[name]);\n\n    // return a new ShapeInfo\n    return new ShapeInfo(type, args);\n}\n\n\nShapeInfo.ARC = \"Arc\";\nShapeInfo.QUADRATIC_BEZIER = \"Bezier2\";\nShapeInfo.CUBIC_BEZIER = \"Bezier3\";\nShapeInfo.CIRCLE = \"Circle\";\nShapeInfo.ELLIPSE = \"Ellipse\";\nShapeInfo.LINE = \"Line\";\nShapeInfo.PATH = \"Path\";\nShapeInfo.POLYGON = \"Polygon\";\nShapeInfo.POLYLINE = \"Polyline\";\nShapeInfo.RECTANGLE = \"Rectangle\";\n\nconst transformer = Transformer.fromSource(`\ntransform Center =\n    Point2D(x, y) <=\n            { center: { x: number as x, y: number as y } }\n        |   { center: [ number as x, number as y ] }\n        |   { cx: number as x, cy: number as y }\n        |   { centerX: number as x, centerY: number as y }\n\ntransform Radii =\n    // the generator could also be _, but I like being explicit\n    { rx, ry } <=\n            { radii: { x: number as rx, y: number as ry } }\n        |   { radii: [ number as rx, number as ry ] }\n        |   { rx: number as rx, ry: number as ry }\n        |   { radiusX: number as rx, radiusY: number as ry }\n        \ntransform P1 =\n    Point2D(x, y) <=\n            { p1: { x: number as x, y: number as y } }\n        |   { p1: [ number as x, number as y ] }\n        \ntransform P2 =\n    Point2D(x, y) <=\n            { p2: { x: number as x, y: number as y } }\n        |   { p2: [ number as x, number as y ] }\n        |   { p2x: number as x, p2y: number as y }\n        \ntransform P3 =\n    Point2D(x, y) <=\n            { p3: { x: number as x, y: number as y } }\n        |   { p3: [ number as x, number as y ] }\n        |   { p3x: number as x, p3y: number as y }\n        \ntransform P4 =\n    Point2D(x, y) <=\n            { p4: { x: number as x, y: number as y } }\n        |   { p4: [ number as x, number as y ] }\n        |   { p4x: number as x, p4y: number as y }\n\ntransform Number =\n    _ <= number\n            \ntype ${ShapeInfo.ARC} = {\n    // collect some values so we don't have to repeat queries\n    radii = transform Radii;\n    \n    center: transform Center,\n    radiusX: radii.rx,\n    radiusY: radii.ry,\n    startRadians: transform Number,\n    endRadians: transform Number\n}\n\ntype ${ShapeInfo.ARC}Array = {\n    elements =\n        _ <= [\n            number as centerX,\n            number as centerY,\n            number as radiusX,\n            number as radiusY,\n            number as startRadians,\n            number as endRadians\n        ];\n    \n    center: Point2D(elements.centerX, elements.centerY),\n    radiusX: elements.radiusX,\n    radiusY: elements.radiusY,\n    startRadians: elements.startRadians,\n    endRadians: elements.endRadians\n}\n\ntype ${ShapeInfo.QUADRATIC_BEZIER} = {\n    p1: transform P1,\n    p2: transform P2,\n    p3: transform P3\n}\n\ntype ${ShapeInfo.CUBIC_BEZIER} = {\n    p1: transform P1,\n    p2: transform P2,\n    p3: transform P3,\n    p4: transform P4\n}\n\ntype ${ShapeInfo.CIRCLE} = {\n    center: transform Center,\n    radius: radius <=\n            { r: number as radius}\n        |   { radius: number as radius }\n}\n\ntype ${ShapeInfo.CIRCLE}Array = {\n    elements =\n        _ <=\n                [ number as centerX, number as centerY, number as radius ]\n            |   [ { x: number as centerX, y: number as centerY }, number as radius ];\n    \n    center: Point2D(elements.centerX, elements.centerY),\n    radius: elements.radius\n}\n\ntype ${ShapeInfo.ELLIPSE} = {\n    // collect some values so we don't have to repeat queries\n    radii = transform Radii;\n    \n    center: transform Center,\n    radiusX: radii.rx,\n    radiusY: radii.ry\n}\n\ntype ${ShapeInfo.ELLIPSE}Array = {\n    elements =\n        _ <=\n                [ number as centerX, number as centerY, number as radiusX, number as radiusY ]\n            |   [ { x: number as centerX, y: number as centerY }, number as radiusX, number as radiusY ];\n    \n    center: Point2D(elements.centerX, elements.centerY),\n    radiusX: elements.radiusX,\n    radiusY: elements.radiusY\n}\n\ntype ${ShapeInfo.LINE} = {\n    p1: transform P1,\n    p2: transform P2\n}\n\ntype ${ShapeInfo.LINE}Array = {\n    elements =\n        _ <=\n                [ number as p1x, number as p1y, number as p2x, number as p2y ]\n            |   [ { x: number as p1x, y: number as p1y }, { x: number as p2x, y: number as p2y } ];\n        \n    p1: Point2D(elements.p1x, elements.p1y),\n    p2: Point2D(elements.p2x, elements.p2y)\n}\n\ntype ${ShapeInfo.PATH} = {\n    segments:\n        PathData(data) <= { d: string as data }\n}\n\ntype ${ShapeInfo.POLYGON} = {\n    points:\n        ListOfCoords(coords) <= { points: [ (number, number); 0..] as coords };\n        ListOfPoints(points) <= { points: [ { x: number, y: number }; 0.. ] as points }\n}\n\ntype ${ShapeInfo.POLYGON}Array = {\n    elements =\n        ListOfCoords(coords) <=\n                [ (number, number); 0..] as coords;\n        \n    points: elements\n}\n\ntype ${ShapeInfo.POLYLINE} = {\n    points:\n        ListOfCoords(coords) <= { points: [ (number, number); 0..] as coords };\n        ListOfPoints(points) <= { points: [ { x: number, y: number }; 0.. ] as points }\n}\n\ntype ${ShapeInfo.POLYLINE}Array = {\n    elements =\n        ListOfCoords(coords) <=\n                [ (number, number); 0..] as coords;\n        \n    points: elements\n}\n\ntype ${ShapeInfo.RECTANGLE} = {\n    // collect top-left point in case we need to do math with it for\n    // bottom-right\n    topLeft =\n        // could also be _\n        { x, y } <=\n                { topLeft: { x: number as x, y: number as y } }\n            |   { topLeft: [ number as x, number as y ] }\n            |   { x: number as x, y: number as y }\n            |   { top: number as x, left: number as y };\n\n    topLeft:\n        Point2D(topLeft.x, topLeft.y),\n\n    bottomRight:\n        Point2D(x, y) <=\n                { bottomRight: { x: number as x, y: number as y } }\n            |   { bottomRight: [ number as x, number as y ] };\n        Point2D(topLeft.x + w, topLeft.y + h) <=\n                { w: number as w, h: number as h }\n            |   { width: number as w, height: number as h }\n            |   { size: { x: number as w, y: number as h } }\n            |   { size: [ number as w, number as h ] }\n}\n\ntype ${ShapeInfo.RECTANGLE}Array = {\n    elements =\n        _ <=\n                [ number as x, number as y, number as width, number as height ]\n            |   [ { x: number as x, y: number as y }, { x: number as width, y: number as height } ];\n    \n    topLeft: Point2D(elements.x, elements.y),\n    bottomRight: Point2D(elements.x + elements.width, elements.y + elements.height)\n}\n`);\n\n// console.log(util.inspect(normalizer.types.Circle, { depth: Infinity, colors: true }));\n\ntransformer.typeCreators.Point2D = (x, y) => new Point2D(x, y);\ntransformer.typeCreators.ListOfCoords = ps => {\n    const result = [];\n\n    for (let i = 0; i < ps.length; i += 2) {\n        const x = ps[i];\n        const y = ps[i + 1];\n\n        result.push(new Point2D(x, y));\n    }\n\n    return result;\n};\ntransformer.typeCreators.ListOfPoints = ps => ps.map(p => {\n    return new Point2D(p.x, p.y);\n});\n","/* eslint-disable camelcase, no-labels */\n/**\n *\n *  Intersection.js\n *\n *  copyright 2002, 2013 Kevin Lindsey\n */\n\nimport {Point2D, Vector2D} from \"kld-affine\";\nimport {Polynomial} from \"kld-polynomial\";\nimport ShapeInfo from \"./ShapeInfo.js\";\n\nconst TWO_PI = 2.0 * Math.PI;\nconst UNIT_X = new Vector2D(1, 0);\n\n/**\n * @memberof module:kld-intersections.Intersection~\n * @param {*} o\n * @returns {boolean}\n */\nfunction isNullish(o) {\n    return o === null || o === undefined;\n}\n\n/**\n *  bezout\n *\n *  This code is based on MgcIntr2DElpElp.cpp written by David Eberly.  His\n *  code along with many other excellent examples are avaiable at his site:\n *  http://www.magic-software.com\n *\n *  @param {Array<module:kld-intersections.Point2D>} e1\n *  @param {Array<module:kld-intersections.Point2D>} e2\n *  @returns {external:Polynomial}\n */\nfunction bezout(e1, e2) {\n    const AB = e1[0] * e2[1] - e2[0] * e1[1];\n    const AC = e1[0] * e2[2] - e2[0] * e1[2];\n    const AD = e1[0] * e2[3] - e2[0] * e1[3];\n    const AE = e1[0] * e2[4] - e2[0] * e1[4];\n    const AF = e1[0] * e2[5] - e2[0] * e1[5];\n    const BC = e1[1] * e2[2] - e2[1] * e1[2];\n    const BE = e1[1] * e2[4] - e2[1] * e1[4];\n    const BF = e1[1] * e2[5] - e2[1] * e1[5];\n    const CD = e1[2] * e2[3] - e2[2] * e1[3];\n    const DE = e1[3] * e2[4] - e2[3] * e1[4];\n    const DF = e1[3] * e2[5] - e2[3] * e1[5];\n    const BFpDE = BF + DE;\n    const BEmCD = BE - CD;\n\n    return new Polynomial(\n        AB * BC - AC * AC,\n        AB * BEmCD + AD * BC - 2 * AC * AE,\n        AB * BFpDE + AD * BEmCD - AE * AE - 2 * AC * AF,\n        AB * DF + AD * BFpDE - 2 * AE * AF,\n        AD * DF - AF * AF\n    );\n}\n\n/**\n * normalizeAngle\n *\n * @param {number} radians\n * @returns {number}\n */\nfunction normalizeAngle(radians) {\n    const normal = radians % TWO_PI;\n\n    return normal < 0.0 ? normal + TWO_PI : normal;\n}\n\n/**\n * restrictPointsToArc\n *\n * @param {module:kld-intersections.Intersection} intersections\n * @param {module:kld-intersections.Point2D} center\n * @param {number} radiusX\n * @param {number} radiusY\n * @param {number} startRadians\n * @param {number} endRadians\n * @returns {module:kld-intersections.Intersection}\n */\nfunction restrictPointsToArc(intersections, center, radiusX, radiusY, startRadians, endRadians) {\n    if (intersections.points.length === 0) {\n        return intersections;\n    }\n\n    const result = new Intersection(\"No Intersection\");\n    const startNormal = normalizeAngle(startRadians);\n    let endNormal = normalizeAngle(endRadians);\n\n    // Advance end angle one turn if it's lower than the start angle so our interval test will work correctly\n    if (endNormal < startNormal) {\n        endNormal += TWO_PI;\n    }\n\n    console.log(`[startRadians = ${startRadians} endRadians = ${endRadians}]`);\n    console.log(`[startNormal = ${startNormal} endRadians = ${endNormal}]`);\n\n    for (const p of intersections.points) {\n        const a = normalizeAngle(UNIT_X.angleBetween(Vector2D.fromPoints(center, p)));\n\n        if (startNormal <= a && a <= endNormal) {\n            result.appendPoint(p);\n        }\n    }\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n}\n\n/**\n *  closePolygon\n *  @memberof module:kld-intersections.Intersection~\n *  @param {Array<module:kld-intersections.Point2D>} points\n *  @returns {Array<module:kld-intersections.Point2D>}\n */\nfunction closePolygon(points) {\n    const copy = points.slice();\n\n    copy.push(points[0]);\n\n    return copy;\n}\n\n/**\n * Intersection\n * @memberof module:kld-intersections\n */\nclass Intersection {\n    /**\n     *  @param {string} status\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    constructor(status) {\n        this.init(status);\n    }\n\n\n    /**\n     *  init\n     *\n     *  @param {string} status\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    init(status) {\n        this.status = status;\n        this.points = [];\n    }\n\n    /**\n     *  intersect\n     *\n     *  @param {module:kld-intersections.ShapeInfo} shape1\n     *  @param {module:kld-intersections.ShapeInfo} shape2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersect(shape1, shape2) {\n        let result;\n\n        if (!isNullish(shape1) && !isNullish(shape2)) {\n            if (shape1.name === \"Path\") {\n                result = Intersection.intersectPathShape(shape1, shape2);\n            }\n            else if (shape2.name === \"Path\") {\n                result = Intersection.intersectPathShape(shape2, shape1);\n            }\n            else if (shape1.name === \"Arc\") {\n                result = Intersection.intersectArcShape(shape1, shape2);\n            }\n            else if (shape2.name === \"Arc\") {\n                result = Intersection.intersectArcShape(shape2, shape1);\n            }\n            else {\n                let method;\n                let args;\n\n                if (shape1.name < shape2.name) {\n                    method = \"intersect\" + shape1.name + shape2.name;\n                    args = shape1.args.concat(shape2.args);\n                }\n                else {\n                    method = \"intersect\" + shape2.name + shape1.name;\n                    args = shape2.args.concat(shape1.args);\n                }\n\n                if (!(method in Intersection)) {\n                    throw new TypeError(\"Intersection not available: \" + method);\n                }\n\n                result = Intersection[method].apply(null, args);\n            }\n        }\n        else {\n            result = new Intersection(\"No Intersection\");\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectPathShape\n     *\n     *  @param {module:kld-intersections.ShapeInfo} path\n     *  @param {module:kld-intersections.ShapeInfo} shape\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPathShape(path, shape) {\n        const result = new Intersection(\"No Intersection\");\n\n        for (const segment of path.args) {\n            const inter = Intersection.intersect(segment, shape);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     * intersectArcShape\n     *\n     * @param {module:kld-intersections.ShapeInfo} arc\n     * @param {module:kld-intersections.ShapeInfo} shape\n     * @returns {module:kld-intersections.Intersection}\n     */\n    static intersectArcShape(arc, shape) {\n        const [center, radiusX, radiusY, startRadians, endRadians] = arc.args;\n        const ellipse = new ShapeInfo(ShapeInfo.ELLIPSE, [center, radiusX, radiusY]);\n        const ellipse_result = Intersection.intersect(ellipse, shape);\n\n        // return ellipse_result;\n        return restrictPointsToArc(ellipse_result, center, radiusX, radiusY, startRadians, endRadians);\n    }\n\n    /**\n     *  intersectBezier2Bezier2\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} a3\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @param {module:kld-intersections.Point2D} b3\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Bezier2(a1, a2, a3, b1, b2, b3) {\n        let a, b;\n        const result = new Intersection(\"No Intersection\");\n\n        a = a2.multiply(-2);\n        const c12 = a1.add(a.add(a3));\n\n        a = a1.multiply(-2);\n        b = a2.multiply(2);\n        const c11 = a.add(b);\n\n        const c10 = new Point2D(a1.x, a1.y);\n\n        a = b2.multiply(-2);\n        const c22 = b1.add(a.add(b3));\n\n        a = b1.multiply(-2);\n        b = b2.multiply(2);\n        const c21 = a.add(b);\n\n        const c20 = new Point2D(b1.x, b1.y);\n\n        // bezout\n        a = c12.x * c11.y - c11.x * c12.y;\n        b = c22.x * c11.y - c11.x * c22.y;\n        const c = c21.x * c11.y - c11.x * c21.y;\n        const d = c11.x * (c10.y - c20.y) + c11.y * (-c10.x + c20.x);\n        const e = c22.x * c12.y - c12.x * c22.y;\n        const f = c21.x * c12.y - c12.x * c21.y;\n        const g = c12.x * (c10.y - c20.y) + c12.y * (-c10.x + c20.x);\n\n        // determinant\n        const poly = new Polynomial(\n            -e * e,\n            -2 * e * f,\n            a * b - f * f - 2 * e * g,\n            a * c - 2 * f * g,\n            a * d - g * g\n        );\n\n        const roots = poly.getRoots();\n\n        for (const s of roots) {\n            if (0 <= s && s <= 1) {\n                const xp = new Polynomial(\n                    c12.x,\n                    c11.x,\n                    c10.x - c20.x - s * c21.x - s * s * c22.x\n                );\n                xp.simplifyEquals();\n                const xRoots = xp.getRoots();\n                const yp = new Polynomial(\n                    c12.y,\n                    c11.y,\n                    c10.y - c20.y - s * c21.y - s * s * c22.y\n                );\n                yp.simplifyEquals();\n                const yRoots = yp.getRoots();\n\n                if (xRoots.length > 0 && yRoots.length > 0) {\n                    const TOLERANCE = 1e-4;\n\n                    checkRoots:\n                    for (const xRoot of xRoots) {\n                        if (0 <= xRoot && xRoot <= 1) {\n                            for (let k = 0; k < yRoots.length; k++) {\n                                if (Math.abs(xRoot - yRoots[k]) < TOLERANCE) {\n                                    result.points.push(c22.multiply(s * s).add(c21.multiply(s).add(c20)));\n                                    break checkRoots;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Bezier3\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} a3\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @param {module:kld-intersections.Point2D} b3\n     *  @param {module:kld-intersections.Point2D} b4\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Bezier3(a1, a2, a3, b1, b2, b3, b4) {\n        let a, b, c, d;\n        const result = new Intersection(\"No Intersection\");\n\n        a = a2.multiply(-2);\n        const c12 = a1.add(a.add(a3));\n\n        a = a1.multiply(-2);\n        b = a2.multiply(2);\n        const c11 = a.add(b);\n\n        const c10 = new Point2D(a1.x, a1.y);\n\n        a = b1.multiply(-1);\n        b = b2.multiply(3);\n        c = b3.multiply(-3);\n        d = a.add(b.add(c.add(b4)));\n        const c23 = new Point2D(d.x, d.y);\n\n        a = b1.multiply(3);\n        b = b2.multiply(-6);\n        c = b3.multiply(3);\n        d = a.add(b.add(c));\n        const c22 = new Point2D(d.x, d.y);\n\n        a = b1.multiply(-3);\n        b = b2.multiply(3);\n        c = a.add(b);\n        const c21 = new Point2D(c.x, c.y);\n\n        const c20 = new Point2D(b1.x, b1.y);\n\n        const c10x2 = c10.x * c10.x;\n        const c10y2 = c10.y * c10.y;\n        const c11x2 = c11.x * c11.x;\n        const c11y2 = c11.y * c11.y;\n        const c12x2 = c12.x * c12.x;\n        const c12y2 = c12.y * c12.y;\n        const c20x2 = c20.x * c20.x;\n        const c20y2 = c20.y * c20.y;\n        const c21x2 = c21.x * c21.x;\n        const c21y2 = c21.y * c21.y;\n        const c22x2 = c22.x * c22.x;\n        const c22y2 = c22.y * c22.y;\n        const c23x2 = c23.x * c23.x;\n        const c23y2 = c23.y * c23.y;\n\n        const poly = new Polynomial(\n            -2 * c12.x * c12.y * c23.x * c23.y + c12x2 * c23y2 + c12y2 * c23x2,\n            -2 * c12.x * c12.y * c22.x * c23.y - 2 * c12.x * c12.y * c22.y * c23.x + 2 * c12y2 * c22.x * c23.x +\n                2 * c12x2 * c22.y * c23.y,\n            -2 * c12.x * c21.x * c12.y * c23.y - 2 * c12.x * c12.y * c21.y * c23.x - 2 * c12.x * c12.y * c22.x * c22.y +\n                2 * c21.x * c12y2 * c23.x + c12y2 * c22x2 + c12x2 * (2 * c21.y * c23.y + c22y2),\n            2 * c10.x * c12.x * c12.y * c23.y + 2 * c10.y * c12.x * c12.y * c23.x + c11.x * c11.y * c12.x * c23.y +\n                c11.x * c11.y * c12.y * c23.x - 2 * c20.x * c12.x * c12.y * c23.y - 2 * c12.x * c20.y * c12.y * c23.x -\n                2 * c12.x * c21.x * c12.y * c22.y - 2 * c12.x * c12.y * c21.y * c22.x - 2 * c10.x * c12y2 * c23.x -\n                2 * c10.y * c12x2 * c23.y + 2 * c20.x * c12y2 * c23.x + 2 * c21.x * c12y2 * c22.x -\n                c11y2 * c12.x * c23.x - c11x2 * c12.y * c23.y + c12x2 * (2 * c20.y * c23.y + 2 * c21.y * c22.y),\n            2 * c10.x * c12.x * c12.y * c22.y + 2 * c10.y * c12.x * c12.y * c22.x + c11.x * c11.y * c12.x * c22.y +\n                c11.x * c11.y * c12.y * c22.x - 2 * c20.x * c12.x * c12.y * c22.y - 2 * c12.x * c20.y * c12.y * c22.x -\n                2 * c12.x * c21.x * c12.y * c21.y - 2 * c10.x * c12y2 * c22.x - 2 * c10.y * c12x2 * c22.y +\n                2 * c20.x * c12y2 * c22.x - c11y2 * c12.x * c22.x - c11x2 * c12.y * c22.y + c21x2 * c12y2 +\n                c12x2 * (2 * c20.y * c22.y + c21y2),\n            2 * c10.x * c12.x * c12.y * c21.y + 2 * c10.y * c12.x * c21.x * c12.y + c11.x * c11.y * c12.x * c21.y +\n                c11.x * c11.y * c21.x * c12.y - 2 * c20.x * c12.x * c12.y * c21.y - 2 * c12.x * c20.y * c21.x * c12.y -\n                2 * c10.x * c21.x * c12y2 - 2 * c10.y * c12x2 * c21.y + 2 * c20.x * c21.x * c12y2 -\n                c11y2 * c12.x * c21.x - c11x2 * c12.y * c21.y + 2 * c12x2 * c20.y * c21.y,\n            -2 * c10.x * c10.y * c12.x * c12.y - c10.x * c11.x * c11.y * c12.y - c10.y * c11.x * c11.y * c12.x +\n                2 * c10.x * c12.x * c20.y * c12.y + 2 * c10.y * c20.x * c12.x * c12.y + c11.x * c20.x * c11.y * c12.y +\n                c11.x * c11.y * c12.x * c20.y - 2 * c20.x * c12.x * c20.y * c12.y - 2 * c10.x * c20.x * c12y2 +\n                c10.x * c11y2 * c12.x + c10.y * c11x2 * c12.y - 2 * c10.y * c12x2 * c20.y -\n                c20.x * c11y2 * c12.x - c11x2 * c20.y * c12.y + c10x2 * c12y2 + c10y2 * c12x2 +\n                c20x2 * c12y2 + c12x2 * c20y2\n        );\n        const roots = poly.getRootsInInterval(0, 1);\n\n        for (const s of roots) {\n            const xRoots = new Polynomial(\n                c12.x,\n                c11.x,\n                c10.x - c20.x - s * c21.x - s * s * c22.x - s * s * s * c23.x\n            ).getRoots();\n            const yRoots = new Polynomial(\n                c12.y,\n                c11.y,\n                c10.y - c20.y - s * c21.y - s * s * c22.y - s * s * s * c23.y\n            ).getRoots();\n\n            if (xRoots.length > 0 && yRoots.length > 0) {\n                const TOLERANCE = 1e-4;\n\n                checkRoots:\n                for (const xRoot of xRoots) {\n                    if (0 <= xRoot && xRoot <= 1) {\n                        for (let k = 0; k < yRoots.length; k++) {\n                            if (Math.abs(xRoot - yRoots[k]) < TOLERANCE) {\n                                result.points.push(\n                                    c23.multiply(s * s * s).add(c22.multiply(s * s).add(c21.multiply(s).add(c20)))\n                                );\n                                break checkRoots;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Circle\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Circle(p1, p2, p3, c, r) {\n        return Intersection.intersectBezier2Ellipse(p1, p2, p3, c, r, r);\n    }\n\n    /**\n     *  intersectBezier2Ellipse\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} ec\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Ellipse(p1, p2, p3, ec, rx, ry) {\n        let a; // temporary variables\n        // c2, c1, c0; // coefficients of quadratic\n        const result = new Intersection(\"No Intersection\");\n\n        a = p2.multiply(-2);\n        const c2 = p1.add(a.add(p3));\n\n        a = p1.multiply(-2);\n        const b = p2.multiply(2);\n        const c1 = a.add(b);\n\n        const c0 = new Point2D(p1.x, p1.y);\n\n        const rxrx = rx * rx;\n        const ryry = ry * ry;\n        const roots = new Polynomial(\n            ryry * c2.x * c2.x + rxrx * c2.y * c2.y,\n            2 * (ryry * c2.x * c1.x + rxrx * c2.y * c1.y),\n            ryry * (2 * c2.x * c0.x + c1.x * c1.x) + rxrx * (2 * c2.y * c0.y + c1.y * c1.y) -\n                2 * (ryry * ec.x * c2.x + rxrx * ec.y * c2.y),\n            2 * (ryry * c1.x * (c0.x - ec.x) + rxrx * c1.y * (c0.y - ec.y)),\n            ryry * (c0.x * c0.x + ec.x * ec.x) + rxrx * (c0.y * c0.y + ec.y * ec.y) -\n                2 * (ryry * ec.x * c0.x + rxrx * ec.y * c0.y) - rxrx * ryry\n        ).getRoots();\n\n        for (const t of roots) {\n            if (0 <= t && t <= 1) {\n                result.points.push(c2.multiply(t * t).add(c1.multiply(t).add(c0)));\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Line\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Line(p1, p2, p3, a1, a2) {\n        let a; // temporary variables\n        // let c2, c1, c0; // coefficients of quadratic\n        // cl; // c coefficient for normal form of line\n        // n; // normal for normal form of line\n        const min = a1.min(a2); // used to determine if point is on line segment\n        const max = a1.max(a2); // used to determine if point is on line segment\n        const result = new Intersection(\"No Intersection\");\n\n        a = p2.multiply(-2);\n        const c2 = p1.add(a.add(p3));\n\n        a = p1.multiply(-2);\n        const b = p2.multiply(2);\n        const c1 = a.add(b);\n\n        const c0 = new Point2D(p1.x, p1.y);\n\n        // Convert line to normal form: ax + by + c = 0\n        // Find normal to line: negative inverse of original line's slope\n        const n = new Vector2D(a1.y - a2.y, a2.x - a1.x);\n\n        // Determine new c coefficient\n        const cl = a1.x * a2.y - a2.x * a1.y;\n\n        // Transform cubic coefficients to line's coordinate system and find roots\n        // of cubic\n        const roots = new Polynomial(\n            n.dot(c2),\n            n.dot(c1),\n            n.dot(c0) + cl\n        ).getRoots();\n\n        // Any roots in closed interval [0,1] are intersections on Bezier, but\n        // might not be on the line segment.\n        // Find intersections and calculate point coordinates\n        for (const t of roots) {\n            if (0 <= t && t <= 1) {\n                // We're within the Bezier curve\n                // Find point on Bezier\n                const p4 = p1.lerp(p2, t);\n                const p5 = p2.lerp(p3, t);\n\n                const p6 = p4.lerp(p5, t);\n\n                // See if point is on line segment\n                // Had to make special cases for vertical and horizontal lines due\n                // to slight errors in calculation of p6\n                if (a1.x === a2.x) {\n                    if (min.y <= p6.y && p6.y <= max.y) {\n                        result.status = \"Intersection\";\n                        result.appendPoint(p6);\n                    }\n                }\n                else if (a1.y === a2.y) {\n                    if (min.x <= p6.x && p6.x <= max.x) {\n                        result.status = \"Intersection\";\n                        result.appendPoint(p6);\n                    }\n                }\n                else if (min.x <= p6.x && p6.x <= max.x && min.y <= p6.y && p6.y <= max.y) {\n                    result.status = \"Intersection\";\n                    result.appendPoint(p6);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Polygon\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Polygon(p1, p2, p3, points) {\n        return Intersection.intersectBezier2Polyline(p1, p2, p3, closePolygon(points));\n    }\n\n    /**\n     *  intersectBezier2Polyline\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Polyline(p1, p2, p3, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n\n        for (let i = 0; i < len - 1; i++) {\n            const a1 = points[i];\n            const a2 = points[i + 1];\n            const inter = Intersection.intersectBezier2Line(p1, p2, p3, a1, a2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier2Rectangle\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier2Rectangle(p1, p2, p3, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectBezier2Line(p1, p2, p3, min, topRight);\n        const inter2 = Intersection.intersectBezier2Line(p1, p2, p3, topRight, max);\n        const inter3 = Intersection.intersectBezier2Line(p1, p2, p3, max, bottomLeft);\n        const inter4 = Intersection.intersectBezier2Line(p1, p2, p3, bottomLeft, min);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Bezier3\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} a3\n     *  @param {module:kld-intersections.Point2D} a4\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @param {module:kld-intersections.Point2D} b3\n     *  @param {module:kld-intersections.Point2D} b4\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Bezier3(a1, a2, a3, a4, b1, b2, b3, b4) {\n        let a, b, c, d; // temporary variables\n        // c13, c12, c11, c10; // coefficients of cubic\n        // c23, c22, c21, c20; // coefficients of cubic\n        const result = new Intersection(\"No Intersection\");\n\n        // Calculate the coefficients of cubic polynomial\n        a = a1.multiply(-1);\n        b = a2.multiply(3);\n        c = a3.multiply(-3);\n        d = a.add(b.add(c.add(a4)));\n        const c13 = new Point2D(d.x, d.y);\n\n        a = a1.multiply(3);\n        b = a2.multiply(-6);\n        c = a3.multiply(3);\n        d = a.add(b.add(c));\n        const c12 = new Point2D(d.x, d.y);\n\n        a = a1.multiply(-3);\n        b = a2.multiply(3);\n        c = a.add(b);\n        const c11 = new Point2D(c.x, c.y);\n\n        const c10 = new Point2D(a1.x, a1.y);\n\n        a = b1.multiply(-1);\n        b = b2.multiply(3);\n        c = b3.multiply(-3);\n        d = a.add(b.add(c.add(b4)));\n        const c23 = new Point2D(d.x, d.y);\n\n        a = b1.multiply(3);\n        b = b2.multiply(-6);\n        c = b3.multiply(3);\n        d = a.add(b.add(c));\n        const c22 = new Point2D(d.x, d.y);\n\n        a = b1.multiply(-3);\n        b = b2.multiply(3);\n        c = a.add(b);\n        const c21 = new Point2D(c.x, c.y);\n\n        const c20 = new Point2D(b1.x, b1.y);\n\n        // bezout\n        a = c13.x * c12.y - c12.x * c13.y;\n        b = c13.x * c11.y - c11.x * c13.y;\n        const c0 = c13.x * c10.y - c10.x * c13.y + c20.x * c13.y - c13.x * c20.y;\n        const c1 = c21.x * c13.y - c13.x * c21.y;\n        const c2 = c22.x * c13.y - c13.x * c22.y;\n        const c3 = c23.x * c13.y - c13.x * c23.y;\n        d = c13.x * c11.y - c11.x * c13.y;\n        const e0 = c13.x * c10.y + c12.x * c11.y - c11.x * c12.y - c10.x * c13.y + c20.x * c13.y - c13.x * c20.y;\n        const e1 = c21.x * c13.y - c13.x * c21.y;\n        const e2 = c22.x * c13.y - c13.x * c22.y;\n        const e3 = c23.x * c13.y - c13.x * c23.y;\n        const f0 = c12.x * c10.y - c10.x * c12.y + c20.x * c12.y - c12.x * c20.y;\n        const f1 = c21.x * c12.y - c12.x * c21.y;\n        const f2 = c22.x * c12.y - c12.x * c22.y;\n        const f3 = c23.x * c12.y - c12.x * c23.y;\n        const g0 = c13.x * c10.y - c10.x * c13.y + c20.x * c13.y - c13.x * c20.y;\n        const g1 = c21.x * c13.y - c13.x * c21.y;\n        const g2 = c22.x * c13.y - c13.x * c22.y;\n        const g3 = c23.x * c13.y - c13.x * c23.y;\n        const h0 = c12.x * c10.y - c10.x * c12.y + c20.x * c12.y - c12.x * c20.y;\n        const h1 = c21.x * c12.y - c12.x * c21.y;\n        const h2 = c22.x * c12.y - c12.x * c22.y;\n        const h3 = c23.x * c12.y - c12.x * c23.y;\n        const i0 = c11.x * c10.y - c10.x * c11.y + c20.x * c11.y - c11.x * c20.y;\n        const i1 = c21.x * c11.y - c11.x * c21.y;\n        const i2 = c22.x * c11.y - c11.x * c22.y;\n        const i3 = c23.x * c11.y - c11.x * c23.y;\n\n        // determinant\n        const poly = new Polynomial(\n            -c3 * e3 * g3,\n            -c3 * e3 * g2 - c3 * e2 * g3 - c2 * e3 * g3,\n            -c3 * e3 * g1 - c3 * e2 * g2 - c2 * e3 * g2 - c3 * e1 * g3 - c2 * e2 * g3 - c1 * e3 * g3,\n            -c3 * e3 * g0 - c3 * e2 * g1 - c2 * e3 * g1 - c3 * e1 * g2 - c2 * e2 * g2 - c1 * e3 * g2 - c3 * e0 * g3 - c2 * e1 * g3 - c1 * e2 * g3 - c0 * e3 * g3 + b * f3 * g3 + c3 * d * h3 - a * f3 * h3 + a * e3 * i3,\n            -c3 * e2 * g0 - c2 * e3 * g0 - c3 * e1 * g1 - c2 * e2 * g1 - c1 * e3 * g1 - c3 * e0 * g2 - c2 * e1 * g2 - c1 * e2 * g2 - c0 * e3 * g2 + b * f3 * g2 - c2 * e0 * g3 - c1 * e1 * g3 - c0 * e2 * g3 + b * f2 * g3 + c3 * d * h2 - a * f3 * h2 + c2 * d * h3 - a * f2 * h3 + a * e3 * i2 + a * e2 * i3,\n            -c3 * e1 * g0 - c2 * e2 * g0 - c1 * e3 * g0 - c3 * e0 * g1 - c2 * e1 * g1 - c1 * e2 * g1 - c0 * e3 * g1 + b * f3 * g1 - c2 * e0 * g2 - c1 * e1 * g2 - c0 * e2 * g2 + b * f2 * g2 - c1 * e0 * g3 - c0 * e1 * g3 + b * f1 * g3 + c3 * d * h1 - a * f3 * h1 + c2 * d * h2 - a * f2 * h2 + c1 * d * h3 - a * f1 * h3 + a * e3 * i1 + a * e2 * i2 + a * e1 * i3,\n            -c3 * e0 * g0 - c2 * e1 * g0 - c1 * e2 * g0 - c0 * e3 * g0 + b * f3 * g0 - c2 * e0 * g1 - c1 * e1 * g1 - c0 * e2 * g1 + b * f2 * g1 - c1 * e0 * g2 - c0 * e1 * g2 + b * f1 * g2 - c0 * e0 * g3 + b * f0 * g3 + c3 * d * h0 - a * f3 * h0 + c2 * d * h1 - a * f2 * h1 + c1 * d * h2 - a * f1 * h2 + c0 * d * h3 - a * f0 * h3 + a * e3 * i0 + a * e2 * i1 + a * e1 * i2 - b * d * i3 + a * e0 * i3,\n            -c2 * e0 * g0 - c1 * e1 * g0 - c0 * e2 * g0 + b * f2 * g0 - c1 * e0 * g1 - c0 * e1 * g1 + b * f1 * g1 - c0 * e0 * g2 + b * f0 * g2 + c2 * d * h0 - a * f2 * h0 + c1 * d * h1 - a * f1 * h1 + c0 * d * h2 - a * f0 * h2 + a * e2 * i0 + a * e1 * i1 - b * d * i2 + a * e0 * i2,\n            -c1 * e0 * g0 - c0 * e1 * g0 + b * f1 * g0 - c0 * e0 * g1 + b * f0 * g1 + c1 * d * h0 - a * f1 * h0 + c0 * d * h1 - a * f0 * h1 + a * e1 * i0 - b * d * i1 + a * e0 * i1,\n            -c0 * e0 * g0 + b * f0 * g0 + c0 * d * h0 - a * f0 * h0 - b * d * i0 + a * e0 * i0\n        );\n        poly.simplifyEquals();\n        const roots = poly.getRootsInInterval(0, 1);\n\n        for (const s of roots) {\n            const xp = new Polynomial(\n                c13.x,\n                c12.x,\n                c11.x,\n                c10.x - c20.x - s * c21.x - s * s * c22.x - s * s * s * c23.x\n            );\n            xp.simplifyEquals();\n            const xRoots = xp.getRoots();\n            const yp = new Polynomial(\n                c13.y,\n                c12.y,\n                c11.y,\n                c10.y - c20.y - s * c21.y - s * s * c22.y - s * s * s * c23.y\n            );\n            yp.simplifyEquals();\n            const yRoots = yp.getRoots();\n\n            if (xRoots.length > 0 && yRoots.length > 0) {\n                const TOLERANCE = 1e-4;\n\n                checkRoots:\n                for (const xRoot of xRoots) {\n                    if (0 <= xRoot && xRoot <= 1) {\n                        for (let k = 0; k < yRoots.length; k++) {\n                            if (Math.abs(xRoot - yRoots[k]) < TOLERANCE) {\n                                result.points.push(\n                                    c23.multiply(s * s * s).add(c22.multiply(s * s).add(c21.multiply(s).add(c20)))\n                                );\n                                break checkRoots;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Circle\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Circle(p1, p2, p3, p4, c, r) {\n        return Intersection.intersectBezier3Ellipse(p1, p2, p3, p4, c, r, r);\n    }\n\n    /**\n     *  intersectBezier3Ellipse\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {module:kld-intersections.Point2D} ec\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Ellipse(p1, p2, p3, p4, ec, rx, ry) {\n        let a, b, c, d; // temporary variables\n        // c3, c2, c1, c0; // coefficients of cubic\n        const result = new Intersection(\"No Intersection\");\n\n        // Calculate the coefficients of cubic polynomial\n        a = p1.multiply(-1);\n        b = p2.multiply(3);\n        c = p3.multiply(-3);\n        d = a.add(b.add(c.add(p4)));\n        const c3 = new Point2D(d.x, d.y);\n\n        a = p1.multiply(3);\n        b = p2.multiply(-6);\n        c = p3.multiply(3);\n        d = a.add(b.add(c));\n        const c2 = new Point2D(d.x, d.y);\n\n        a = p1.multiply(-3);\n        b = p2.multiply(3);\n        c = a.add(b);\n        const c1 = new Point2D(c.x, c.y);\n\n        const c0 = new Point2D(p1.x, p1.y);\n\n        const rxrx = rx * rx;\n        const ryry = ry * ry;\n        const poly = new Polynomial(\n            c3.x * c3.x * ryry + c3.y * c3.y * rxrx,\n            2 * (c3.x * c2.x * ryry + c3.y * c2.y * rxrx),\n            2 * (c3.x * c1.x * ryry + c3.y * c1.y * rxrx) + c2.x * c2.x * ryry + c2.y * c2.y * rxrx,\n            2 * c3.x * ryry * (c0.x - ec.x) + 2 * c3.y * rxrx * (c0.y - ec.y) +\n                2 * (c2.x * c1.x * ryry + c2.y * c1.y * rxrx),\n            2 * c2.x * ryry * (c0.x - ec.x) + 2 * c2.y * rxrx * (c0.y - ec.y) +\n                c1.x * c1.x * ryry + c1.y * c1.y * rxrx,\n            2 * c1.x * ryry * (c0.x - ec.x) + 2 * c1.y * rxrx * (c0.y - ec.y),\n            c0.x * c0.x * ryry - 2 * c0.y * ec.y * rxrx - 2 * c0.x * ec.x * ryry +\n                c0.y * c0.y * rxrx + ec.x * ec.x * ryry + ec.y * ec.y * rxrx - rxrx * ryry\n        );\n        const roots = poly.getRootsInInterval(0, 1);\n\n        for (const t of roots) {\n            result.points.push(\n                c3.multiply(t * t * t).add(c2.multiply(t * t).add(c1.multiply(t).add(c0)))\n            );\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Line\n     *\n     *  Many thanks to Dan Sunday at SoftSurfer.com.  He gave me a very thorough\n     *  sketch of the algorithm used here.  Without his help, I'm not sure when I\n     *  would have figured out this intersection problem.\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Line(p1, p2, p3, p4, a1, a2) {\n        let a, b, c, d; // temporary variables\n        // c3, c2, c1, c0; // coefficients of cubic\n        // cl; // c coefficient for normal form of line\n        // n; // normal for normal form of line\n        const min = a1.min(a2); // used to determine if point is on line segment\n        const max = a1.max(a2); // used to determine if point is on line segment\n        const result = new Intersection(\"No Intersection\");\n\n        // Start with Bezier using Bernstein polynomials for weighting functions:\n        //     (1-t^3)P1 + 3t(1-t)^2P2 + 3t^2(1-t)P3 + t^3P4\n        //\n        // Expand and collect terms to form linear combinations of original Bezier\n        // controls.  This ends up with a vector cubic in t:\n        //     (-P1+3P2-3P3+P4)t^3 + (3P1-6P2+3P3)t^2 + (-3P1+3P2)t + P1\n        //             /\\                  /\\                /\\       /\\\n        //             ||                  ||                ||       ||\n        //             c3                  c2                c1       c0\n\n        // Calculate the coefficients\n        a = p1.multiply(-1);\n        b = p2.multiply(3);\n        c = p3.multiply(-3);\n        d = a.add(b.add(c.add(p4)));\n        const c3 = new Vector2D(d.x, d.y);\n\n        a = p1.multiply(3);\n        b = p2.multiply(-6);\n        c = p3.multiply(3);\n        d = a.add(b.add(c));\n        const c2 = new Vector2D(d.x, d.y);\n\n        a = p1.multiply(-3);\n        b = p2.multiply(3);\n        c = a.add(b);\n        const c1 = new Vector2D(c.x, c.y);\n\n        const c0 = new Vector2D(p1.x, p1.y);\n\n        // Convert line to normal form: ax + by + c = 0\n        // Find normal to line: negative inverse of original line's slope\n        const n = new Vector2D(a1.y - a2.y, a2.x - a1.x);\n\n        // Determine new c coefficient\n        const cl = a1.x * a2.y - a2.x * a1.y;\n\n        // ?Rotate each cubic coefficient using line for new coordinate system?\n        // Find roots of rotated cubic\n        const roots = new Polynomial(\n            n.dot(c3),\n            n.dot(c2),\n            n.dot(c1),\n            n.dot(c0) + cl\n        ).getRoots();\n\n        // Any roots in closed interval [0,1] are intersections on Bezier, but\n        // might not be on the line segment.\n        // Find intersections and calculate point coordinates\n        for (const t of roots) {\n            if (0 <= t && t <= 1) {\n                // We're within the Bezier curve\n                // Find point on Bezier\n                const p5 = p1.lerp(p2, t);\n                const p6 = p2.lerp(p3, t);\n                const p7 = p3.lerp(p4, t);\n\n                const p8 = p5.lerp(p6, t);\n                const p9 = p6.lerp(p7, t);\n\n                const p10 = p8.lerp(p9, t);\n\n                // See if point is on line segment\n                // Had to make special cases for vertical and horizontal lines due\n                // to slight errors in calculation of p10\n                if (a1.x === a2.x) {\n                    if (min.y <= p10.y && p10.y <= max.y) {\n                        result.status = \"Intersection\";\n                        result.appendPoint(p10);\n                    }\n                }\n                else if (a1.y === a2.y) {\n                    if (min.x <= p10.x && p10.x <= max.x) {\n                        result.status = \"Intersection\";\n                        result.appendPoint(p10);\n                    }\n                }\n                else if (min.x <= p10.x && p10.x <= max.x && min.y <= p10.y && p10.y <= max.y) {\n                    result.status = \"Intersection\";\n                    result.appendPoint(p10);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Polygon\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Polygon(p1, p2, p3, p4, points) {\n        return Intersection.intersectBezier3Polyline(p1, p2, p3, p4, closePolygon(points));\n    }\n\n    /**\n     *  intersectBezier3Polyline\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Polyline(p1, p2, p3, p4, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n\n        for (let i = 0; i < len - 1; i++) {\n            const a1 = points[i];\n            const a2 = points[i + 1];\n            const inter = Intersection.intersectBezier3Line(p1, p2, p3, p4, a1, a2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectBezier3Rectangle\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectBezier3Rectangle(p1, p2, p3, p4, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectBezier3Line(p1, p2, p3, p4, min, topRight);\n        const inter2 = Intersection.intersectBezier3Line(p1, p2, p3, p4, topRight, max);\n        const inter3 = Intersection.intersectBezier3Line(p1, p2, p3, p4, max, bottomLeft);\n        const inter4 = Intersection.intersectBezier3Line(p1, p2, p3, p4, bottomLeft, min);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectCircleCircle\n     *\n     *  @param {module:kld-intersections.Point2D} c1\n     *  @param {number} r1\n     *  @param {module:kld-intersections.Point2D} c2\n     *  @param {number} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCircleCircle(c1, r1, c2, r2) {\n        let result;\n\n        // Determine minimum and maximum radii where circles can intersect\n        const r_max = r1 + r2;\n        const r_min = Math.abs(r1 - r2);\n\n        // Determine actual distance between circle circles\n        const c_dist = c1.distanceFrom(c2);\n\n        if (c_dist > r_max) {\n            result = new Intersection(\"Outside\");\n        }\n        else if (c_dist < r_min) {\n            result = new Intersection(\"Inside\");\n        }\n        else {\n            result = new Intersection(\"Intersection\");\n\n            const a = (r1 * r1 - r2 * r2 + c_dist * c_dist) / (2 * c_dist);\n            const h = Math.sqrt(r1 * r1 - a * a);\n            const p = c1.lerp(c2, a / c_dist);\n            const b = h / c_dist;\n\n            result.points.push(\n                new Point2D(\n                    p.x - b * (c2.y - c1.y),\n                    p.y + b * (c2.x - c1.x)\n                )\n            );\n            result.points.push(\n                new Point2D(\n                    p.x + b * (c2.y - c1.y),\n                    p.y - b * (c2.x - c1.x)\n                )\n            );\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectCircleEllipse\n     *\n     *  @param {module:kld-intersections.Point2D} cc\n     *  @param {number} r\n     *  @param {module:kld-intersections.Point2D} ec\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCircleEllipse(cc, r, ec, rx, ry) {\n        return Intersection.intersectEllipseEllipse(cc, r, r, ec, rx, ry);\n    }\n\n    /**\n     *  intersectCircleLine\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCircleLine(c, r, a1, a2) {\n        let result;\n        const a = (a2.x - a1.x) * (a2.x - a1.x) +\n                 (a2.y - a1.y) * (a2.y - a1.y);\n        const b = 2 * ((a2.x - a1.x) * (a1.x - c.x) +\n                       (a2.y - a1.y) * (a1.y - c.y));\n        const cc = c.x * c.x + c.y * c.y + a1.x * a1.x + a1.y * a1.y -\n                 2 * (c.x * a1.x + c.y * a1.y) - r * r;\n        const deter = b * b - 4 * a * cc;\n\n        if (deter < 0) {\n            result = new Intersection(\"Outside\");\n        }\n        else if (deter === 0) {\n            result = new Intersection(\"Tangent\");\n            // NOTE: should calculate this point\n        }\n        else {\n            const e = Math.sqrt(deter);\n            const u1 = (-b + e) / (2 * a);\n            const u2 = (-b - e) / (2 * a);\n\n            if ((u1 < 0 || u1 > 1) && (u2 < 0 || u2 > 1)) {\n                if ((u1 < 0 && u2 < 0) || (u1 > 1 && u2 > 1)) {\n                    result = new Intersection(\"Outside\");\n                }\n                else {\n                    result = new Intersection(\"Inside\");\n                }\n            }\n            else {\n                result = new Intersection(\"Intersection\");\n\n                if (0 <= u1 && u1 <= 1) {\n                    result.points.push(a1.lerp(a2, u1));\n                }\n\n                if (0 <= u2 && u2 <= 1) {\n                    result.points.push(a1.lerp(a2, u2));\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectCirclePolygon\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCirclePolygon(c, r, points) {\n        return Intersection.intersectCirclePolyline(c, r, closePolygon(points));\n    }\n\n    /**\n     *  intersectCirclePolyline\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCirclePolyline(c, r, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n        let inter;\n\n        for (let i = 0; i < len - 1; i++) {\n            const a1 = points[i];\n            const a2 = points[i + 1];\n\n            inter = Intersection.intersectCircleLine(c, r, a1, a2);\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n        else {\n            result.status = inter.status;\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectCircleRectangle\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} r\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectCircleRectangle(c, r, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectCircleLine(c, r, min, topRight);\n        const inter2 = Intersection.intersectCircleLine(c, r, topRight, max);\n        const inter3 = Intersection.intersectCircleLine(c, r, max, bottomLeft);\n        const inter4 = Intersection.intersectCircleLine(c, r, bottomLeft, min);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n        else {\n            result.status = inter1.status;\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectEllipseEllipse\n     *\n     *  This code is based on MgcIntr2DElpElp.cpp written by David Eberly.  His\n     *  code along with many other excellent examples are avaiable at his site:\n     *  http://www.magic-software.com\n     *\n     *  NOTE: Rotation will need to be added to this function\n     *\n     *  @param {module:kld-intersections.Point2D} c1\n     *  @param {number} rx1\n     *  @param {number} ry1\n     *  @param {module:kld-intersections.Point2D} c2\n     *  @param {number} rx2\n     *  @param {number} ry2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipseEllipse(c1, rx1, ry1, c2, rx2, ry2) {\n        const a = [\n            ry1 * ry1, 0, rx1 * rx1, -2 * ry1 * ry1 * c1.x, -2 * rx1 * rx1 * c1.y,\n            ry1 * ry1 * c1.x * c1.x + rx1 * rx1 * c1.y * c1.y - rx1 * rx1 * ry1 * ry1\n        ];\n        const b = [\n            ry2 * ry2, 0, rx2 * rx2, -2 * ry2 * ry2 * c2.x, -2 * rx2 * rx2 * c2.y,\n            ry2 * ry2 * c2.x * c2.x + rx2 * rx2 * c2.y * c2.y - rx2 * rx2 * ry2 * ry2\n        ];\n\n        const yPoly = bezout(a, b);\n        const yRoots = yPoly.getRoots();\n        const epsilon = 1e-3;\n        const norm0 = (a[0] * a[0] + 2 * a[1] * a[1] + a[2] * a[2]) * epsilon;\n        const norm1 = (b[0] * b[0] + 2 * b[1] * b[1] + b[2] * b[2]) * epsilon;\n        const result = new Intersection(\"No Intersection\");\n\n        for (let y = 0; y < yRoots.length; y++) {\n            const xPoly = new Polynomial(\n                a[0],\n                a[3] + yRoots[y] * a[1],\n                a[5] + yRoots[y] * (a[4] + yRoots[y] * a[2])\n            );\n            const xRoots = xPoly.getRoots();\n\n            for (let x = 0; x < xRoots.length; x++) {\n                let tst =\n                    (a[0] * xRoots[x] + a[1] * yRoots[y] + a[3]) * xRoots[x] +\n                    (a[2] * yRoots[y] + a[4]) * yRoots[y] + a[5];\n                if (Math.abs(tst) < norm0) {\n                    tst =\n                        (b[0] * xRoots[x] + b[1] * yRoots[y] + b[3]) * xRoots[x] +\n                        (b[2] * yRoots[y] + b[4]) * yRoots[y] + b[5];\n                    if (Math.abs(tst) < norm1) {\n                        result.appendPoint(new Point2D(xRoots[x], yRoots[y]));\n                    }\n                }\n            }\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectEllipseLine\n     *\n     *  NOTE: Rotation will need to be added to this function\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipseLine(c, rx, ry, a1, a2) {\n        let result;\n        const orign = new Vector2D(a1.x, a1.y);\n        const dir = Vector2D.fromPoints(a1, a2);\n        const center = new Vector2D(c.x, c.y);\n        const diff = orign.subtract(center);\n        const mDir = new Vector2D(dir.x / (rx * rx), dir.y / (ry * ry));\n        const mDiff = new Vector2D(diff.x / (rx * rx), diff.y / (ry * ry));\n\n        const a = dir.dot(mDir);\n        const b = dir.dot(mDiff);\n        c = diff.dot(mDiff) - 1.0;\n        const d = b * b - a * c;\n\n        if (d < 0) {\n            result = new Intersection(\"Outside\");\n        }\n        else if (d > 0) {\n            const root = Math.sqrt(d); // eslint-disable-line no-shadow\n            const t_a = (-b - root) / a;\n            const t_b = (-b + root) / a;\n\n            if ((t_a < 0 || 1 < t_a) && (t_b < 0 || 1 < t_b)) {\n                if ((t_a < 0 && t_b < 0) || (t_a > 1 && t_b > 1)) {\n                    result = new Intersection(\"Outside\");\n                }\n                else {\n                    result = new Intersection(\"Inside\");\n                }\n            }\n            else {\n                result = new Intersection(\"Intersection\");\n                if (0 <= t_a && t_a <= 1) {\n                    result.appendPoint(a1.lerp(a2, t_a));\n                }\n                if (0 <= t_b && t_b <= 1) {\n                    result.appendPoint(a1.lerp(a2, t_b));\n                }\n            }\n        }\n        else {\n            const t = -b / a;\n\n            if (0 <= t && t <= 1) {\n                result = new Intersection(\"Intersection\");\n                result.appendPoint(a1.lerp(a2, t));\n            }\n            else {\n                result = new Intersection(\"Outside\");\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectEllipsePolygon\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipsePolygon(c, rx, ry, points) {\n        return Intersection.intersectEllipsePolyline(c, rx, ry, closePolygon(points));\n    }\n\n    /**\n     *  intersectEllipsePolyline\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipsePolyline(c, rx, ry, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n\n        for (let i = 0; i < len - 1; i++) {\n            const b1 = points[i];\n            const b2 = points[i + 1];\n            const inter = Intersection.intersectEllipseLine(c, rx, ry, b1, b2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectEllipseRectangle\n     *\n     *  @param {module:kld-intersections.Point2D} c\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectEllipseRectangle(c, rx, ry, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectEllipseLine(c, rx, ry, min, topRight);\n        const inter2 = Intersection.intersectEllipseLine(c, rx, ry, topRight, max);\n        const inter3 = Intersection.intersectEllipseLine(c, rx, ry, max, bottomLeft);\n        const inter4 = Intersection.intersectEllipseLine(c, rx, ry, bottomLeft, min);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectLineLine\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectLineLine(a1, a2, b1, b2) {\n        let result;\n\n        const ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n        const ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n        const u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n        if (u_b !== 0) {\n            const ua = ua_t / u_b;\n            const ub = ub_t / u_b;\n\n            if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n                result = new Intersection(\"Intersection\");\n                result.points.push(\n                    new Point2D(\n                        a1.x + ua * (a2.x - a1.x),\n                        a1.y + ua * (a2.y - a1.y)\n                    )\n                );\n            }\n            else {\n                result = new Intersection(\"No Intersection\");\n            }\n        }\n        else if (ua_t === 0 || ub_t === 0) {\n            result = new Intersection(\"Coincident\");\n        }\n        else {\n            result = new Intersection(\"Parallel\");\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectLinePolygon\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectLinePolygon(a1, a2, points) {\n        return Intersection.intersectLinePolyline(a1, a2, closePolygon(points));\n    }\n\n    /**\n     *  intersectLinePolyline\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectLinePolyline(a1, a2, points) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points;\n\n        for (let i = 0; i < len - 1; i++) {\n            const b1 = points[i];\n            const b2 = points[i + 1];\n            const inter = Intersection.intersectLineLine(a1, a2, b1, b2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectLineRectangle\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectLineRectangle(a1, a2, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectLineLine(min, topRight, a1, a2);\n        const inter2 = Intersection.intersectLineLine(topRight, max, a1, a2);\n        const inter3 = Intersection.intersectLineLine(max, bottomLeft, a1, a2);\n        const inter4 = Intersection.intersectLineLine(bottomLeft, min, a1, a2);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectPolygonPolygon\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points1\n     *  @param {Array<module:kld-intersections.Point2D>} points2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolygonPolygon(points1, points2) {\n        return Intersection.intersectPolylinePolyline(closePolygon(points1), closePolygon(points2));\n    }\n\n    /**\n     *  intersectPolygonPolyline\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points1\n     *  @param {Array<module:kld-intersections.Point2D>} points2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolygonPolyline(points1, points2) {\n        return Intersection.intersectPolylinePolyline(closePolygon(points1), points2);\n    }\n\n    /**\n     *  intersectPolygonRectangle\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolygonRectangle(points, r1, r2) {\n        return Intersection.intersectPolylineRectangle(closePolygon(points), r1, r2);\n    }\n\n    /**\n     *  intersectPolylinePolyline\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points1\n     *  @param {Array<module:kld-intersections.Point2D>} points2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolylinePolyline(points1, points2) {\n        const result = new Intersection(\"No Intersection\");\n        const {length: len} = points1;\n\n        for (let i = 0; i < len - 1; i++) {\n            const a1 = points1[i];\n            const a2 = points1[i + 1];\n            const inter = Intersection.intersectLinePolyline(a1, a2, points2);\n\n            result.appendPoints(inter.points);\n        }\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectPolylineRectangle\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @param {module:kld-intersections.Point2D} r1\n     *  @param {module:kld-intersections.Point2D} r2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectPolylineRectangle(points, r1, r2) {\n        const min = r1.min(r2);\n        const max = r1.max(r2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectLinePolyline(min, topRight, points);\n        const inter2 = Intersection.intersectLinePolyline(topRight, max, points);\n        const inter3 = Intersection.intersectLinePolyline(max, bottomLeft, points);\n        const inter4 = Intersection.intersectLinePolyline(bottomLeft, min, points);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectRectangleRectangle\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectRectangleRectangle(a1, a2, b1, b2) {\n        const min = a1.min(a2);\n        const max = a1.max(a2);\n        const topRight = new Point2D(max.x, min.y);\n        const bottomLeft = new Point2D(min.x, max.y);\n\n        const inter1 = Intersection.intersectLineRectangle(min, topRight, b1, b2);\n        const inter2 = Intersection.intersectLineRectangle(topRight, max, b1, b2);\n        const inter3 = Intersection.intersectLineRectangle(max, bottomLeft, b1, b2);\n        const inter4 = Intersection.intersectLineRectangle(bottomLeft, min, b1, b2);\n\n        const result = new Intersection(\"No Intersection\");\n\n        result.appendPoints(inter1.points);\n        result.appendPoints(inter2.points);\n        result.appendPoints(inter3.points);\n        result.appendPoints(inter4.points);\n\n        if (result.points.length > 0) {\n            result.status = \"Intersection\";\n        }\n\n        return result;\n    }\n\n    /**\n     *  intersectRayRay\n     *\n     *  @param {module:kld-intersections.Point2D} a1\n     *  @param {module:kld-intersections.Point2D} a2\n     *  @param {module:kld-intersections.Point2D} b1\n     *  @param {module:kld-intersections.Point2D} b2\n     *  @returns {module:kld-intersections.Intersection}\n     */\n    static intersectRayRay(a1, a2, b1, b2) {\n        let result;\n\n        const ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n        const ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n        const u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n        if (u_b !== 0) {\n            const ua = ua_t / u_b;\n\n            result = new Intersection(\"Intersection\");\n            result.points.push(\n                new Point2D(\n                    a1.x + ua * (a2.x - a1.x),\n                    a1.y + ua * (a2.y - a1.y)\n                )\n            );\n        }\n        else if (ua_t === 0 || ub_t === 0) {\n            result = new Intersection(\"Coincident\");\n        }\n        else {\n            result = new Intersection(\"Parallel\");\n        }\n\n        return result;\n    }\n\n    /**\n     *  appendPoint\n     *\n     *  @param {module:kld-intersections.Point2D} point\n     */\n    appendPoint(point) {\n        this.points.push(point);\n    }\n\n\n    /**\n     *  appendPoints\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     */\n    appendPoints(points) {\n        this.points = this.points.concat(points);\n    }\n}\n\nexport default Intersection;\n","/**\n *  PathLexeme.js\n *\n *  @copyright 2002, 2013 Kevin Lindsey\n *  @module PathLexeme\n */\n\n/**\n *  PathLexeme\n */\nclass PathLexeme {\n    /**\n     *  PathLexeme\n     *\n     *  @param {number} type\n     *  @param {string} text\n     */\n    constructor(type, text) {\n        this.type = type;\n        this.text = text;\n    }\n\n    /**\n     *  Determine if this lexeme is of the given type\n     *\n     *  @param {number} type\n     *  @returns {boolean}\n     */\n    typeis(type) {\n        return this.type === type;\n    }\n}\n\n/*\n * token type enumerations\n */\nPathLexeme.UNDEFINED = 0;\nPathLexeme.COMMAND = 1;\nPathLexeme.NUMBER = 2;\nPathLexeme.EOD = 3;\n\nexport default PathLexeme;\n","/**\n *  PathLexer.js\n *\n *  @copyright 2003, 2013 Kevin Lindsey\n *  @module PathLexer\n */\n\nimport PathLexeme from \"./PathLexeme.js\";\n\n/**\n *  Create a new instance of PathLexer\n */\nclass PathLexer {\n    /**\n     *  @param {string} [pathData]\n     */\n    constructor(pathData) {\n        if (pathData === null || pathData === undefined) {\n            pathData = \"\";\n        }\n\n        this.setPathData(pathData);\n    }\n\n    /**\n     *  setPathData\n     *\n     *  @param {string} pathData\n     */\n    setPathData(pathData) {\n        if (typeof pathData !== \"string\") {\n            throw new TypeError(\"The first parameter must be a string\");\n        }\n\n        this._pathData = pathData;\n    }\n\n    /**\n     *  getNextToken\n     *\n     *  @returns {PathLexeme}\n     */\n    getNextToken() {\n        let result = null;\n        let d = this._pathData;\n\n        while (result === null) {\n            if (d === null || d === \"\") {\n                result = new PathLexeme(PathLexeme.EOD, \"\");\n            }\n            else if (d.match(/^([ \\t\\r\\n,]+)/)) {\n                d = d.substr(RegExp.$1.length);\n            }\n            else if (d.match(/^([AaCcHhLlMmQqSsTtVvZz])/)) {\n                result = new PathLexeme(PathLexeme.COMMAND, RegExp.$1);\n                d = d.substr(RegExp.$1.length);\n            }\n            /* eslint-disable-next-line unicorn/no-unsafe-regex */\n            else if (d.match(/^(([-+]?\\d+(\\.\\d*)?|[-+]?\\.\\d+)([eE][-+]?\\d+)?)/)) {\n                result = new PathLexeme(PathLexeme.NUMBER, RegExp.$1);\n                d = d.substr(RegExp.$1.length);\n            }\n            else {\n                throw new SyntaxError(`Unrecognized path data: ${d}`);\n            }\n        }\n\n        this._pathData = d;\n\n        return result;\n    }\n}\n\nexport default PathLexer;\n","/**\n *  PathParser.js\n *\n *  @copyright 2003, 2017 Kevin Lindsey\n *  @module PathParser\n */\n\nimport PathLexer from \"./PathLexer.js\";\nimport PathLexeme from \"./PathLexeme.js\";\n\nconst BOP = \"BOP\";\n\n/**\n *  PathParser\n */\nclass PathParser {\n    /**\n     * constructor\n     */\n    constructor() {\n        this._lexer = new PathLexer();\n        this._handler = null;\n    }\n\n    /**\n     *  parseData\n     *\n     *  @param {string} pathData\n     *  @throws {Error}\n     */\n    parseData(pathData) {\n        if (typeof pathData !== \"string\") {\n            throw new TypeError(`The first parameter must be a string: ${pathData}`);\n        }\n\n        // begin parse\n        if (this._handler !== null && typeof this._handler.beginParse === \"function\") {\n            this._handler.beginParse();\n        }\n\n        // pass the pathData to the lexer\n        const lexer = this._lexer;\n\n        lexer.setPathData(pathData);\n\n        // set mode to signify new path - Beginning Of Path\n        let mode = BOP;\n\n        // Process all tokens\n        let lastToken = null;\n        let token = lexer.getNextToken();\n\n        while (token.typeis(PathLexeme.EOD) === false) {\n            let parameterCount;\n            const params = [];\n\n            // process current token\n            switch (token.type) {\n                case PathLexeme.COMMAND:\n                    if (mode === BOP && token.text !== \"M\" && token.text !== \"m\") {\n                        throw new SyntaxError(`New paths must begin with a moveto command. Found '${token.text}'`);\n                    }\n\n                    // Set new parsing mode\n                    mode = token.text;\n\n                    // Get count of numbers that must follow this command\n                    parameterCount = PathParser.PARAMCOUNT[token.text.toUpperCase()];\n\n                    // Advance past command token\n                    token = lexer.getNextToken();\n                    break;\n\n                case PathLexeme.NUMBER:\n                    // Most commands allow you to keep repeating parameters\n                    // without specifying the command again.  We just assume\n                    // that is the case and do nothing since the mode remains\n                    // the same\n\n                    if (mode === BOP) {\n                        throw new SyntaxError(`New paths must begin with a moveto command. Found '${token.text}'`);\n                    }\n                    else {\n                        parameterCount = PathParser.PARAMCOUNT[mode.toUpperCase()];\n                    }\n                    break;\n\n                default:\n                    throw new SyntaxError(`Unrecognized command type: ${token.type}`);\n            }\n\n            // Get parameters\n            for (let i = 0; i < parameterCount; i++) {\n                switch (token.type) {\n                    case PathLexeme.COMMAND:\n                        throw new SyntaxError(`Parameter must be a number. Found '${token.text}'`);\n\n                    case PathLexeme.NUMBER:\n                        // convert current parameter to a float and add to\n                        // parameter list\n                        params[i] = parseFloat(token.text);\n                        break;\n\n                    case PathLexeme.EOD:\n                        throw new SyntaxError(\"Unexpected end of string\");\n\n                    default:\n                        throw new SyntaxError(`Unrecognized parameter type. Found type '${token.type}'`);\n                }\n\n                token = lexer.getNextToken();\n            }\n\n            // fire handler\n            if (this._handler !== null) {\n                const handler = this._handler;\n                const methodName = PathParser.METHODNAME[mode];\n\n                // convert types for arcs\n                if (mode === \"a\" || mode === \"A\") {\n                    params[3] = params[3] !== 0;\n                    params[4] = params[4] !== 0;\n                }\n\n                if (handler !== null && typeof handler[methodName] === \"function\") {\n                    handler[methodName](...params);\n                }\n            }\n\n            // Lineto's follow moveto when no command follows moveto params.  Go\n            // ahead and set the mode just in case no command follows the moveto\n            // command\n            switch (mode) {\n                case \"M\":\n                    mode = \"L\";\n                    break;\n                case \"m\":\n                    mode = \"l\";\n                    break;\n                case \"Z\":\n                case \"z\":\n                    mode = \"BOP\";\n                    break;\n                default:\n                    // ignore for now\n            }\n\n            if (token === lastToken) {\n                throw new SyntaxError(`Parser stalled on '${token.text}'`);\n            }\n            else {\n                lastToken = token;\n            }\n        }\n\n        // end parse\n        if (this._handler !== null && typeof this._handler.endParse === \"function\") {\n            this._handler.endParse();\n        }\n    }\n\n    /**\n     *  setHandler\n     *\n     *  @param {Object} handler\n     */\n    setHandler(handler) {\n        this._handler = handler;\n    }\n}\n\n/*\n * class constants\n */\nPathParser.PARAMCOUNT = {\n    A: 7,\n    C: 6,\n    H: 1,\n    L: 2,\n    M: 2,\n    Q: 4,\n    S: 4,\n    T: 2,\n    V: 1,\n    Z: 0\n};\nPathParser.METHODNAME = {\n    A: \"arcAbs\",\n    a: \"arcRel\",\n    C: \"curvetoCubicAbs\",\n    c: \"curvetoCubicRel\",\n    H: \"linetoHorizontalAbs\",\n    h: \"linetoHorizontalRel\",\n    L: \"linetoAbs\",\n    l: \"linetoRel\",\n    M: \"movetoAbs\",\n    m: \"movetoRel\",\n    Q: \"curvetoQuadraticAbs\",\n    q: \"curvetoQuadraticRel\",\n    S: \"curvetoCubicSmoothAbs\",\n    s: \"curvetoCubicSmoothRel\",\n    T: \"curvetoQuadraticSmoothAbs\",\n    t: \"curvetoQuadraticSmoothRel\",\n    V: \"linetoVerticalAbs\",\n    v: \"linetoVerticalRel\",\n    Z: \"closePath\",\n    z: \"closePath\"\n};\n\nexport default PathParser;\n","/**\n *  PathHandler.js\n *\n *  @copyright 2017 Kevin Lindsey\n */\n\nimport {Point2D, Vector2D} from \"kld-affine\";\nimport Shapes from \"./Shapes.js\";\n\nconst TWO_PI = 2.0 * Math.PI;\n\n/**\n * normalizeAngle\n *\n * @param {number} radians\n * @returns {number}\n */\nfunction normalizeAngle(radians) {\n    const normal = radians % TWO_PI;\n\n    return normal < 0.0 ? normal + TWO_PI : normal;\n}\n\n/**\n * Based on the SVG 1.1 specification, Appendix F: Implementation Requirements,\n * Section F.6 \"Elliptical arc implementation notes\"\n * {@see https://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes}\n *\n * @param {module:kld-affine.Point2D} startPoint\n * @param {module:kld-affine.Point2D} endPoint\n * @param {number} rx\n * @param {number} ry\n * @param {number} angle\n * @param {boolean} arcFlag\n * @param {boolean} sweepFlag\n * @returns {Array}\n */\nfunction getArcParameters(startPoint, endPoint, rx, ry, angle, arcFlag, sweepFlag) {\n    angle = angle * Math.PI / 180;\n\n    const c = Math.cos(angle);\n    const s = Math.sin(angle);\n    const TOLERANCE = 1e-6;\n\n    // Section (F.6.5.1)\n    const halfDiff = startPoint.subtract(endPoint).multiply(0.5);\n    const x1p = halfDiff.x * c + halfDiff.y * s;\n    const y1p = halfDiff.x * -s + halfDiff.y * c;\n\n    // Section (F.6.6.1)\n    rx = Math.abs(rx);\n    ry = Math.abs(ry);\n\n    // Section (F.6.6.2)\n    const x1px1p = x1p * x1p;\n    const y1py1p = y1p * y1p;\n    const lambda = (x1px1p / (rx * rx)) + (y1py1p / (ry * ry));\n\n    // Section (F.6.6.3)\n    if (lambda > 1) {\n        const factor = Math.sqrt(lambda);\n\n        rx *= factor;\n        ry *= factor;\n    }\n\n    // Section (F.6.5.2)\n    const rxrx = rx * rx;\n    const ryry = ry * ry;\n    const rxy1 = rxrx * y1py1p;\n    const ryx1 = ryry * x1px1p;\n\n    let factor = (rxrx * ryry - rxy1 - ryx1) / (rxy1 + ryx1);\n\n    if (Math.abs(factor) < TOLERANCE) {\n        factor = 0;\n    }\n\n    let sq = Math.sqrt(factor);\n\n    if (arcFlag === sweepFlag) {\n        sq = -sq;\n    }\n\n    // Section (F.6.5.3)\n    const mid = startPoint.add(endPoint).multiply(0.5);\n    const cxp = sq * rx * y1p / ry;\n    const cyp = sq * -ry * x1p / rx;\n\n    // Section (F.6.5.5 - F.6.5.6)\n    const xcr1 = (x1p - cxp) / rx;\n    const xcr2 = (x1p + cxp) / rx;\n    const ycr1 = (y1p - cyp) / ry;\n    const ycr2 = (y1p + cyp) / ry;\n\n    const theta1 = new Vector2D(1, 0).angleBetween(new Vector2D(xcr1, ycr1));\n    let deltaTheta = normalizeAngle(new Vector2D(xcr1, ycr1).angleBetween(new Vector2D(-xcr2, -ycr2)));\n\n    if (sweepFlag === false) {\n        deltaTheta -= TWO_PI;\n    }\n\n    return [\n        cxp * c - cyp * s + mid.x,\n        cxp * s + cyp * c + mid.y,\n        rx,\n        ry,\n        theta1,\n        theta1 + deltaTheta\n    ];\n}\n\n/**\n *  PathHandler\n */\nclass PathHandler {\n    /**\n     * PathHandler\n     */\n    constructor() {\n        this.shapes = [];\n        this.firstX = null;\n        this.firstY = null;\n        this.lastX = null;\n        this.lastY = null;\n        this.lastCommand = null;\n    }\n\n    /**\n     * beginParse\n     */\n    beginParse() {\n        // zero out the sub-path array\n        this.shapes = [];\n\n        // clear firstX, firstY, lastX, and lastY\n        this.firstX = null;\n        this.firstY = null;\n        this.lastX = null;\n        this.lastY = null;\n\n        // need to remember last command type to determine how to handle the\n        // relative Bezier commands\n        this.lastCommand = null;\n    }\n\n    /**\n     *  addShape\n     *\n     *  @param {ShapeInfo} shape\n     */\n    addShape(shape) {\n        this.shapes.push(shape);\n    }\n\n    /**\n     *  arcAbs - A\n     *\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {number} xAxisRotation\n     *  @param {boolean} arcFlag\n     *  @param {boolean} sweepFlag\n     *  @param {number} x\n     *  @param {number} y\n     */\n    arcAbs(rx, ry, xAxisRotation, arcFlag, sweepFlag, x, y) {\n        if (rx === 0 || ry === 0) {\n            this.addShape(Shapes.line(\n                this.lastX, this.lastY,\n                x, y\n            ));\n        }\n        else {\n            const arcParameters = getArcParameters(\n                new Point2D(this.lastX, this.lastY),\n                new Point2D(x, y),\n                rx, ry,\n                xAxisRotation,\n                arcFlag, sweepFlag\n            );\n\n            this.addShape(Shapes.arc(...arcParameters));\n        }\n\n        this.lastCommand = \"A\";\n        this.lastX = x;\n        this.lastY = y;\n    }\n\n    /**\n     *  arcRel - a\n     *\n     *  @param {number} rx\n     *  @param {number} ry\n     *  @param {number} xAxisRotation\n     *  @param {boolean} arcFlag\n     *  @param {boolean} sweepFlag\n     *  @param {number} x\n     *  @param {number} y\n     */\n    arcRel(rx, ry, xAxisRotation, arcFlag, sweepFlag, x, y) {\n        if (rx === 0 || ry === 0) {\n            this.addShape(Shapes.line(\n                this.lastX, this.lastY,\n                this.lastX + x, this.lastY + y\n            ));\n        }\n        else {\n            const arcParameters = getArcParameters(\n                new Point2D(this.lastX, this.lastY),\n                new Point2D(this.lastX + x, this.lastY + y),\n                rx, ry,\n                xAxisRotation,\n                arcFlag, sweepFlag\n            );\n\n            this.addShape(Shapes.arc(...arcParameters));\n        }\n\n        this.lastCommand = \"a\";\n        this.lastX += x;\n        this.lastY += y;\n    }\n\n    /**\n     *  curvetoCubicAbs - C\n     *\n     *  @param {number} x1\n     *  @param {number} y1\n     *  @param {number} x2\n     *  @param {number} y2\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoCubicAbs(x1, y1, x2, y2, x, y) {\n        this.addShape(Shapes.cubicBezier(\n            this.lastX, this.lastY,\n            x1, y1,\n            x2, y2,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"C\";\n    }\n\n    /**\n     *  curvetoCubicRel - c\n     *\n     *  @param {number} x1\n     *  @param {number} y1\n     *  @param {number} x2\n     *  @param {number} y2\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoCubicRel(x1, y1, x2, y2, x, y) {\n        this.addShape(Shapes.cubicBezier(\n            this.lastX, this.lastY,\n            this.lastX + x1, this.lastY + y1,\n            this.lastX + x2, this.lastY + y2,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"c\";\n    }\n\n    /**\n     *  linetoHorizontalAbs - H\n     *\n     *  @param {number} x\n     */\n    linetoHorizontalAbs(x) {\n        this.addShape(Shapes.line(\n            this.lastX, this.lastY,\n            x, this.lastY\n        ));\n\n        this.lastX = x;\n        this.lastCommand = \"H\";\n    }\n\n    /**\n     *  linetoHorizontalRel - h\n     *\n     *  @param {number} x\n     */\n    linetoHorizontalRel(x) {\n        this.addShape(Shapes.line(\n            this.lastX, this.lastY,\n            this.lastX + x, this.lastY\n        ));\n\n        this.lastX += x;\n        this.lastCommand = \"h\";\n    }\n\n    /**\n     *  linetoAbs - L\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    linetoAbs(x, y) {\n        this.addShape(Shapes.line(\n            this.lastX, this.lastY,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"L\";\n    }\n\n    /**\n     *  linetoRel - l\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    linetoRel(x, y) {\n        this.addShape(Shapes.line(\n            this.lastX, this.lastY,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"l\";\n    }\n\n    /**\n     *  movetoAbs - M\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    movetoAbs(x, y) {\n        this.firstX = x;\n        this.firstY = y;\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"M\";\n    }\n\n    /**\n     *  movetoRel - m\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    movetoRel(x, y) {\n        this.firstX += x;\n        this.firstY += y;\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"m\";\n    }\n\n    /**\n     *  curvetoQuadraticAbs - Q\n     *\n     *  @param {number} x1\n     *  @param {number} y1\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoQuadraticAbs(x1, y1, x, y) {\n        this.addShape(Shapes.quadraticBezier(\n            this.lastX, this.lastY,\n            x1, y1,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"Q\";\n    }\n\n    /**\n     *  curvetoQuadraticRel - q\n     *\n     *  @param {number} x1\n     *  @param {number} y1\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoQuadraticRel(x1, y1, x, y) {\n        this.addShape(Shapes.quadraticBezier(\n            this.lastX, this.lastY,\n            this.lastX + x1, this.lastY + y1,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"q\";\n    }\n\n    /**\n     *  curvetoCubicSmoothAbs - S\n     *\n     *  @param {number} x2\n     *  @param {number} y2\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoCubicSmoothAbs(x2, y2, x, y) {\n        let controlX, controlY;\n\n        if (this.lastCommand.match(/^[SsCc]$/)) {\n            const secondToLast = this.shapes[this.shapes.length - 1].args[2];\n\n            controlX = 2 * this.lastX - secondToLast.x;\n            controlY = 2 * this.lastY - secondToLast.y;\n        }\n        else {\n            controlX = this.lastX;\n            controlY = this.lastY;\n        }\n\n        this.addShape(Shapes.cubicBezier(\n            this.lastX, this.lastY,\n            controlX, controlY,\n            x2, y2,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"S\";\n    }\n\n    /**\n     *  curvetoCubicSmoothRel - s\n     *\n     *  @param {number} x2\n     *  @param {number} y2\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoCubicSmoothRel(x2, y2, x, y) {\n        let controlX, controlY;\n\n        if (this.lastCommand.match(/^[SsCc]$/)) {\n            const secondToLast = this.shapes[this.shapes.length - 1].args[2];\n\n            controlX = 2 * this.lastX - secondToLast.x;\n            controlY = 2 * this.lastY - secondToLast.y;\n        }\n        else {\n            controlX = this.lastX;\n            controlY = this.lastY;\n        }\n\n        this.addShape(Shapes.cubicBezier(\n            this.lastX, this.lastY,\n            controlX, controlY,\n            this.lastX + x2, this.lastY + y2,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"s\";\n    }\n\n    /**\n     *  curvetoQuadraticSmoothAbs - T\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoQuadraticSmoothAbs(x, y) {\n        let controlX, controlY;\n\n        if (this.lastCommand.match(/^[QqTt]$/)) {\n            const secondToLast = this.shapes[this.shapes.length - 1].args[1];\n\n            controlX = 2 * this.lastX - secondToLast.x;\n            controlY = 2 * this.lastY - secondToLast.y;\n        }\n        else {\n            controlX = this.lastX;\n            controlY = this.lastY;\n        }\n\n        this.addShape(Shapes.quadraticBezier(\n            this.lastX, this.lastY,\n            controlX, controlY,\n            x, y\n        ));\n\n        this.lastX = x;\n        this.lastY = y;\n        this.lastCommand = \"T\";\n    }\n\n    /**\n     *  curvetoQuadraticSmoothRel - t\n     *\n     *  @param {number} x\n     *  @param {number} y\n     */\n    curvetoQuadraticSmoothRel(x, y) {\n        let controlX, controlY;\n\n        if (this.lastCommand.match(/^[QqTt]$/)) {\n            const secondToLast = this.shapes[this.shapes.length - 1].args[1];\n\n            controlX = 2 * this.lastX - secondToLast.x;\n            controlY = 2 * this.lastY - secondToLast.y;\n        }\n        else {\n            controlX = this.lastX;\n            controlY = this.lastY;\n        }\n\n        this.addShape(Shapes.quadraticBezier(\n            this.lastX, this.lastY,\n            controlX, controlY,\n            this.lastX + x, this.lastY + y\n        ));\n\n        this.lastX += x;\n        this.lastY += y;\n        this.lastCommand = \"t\";\n    }\n\n    /**\n     *  linetoVerticalAbs - V\n     *\n     *  @param {number} y\n     */\n    linetoVerticalAbs(y) {\n        this.addShape(Shapes.line(\n            this.lastX, this.lastY,\n            this.lastX, y\n        ));\n\n        this.lastY = y;\n\n        this.lastCommand = \"V\";\n    }\n\n    /**\n     *  linetoVerticalRel - v\n     *\n     *  @param {number} y\n     */\n    linetoVerticalRel(y) {\n        this.addShape(Shapes.line(\n            this.lastX, this.lastY,\n            this.lastX, this.lastY + y\n        ));\n\n        this.lastY += y;\n\n        this.lastCommand = \"v\";\n    }\n\n    /**\n     *  closePath - z or Z\n     */\n    closePath() {\n        this.addShape(Shapes.line(\n            this.lastX, this.lastY,\n            this.firstX, this.firstY\n        ));\n\n        this.lastX = this.firstX;\n        this.lastY = this.firstY;\n        this.lastCommand = \"z\";\n    }\n}\n\nexport default PathHandler;\n","/**\n *  Shapes\n *\n *  @copyright 2017, Kevin Lindsey\n *  @module Shapes\n */\n\nimport {Point2D} from \"kld-affine\";\nimport {PathParser} from \"kld-path-parser\";\nimport PathHandler from \"./PathHandler.js\";\nimport ShapeInfo from \"./ShapeInfo.js\";\n\nconst parser = new PathParser();\nconst handler = new PathHandler();\n\nparser.setHandler(handler);\n\n/**\n * Build shapes for intersection\n */\nclass Shapes {\n    /**\n     * arc\n     *\n     * @param {number} centerX\n     * @param {number} centerY\n     * @param {number} radiusX\n     * @param {number} radiusY\n     * @param {number} startRadians\n     * @param {number} endRadians\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static arc(centerX, centerY, radiusX, radiusY, startRadians, endRadians) {\n        if (isNaN(centerX)) {\n            throw TypeError(`Expected centerX to be a number, but found ${centerX}`);\n        }\n        if (isNaN(centerY)) {\n            throw TypeError(`Expected centerY to be a number, but found ${centerY}`);\n        }\n        if (isNaN(radiusX)) {\n            throw TypeError(`Expected radiusX to be a number, but found ${radiusX}`);\n        }\n        if (isNaN(radiusY)) {\n            throw TypeError(`Expected radiusY to be a number, but found ${radiusY}`);\n        }\n        if (isNaN(startRadians)) {\n            throw TypeError(`Expected startRadians to be a number, but found ${startRadians}`);\n        }\n        if (isNaN(endRadians)) {\n            throw TypeError(`Expected endRadians to be a number, but found ${endRadians}`);\n        }\n\n        return new ShapeInfo(ShapeInfo.ARC, [\n            new Point2D(centerX, centerY),\n            radiusX,\n            radiusY,\n            startRadians,\n            endRadians\n        ]);\n    }\n\n    /**\n     *  quadraticBezier\n     *\n     *  @param {number} p1x\n     *  @param {number} p1y\n     *  @param {number} p2x\n     *  @param {number} p2y\n     *  @param {number} p3x\n     *  @param {number} p3y\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static quadraticBezier(p1x, p1y, p2x, p2y, p3x, p3y) {\n        if (isNaN(p1x)) {\n            throw TypeError(`Expected p1x to be a number, but found ${p1x}`);\n        }\n        if (isNaN(p1y)) {\n            throw TypeError(`Expected p1y to be a number, but found ${p1y}`);\n        }\n        if (isNaN(p2x)) {\n            throw TypeError(`Expected p2x to be a number, but found ${p2x}`);\n        }\n        if (isNaN(p2y)) {\n            throw TypeError(`Expected p2y to be a number, but found ${p2y}`);\n        }\n        if (isNaN(p3x)) {\n            throw TypeError(`Expected p3x to be a number, but found ${p3x}`);\n        }\n        if (isNaN(p3y)) {\n            throw TypeError(`Expected p3y to be a number, but found ${p3y}`);\n        }\n\n        return new ShapeInfo(ShapeInfo.QUADRATIC_BEZIER, [\n            new Point2D(p1x, p1y),\n            new Point2D(p2x, p2y),\n            new Point2D(p3x, p3y)\n        ]);\n    }\n\n    /**\n     *  cubicBezier\n     *\n     *  @param {number} p1x\n     *  @param {number} p1y\n     *  @param {number} p2x\n     *  @param {number} p2y\n     *  @param {number} p3x\n     *  @param {number} p3y\n     *  @param {number} p4x\n     *  @param {number} p4y\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static cubicBezier(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {\n        if (isNaN(p1x)) {\n            throw TypeError(`Expected p1x to be a number, but found ${p1x}`);\n        }\n        if (isNaN(p1y)) {\n            throw TypeError(`Expected p1y to be a number, but found ${p1y}`);\n        }\n        if (isNaN(p2x)) {\n            throw TypeError(`Expected p2x to be a number, but found ${p2x}`);\n        }\n        if (isNaN(p2y)) {\n            throw TypeError(`Expected p2y to be a number, but found ${p2y}`);\n        }\n        if (isNaN(p3x)) {\n            throw TypeError(`Expected p3x to be a number, but found ${p3x}`);\n        }\n        if (isNaN(p3y)) {\n            throw TypeError(`Expected p3y to be a number, but found ${p3y}`);\n        }\n        if (isNaN(p4x)) {\n            throw TypeError(`Expected p4x to be a number, but found ${p4x}`);\n        }\n        if (isNaN(p4y)) {\n            throw TypeError(`Expected p4y to be a number, but found ${p4y}`);\n        }\n\n        return new ShapeInfo(ShapeInfo.CUBIC_BEZIER, [\n            new Point2D(p1x, p1y),\n            new Point2D(p2x, p2y),\n            new Point2D(p3x, p3y),\n            new Point2D(p4x, p4y)\n        ]);\n    }\n\n    /**\n     *  circle\n     *\n     *  @param {number} centerX\n     *  @param {number} centerY\n     *  @param {number} radius\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static circle(centerX, centerY, radius) {\n        if (isNaN(centerX)) {\n            throw TypeError(`Expected centerX to be a number, but found ${centerX}`);\n        }\n        if (isNaN(centerY)) {\n            throw TypeError(`Expected centerY to be a number, but found ${centerY}`);\n        }\n        if (isNaN(radius)) {\n            throw TypeError(`Expected radius to be a number, but found ${radius}`);\n        }\n\n        return new ShapeInfo(ShapeInfo.CIRCLE, [\n            new Point2D(centerX, centerY),\n            radius\n        ]);\n    }\n\n    /**\n     *  ellipse\n     *\n     *  @param {number} centerX\n     *  @param {number} centerY\n     *  @param {number} radiusX\n     *  @param {number} radiusY\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static ellipse(centerX, centerY, radiusX, radiusY) {\n        if (isNaN(centerX)) {\n            throw TypeError(`Expected centerX to be a number, but found ${centerX}`);\n        }\n        if (isNaN(centerY)) {\n            throw TypeError(`Expected centerY to be a number, but found ${centerY}`);\n        }\n        if (isNaN(radiusX)) {\n            throw TypeError(`Expected radiusX to be a number, but found ${radiusX}`);\n        }\n        if (isNaN(radiusY)) {\n            throw TypeError(`Expected radiusY to be a number, but found ${radiusY}`);\n        }\n\n        return new ShapeInfo(ShapeInfo.ELLIPSE, [\n            new Point2D(centerX, centerY),\n            radiusX,\n            radiusY\n        ]);\n    }\n\n    /**\n     *  line\n     *\n     *  @param {number} p1x\n     *  @param {number} p1y\n     *  @param {number} p2x\n     *  @param {number} p2y\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static line(p1x, p1y, p2x, p2y) {\n        if (isNaN(p1x)) {\n            throw TypeError(`Expected p1x to be a number, but found ${p1x}`);\n        }\n        if (isNaN(p1y)) {\n            throw TypeError(`Expected p1y to be a number, but found ${p1y}`);\n        }\n        if (isNaN(p2x)) {\n            throw TypeError(`Expected p2x to be a number, but found ${p2x}`);\n        }\n        if (isNaN(p2y)) {\n            throw TypeError(`Expected p2y to be a number, but found ${p2y}`);\n        }\n\n        return new ShapeInfo(ShapeInfo.LINE, [\n            new Point2D(p1x, p1y),\n            new Point2D(p2x, p2y)\n        ]);\n    }\n\n    /**\n     *  path\n     *\n     *  @param {string} pathData\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static path(pathData) {\n        if (typeof pathData !== \"string\") {\n            throw TypeError(`Expected pathData to be a string, but found ${pathData}`);\n        }\n\n        parser.parseData(pathData);\n\n        return new ShapeInfo(ShapeInfo.PATH, handler.shapes);\n    }\n\n    /**\n     *  polygon\n     *\n     *  @param {Array<number>} coords\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static polygon(coords) {\n        /* eslint-disable-next-line compat/compat */\n        if (Array.isArray(coords) === false) {\n            throw TypeError(`Expected points to be an Array, but found ${coords}`);\n        }\n        if (coords.some(c => isNaN(c))) {\n            throw TypeError(\"Expected all members of coords to be numbers\");\n        }\n\n        const points = [];\n\n        for (let i = 0; i < coords.length; i += 2) {\n            points.push(new Point2D(coords[i], coords[i + 1]));\n        }\n\n        return new ShapeInfo(ShapeInfo.POLYGON, [points]);\n    }\n\n    /**\n     *  polyline\n     *\n     *  @param {Array<number>} coords\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static polyline(coords) {\n        /* eslint-disable-next-line compat/compat */\n        if (Array.isArray(coords) === false) {\n            throw TypeError(`Expected points to be an Array, but found ${coords}`);\n        }\n        if (coords.some(c => isNaN(c))) {\n            throw TypeError(\"Expected all members of coords to be numbers\");\n        }\n\n        const points = [];\n\n        for (let i = 0; i < coords.length; i += 2) {\n            points.push(new Point2D(coords[i], coords[i + 1]));\n        }\n\n        return new ShapeInfo(ShapeInfo.POLYLINE, [points]);\n    }\n\n    /**\n     *  rectangle\n     *\n     *  @param {number} x\n     *  @param {number} y\n     *  @param {number} width\n     *  @param {number} height\n     *  @param {number} [rx]\n     *  @param {number} [ry]\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static rectangle(x, y, width, height, rx = 0, ry = 0) {\n        if (isNaN(x)) {\n            throw TypeError(`Expected x to be a number, but found ${x}`);\n        }\n        if (isNaN(y)) {\n            throw TypeError(`Expected y to be a number, but found ${y}`);\n        }\n        if (isNaN(width)) {\n            throw TypeError(`Expected width to be a number, but found ${width}`);\n        }\n        if (isNaN(height)) {\n            throw TypeError(`Expected height to be a number, but found ${height}`);\n        }\n        if (isNaN(rx)) {\n            throw TypeError(`Expected rx to be a number, but found ${rx}`);\n        }\n        if (isNaN(ry)) {\n            throw TypeError(`Expected ry to be a number, but found ${ry}`);\n        }\n\n        if (rx === 0 && ry === 0) {\n            return new ShapeInfo(ShapeInfo.RECTANGLE, [\n                new Point2D(x, y),\n                new Point2D(x + width, y + height)\n            ]);\n        }\n\n        if (rx === 0) {\n            rx = ry;\n        }\n        if (ry === 0) {\n            ry = rx;\n        }\n        if (rx > width * 0.5) {\n            rx = width * 0.5;\n        }\n        if (ry > height * 0.5) {\n            ry = height * 0.5;\n        }\n\n        const x0 = x;\n        const y0 = y;\n        const x1 = x + rx;\n        const y1 = y + ry;\n        const x2 = x + width - rx;\n        const y2 = y + height - ry;\n        const x3 = x + width;\n        const y3 = y + height;\n\n        const degree90 = Math.PI * 0.5;\n        const segments = [];\n\n        segments.push(Shapes.arc(x1, y1, rx, ry, 2 * degree90, 3 * degree90));\n        segments.push(Shapes.line(x1, y0, x2, y0));\n        segments.push(Shapes.arc(x2, y1, rx, ry, 3 * degree90, 4 * degree90));\n        segments.push(Shapes.line(x3, y1, x3, y2));\n        segments.push(Shapes.arc(x2, y2, rx, ry, 0, degree90));\n        segments.push(Shapes.line(x2, y3, x1, y3));\n        segments.push(Shapes.arc(x1, y2, rx, ry, degree90, 2 * degree90));\n        segments.push(Shapes.line(x0, y2, x0, y1));\n\n        return ShapeInfo(ShapeInfo.PATH, segments);\n    }\n}\n\nexport default Shapes;\n","/* eslint-disable no-restricted-syntax */\n/**\n *  AffineShapes\n *\n *  @copyright 2017-2019, Kevin Lindsey\n *  @module AffineShapes\n */\n\nimport {Point2D, Vector2D} from \"kld-affine\";\nimport ShapeInfo from \"./ShapeInfo.js\";\nimport Shapes from \"./Shapes.js\";\n\n/**\n * Build shapes for intersection\n */\nclass AffineShapes {\n    /**\n     * arc\n     *\n     * @param {module:kld-intersections.Point2D} center\n     * @param {number} radiusX\n     * @param {number} radiusY\n     * @param {number} startRadians\n     * @param {number} endRadians\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static arc(center, radiusX, radiusY, startRadians, endRadians) {\n        if (center instanceof Point2D === false) {\n            throw TypeError(`Expected center to be a Point2D, but found ${center}`);\n        }\n        if (isNaN(radiusX)) {\n            throw TypeError(`Expected radiusX to be a number, but found ${radiusX}`);\n        }\n        if (isNaN(radiusY)) {\n            throw TypeError(`Expected radiusY to be a number, but found ${radiusY}`);\n        }\n        if (isNaN(startRadians)) {\n            throw TypeError(`Expected startRadians to be a number, but found ${startRadians}`);\n        }\n        if (isNaN(endRadians)) {\n            throw TypeError(`Expected endRadians to be a number, but found ${endRadians}`);\n        }\n\n        return new ShapeInfo(ShapeInfo.ARC, [center, radiusX, radiusY, startRadians, endRadians]);\n    }\n\n    /**\n     *  quadraticBezier\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static quadraticBezier(p1, p2, p3) {\n        if (p1 instanceof Point2D === false) {\n            throw TypeError(`Expected p1 to be a Point2D, but found ${p1}`);\n        }\n        if (p2 instanceof Point2D === false) {\n            throw TypeError(`Expected p2 to be a Point2D, but found ${p2}`);\n        }\n        if (p3 instanceof Point2D === false) {\n            throw TypeError(`Expected p3 to be a Point2D, but found ${p3}`);\n        }\n\n        return new ShapeInfo(ShapeInfo.QUADRATIC_BEZIER, [p1, p2, p3]);\n    }\n\n    /**\n     *  cubicBezier\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @param {module:kld-intersections.Point2D} p3\n     *  @param {module:kld-intersections.Point2D} p4\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static cubicBezier(p1, p2, p3, p4) {\n        if (p1 instanceof Point2D === false) {\n            throw TypeError(`Expected p1 to be a Point2D, but found ${p1}`);\n        }\n        if (p2 instanceof Point2D === false) {\n            throw TypeError(`Expected p2 to be a Point2D, but found ${p2}`);\n        }\n        if (p3 instanceof Point2D === false) {\n            throw TypeError(`Expected p3 to be a Point2D, but found ${p3}`);\n        }\n        if (p4 instanceof Point2D === false) {\n            throw TypeError(`Expected p4 to be a Point2D, but found ${p4}`);\n        }\n\n        return new ShapeInfo(ShapeInfo.CUBIC_BEZIER, [p1, p2, p3, p4]);\n    }\n\n    /**\n     *  circle\n     *\n     *  @param {module:kld-intersections.Point2D} center\n     *  @param {number} radius\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static circle(center, radius) {\n        if (center instanceof Point2D === false) {\n            throw TypeError(`Expected center to be a Point2D, but found ${center}`);\n        }\n        if (isNaN(radius)) {\n            throw TypeError(`Expected radius to be a number, but found ${radius}`);\n        }\n\n        return new ShapeInfo(ShapeInfo.CIRCLE, [center, radius]);\n    }\n\n    /**\n     *  ellipse\n     *\n     *  @param {module:kld-intersections.Point2D} center\n     *  @param {number} radiusX\n     *  @param {number} radiusY\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static ellipse(center, radiusX, radiusY) {\n        if (center instanceof Point2D === false) {\n            throw TypeError(`Expected center to be a Point2D, but found ${center}`);\n        }\n        if (isNaN(radiusX)) {\n            throw TypeError(`Expected radiusX to be a number, but found ${radiusX}`);\n        }\n        if (isNaN(radiusY)) {\n            throw TypeError(`Expected radiusY to be a number, but found ${radiusY}`);\n        }\n\n        return new ShapeInfo(ShapeInfo.ELLIPSE, [center, radiusX, radiusY]);\n    }\n\n    /**\n     *  line\n     *\n     *  @param {module:kld-intersections.Point2D} p1\n     *  @param {module:kld-intersections.Point2D} p2\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static line(p1, p2) {\n        if (p1 instanceof Point2D === false) {\n            throw TypeError(`Expected p1 to be a Point2D, but found ${p1}`);\n        }\n        if (p2 instanceof Point2D === false) {\n            throw TypeError(`Expected p2 to be a Point2D, but found ${p2}`);\n        }\n\n        return new ShapeInfo(ShapeInfo.LINE, [p1, p2]);\n    }\n\n    /**\n     *  path\n     *\n     *  @param {string} pathData\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static path(pathData) {\n        return Shapes.path(pathData);\n    }\n\n    /**\n     *  polygon\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static polygon(points) {\n        /* eslint-disable-next-line compat/compat */\n        if (Array.isArray(points) === false) {\n            throw TypeError(`Expected points to be an Array, but found ${points}`);\n        }\n        if (points.some(p => p instanceof Point2D === false)) {\n            throw TypeError(\"Expected all members of points to be Point2Ds\");\n        }\n\n        return new ShapeInfo(ShapeInfo.POLYGON, [points]);\n    }\n\n    /**\n     *  polyline\n     *\n     *  @param {Array<module:kld-intersections.Point2D>} points\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static polyline(points) {\n        if (points.some(p => p instanceof Point2D === false)) {\n            throw TypeError(\"Expected all members of points to be Point2Ds\");\n        }\n\n        return new ShapeInfo(ShapeInfo.POLYLINE, [points]);\n    }\n\n    /**\n     *  rectangle\n     *\n     *  @param {module:kld-intersections.Point2D} topLeft\n     *  @param {module:kld-intersections.Vector2D} size\n     *  @param {number} [rx]\n     *  @param {number} [ry]\n     *  @returns {module:kld-intersections.ShapeInfo}\n     */\n    static rectangle(topLeft, size, rx = 0, ry = 0) {\n        if (topLeft instanceof Point2D === false) {\n            throw TypeError(`Expected topLeft to be a Point2D, but found ${topLeft}`);\n        }\n        if (size instanceof Vector2D === false) {\n            throw TypeError(`Expected size to be a Vector2D, but found ${size}`);\n        }\n        if (isNaN(rx)) {\n            throw TypeError(`Expected rx to be a number, but found ${rx}`);\n        }\n        if (isNaN(ry)) {\n            throw TypeError(`Expected ry to be a number, but found ${ry}`);\n        }\n\n        return Shapes.rectangle(topLeft.x, topLeft.y, size.x, size.y, rx, ry);\n    }\n}\n\nexport default AffineShapes;\n","/* eslint-disable no-restricted-syntax */\nimport {Point2D} from \"kld-affine\";\nimport ShapeInfo from \"./ShapeInfo.js\";\nimport Shapes from \"./Shapes.js\";\n\nclass SvgShapes {\n    /**\n     * circle\n     *\n     * @param {SVGCircleElement} circle\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static circle(circle) {\n        if (circle instanceof SVGCircleElement === false) {\n            throw new TypeError(`Expected SVGCircleElement, but found ${circle}`);\n        }\n\n        const center = new Point2D(\n            circle.cx.baseVal.value,\n            circle.cy.baseVal.value\n        );\n        const radius = circle.r.baseVal.value;\n\n        return new ShapeInfo(ShapeInfo.CIRCLE, [center, radius]);\n    }\n\n    /**\n     * ellipse\n     *\n     * @param {SVGEllipseElement} ellipse\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static ellipse(ellipse) {\n        if (ellipse instanceof SVGEllipseElement === false) {\n            throw new TypeError(`Expected SVGEllipseElement, but found ${ellipse}`);\n        }\n\n        const center = new Point2D(\n            ellipse.cx.baseVal.value,\n            ellipse.cy.baseVal.value\n        );\n        const radiusX = ellipse.rx.baseVal.value;\n        const radiusY = ellipse.ry.baseVal.value;\n\n        return new ShapeInfo(ShapeInfo.ELLIPSE, [center, radiusX, radiusY]);\n    }\n\n    /**\n     * line\n     *\n     * @param {SVGLineElement} line\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static line(line) {\n        if (line instanceof SVGLineElement === false) {\n            throw new TypeError(`Expected SVGLineElement, but found ${line}`);\n        }\n\n        const p1 = new Point2D(\n            line.x1.baseVal.value,\n            line.y1.baseVal.value\n        );\n        const p2 = new Point2D(\n            line.x2.baseVal.value,\n            line.y2.baseVal.value\n        );\n\n        return new ShapeInfo(ShapeInfo.LINE, [p1, p2]);\n    }\n\n    /**\n     * path\n     *\n     * @param {SVGPathElement} path\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static path(path) {\n        if (path instanceof SVGPathElement === false) {\n            throw new TypeError(`Expected SVGPathElement, but found ${path}`);\n        }\n\n        const pathData = path.getAttributeNS(null, \"d\");\n\n        return Shapes.path(pathData);\n    }\n\n    /**\n     * polygon\n     *\n     * @param {SVGPolygonElement} polygon\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static polygon(polygon) {\n        if (polygon instanceof SVGPolygonElement === false) {\n            throw new TypeError(`Expected SVGPolygonElement, but found ${polygon}`);\n        }\n\n        const points = [];\n\n        for (let i = 0; i < polygon.points.numberOfItems; i++) {\n            const point = polygon.points.getItem(i);\n\n            points.push(new Point2D(point.x, point.y));\n        }\n\n        return new ShapeInfo(ShapeInfo.POLYGON, [points]);\n    }\n\n    /**\n     * polyline\n     *\n     * @param {SVGPolylineElement} polyline\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static polyline(polyline) {\n        if (polyline instanceof SVGPolylineElement === false) {\n            throw new TypeError(`Expected SVGPolylineElement, but found ${polyline}`);\n        }\n\n        const points = [];\n\n        for (let i = 0; i < polyline.points.numberOfItems; i++) {\n            const point = polyline.points.getItem(i);\n\n            points.push(new Point2D(point.x, point.y));\n        }\n\n        return new ShapeInfo(ShapeInfo.POLYLINE, [points]);\n    }\n\n    /**\n     * rect\n     *\n     * @param {SVGRectElement} rect\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static rect(rect) {\n        if (rect instanceof SVGRectElement === false) {\n            throw new TypeError(`Expected SVGRectElement, but found ${rect}`);\n        }\n\n        return Shapes.rectangle(\n            rect.x.baseVal.value,\n            rect.y.baseVal.value,\n            rect.width.baseVal.value,\n            rect.height.baseVal.value,\n            rect.rx.baseVal.value,\n            rect.ry.baseVal.value\n        );\n    }\n\n    /**\n     * element\n     *\n     * @param {SVGElement} element\n     * @returns {module:kld-intersections.ShapeInfo}\n     */\n    static element(element) {\n        if (element instanceof SVGElement === false) {\n            throw new TypeError(`Expected SVGElement, but found ${element}`);\n        }\n\n        /* eslint-disable-next-line prefer-destructuring */\n        const tagName = element.tagName;\n\n        switch (tagName) {\n            case \"circle\":\n                return SvgShapes.circle(element);\n            case \"ellipse\":\n                return SvgShapes.ellipse(element);\n            case \"line\":\n                return SvgShapes.line(element);\n            case \"path\":\n                return SvgShapes.path(element);\n            case \"polygon\":\n                return SvgShapes.polygon(element);\n            case \"polyline\":\n                return SvgShapes.polyline(element);\n            case \"rect\":\n                return SvgShapes.rect(element);\n            default:\n                throw new TypeError(`Unrecognized element type: '${tagName}'`);\n        }\n    }\n}\n\nexport default SvgShapes;\n","/**\n *\n *  IntersectionQuery.js\n *\n *  @copyright 2017 Kevin Lindsey\n * @module IntersectionQuery\n */\n\nimport {Vector2D} from \"kld-affine\";\n\n/**\n * @namespace\n */\nconst IntersectionQuery = {};\n\n\n/**\n *  pointInCircle\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {module:kld-intersections.Point2D} center\n *  @param {number} radius\n *  @returns {boolean}\n */\nIntersectionQuery.pointInCircle = function(point, center, radius) {\n    const v = Vector2D.fromPoints(center, point);\n\n    return v.length() <= radius;\n};\n\n\n/**\n *  pointInEllipse\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {module:kld-intersections.Point2D} center\n *  @param {number} radiusX\n *  @param {number} radiusY\n *  @returns {boolean}\n */\nIntersectionQuery.pointInEllipse = function(point, center, radiusX, radiusY) {\n    const len = point.subtract(center);\n\n    return (len.x * len.x) / (radiusX * radiusX) + (len.y * len.y) / (radiusY * radiusY) <= 1;\n};\n\n\n/**\n *  pointInPolyline\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {Array<module:kld-intersections.Point2D>} points\n */\nIntersectionQuery.pointInPolyline = function(point, points) {\n    const {length: len} = points;\n    let counter = 0;\n    let xInter;\n\n    let p1 = points[0];\n\n    for (let i = 1; i <= len; i++) {\n        const p2 = points[i % len];\n        const minY = Math.min(p1.y, p2.y);\n        const maxY = Math.max(p1.y, p2.y);\n        const maxX = Math.max(p1.x, p2.x);\n\n        if (p1.y !== p2.y && minY < point.y && point.y <= maxY && point.x <= maxX) {\n            xInter = (point.y - p1.y) * (p2.x - p1.x) / (p2.y - p1.y) + p1.x;\n\n            if (p1.x === p2.x || point.x <= xInter) {\n                counter++;\n            }\n        }\n\n        p1 = p2;\n    }\n\n    return (counter % 2 === 1);\n};\n\n\n/**\n *  pointInPolyline\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {Array<module:kld-intersections.Point2D>} points\n */\nIntersectionQuery.pointInPolygon = IntersectionQuery.pointInPolyline;\n\n\n/**\n *  pointInRectangle\n *\n *  @param {module:kld-intersections.Point2D} point\n *  @param {module:kld-intersections.Point2D} topLeft\n *  @param {module:kld-intersections.Point2D} bottomRight\n *  @returns {boolean}\n */\nIntersectionQuery.pointInRectangle = function(point, topLeft, bottomRight) {\n    return (\n        topLeft.x <= point.x && point.x < bottomRight.x &&\n        topLeft.y <= point.y && point.y < bottomRight.y\n    );\n};\n\n\nexport default IntersectionQuery;\n"],"names":["Point2D","x","y","this","constructor","that","scalar","precision","Math","abs","t","omt","dx","dy","sqrt","min","max","matrix","a","c","e","b","d","f","Vector2D","divide","length","cos","dot","radians","acos","cross","subtract","project","percent","multiply","p1","p2","Matrix2D","isIdentity","det1","Error","idet","det2","det3","tx","ty","scale","center","scaleX","scaleY","s","sin","cx","cy","vector","unit","tan","E","F","G","H","Q","R","a1","atan2","a2","theta","phi","translation","rotation","nonUniformScaling","rotation0","sign","NaN","IDENTITY","Polynomial","coefs","i","arguments","push","_variable","_s","poly","slice","isNaN","TypeError","result","d1","getDegree","d2","dmax","v1","v2","j","TOLERANCE","pop","err","reduce","pv","cv","divideEqualsScalar","signs","value","round","signString","ACCURACY","minValue","eval","maxValue","tmp1","log","tmp2","LN10","maxIterations","ceil","LN2","n","range","iter","delta","sum","st","os","ost","Array","MAX","h","trapezoid","interpolate","maxAbsX","rb","bounds","minX","maxX","an","m","v","nm","pow","map","coefSelectionFunc","find2Max","acc","bi","nearmax","max_nearmax_pos","negX","posX","reverse","res","boundsUpperRealFujiwara","urb","boundsLowerRealFujiwara","prev","curr","undersqrt","accum","ai","prev_a","pos","neg","maxRealPos","maxRealNeg","minComplex","derivative","simplifyEquals","getLinearRoot","getQuadraticRoots","getCubicRoots","getQuarticRoots","roots","RangeError","bisection","droots","getDerivative","getRootsInInterval","results","c3","c2","c1","offset","discrim","halfB","ZEROepsilon","zeroErrorEstimate","root","tmp","distance","angle","sqrt3","poly_d","derrt","getRoots","sort","dery","nr","maxabsX","guesses","minmax","df","newtonSecantBisection","concat","xs","ys","ns","diff","dift","ho","hp","w","den","x0","max_iterations","dfx","x_correction","x_new","y_atmin","y_atmax","prev_dfx","prev_x_ef_correction","min_correction_factor","isBounded","isEnoughCorrection","parser","o","k","l","$V0","$V1","$V2","$V3","$V4","$V5","$V6","$V7","$V8","$V9","$Va","$Vb","$Vc","$Vd","$Ve","$Vf","$Vg","$Vh","$Vi","$Vj","$Vk","$Vl","$Vm","$Vn","$Vo","$Vp","$Vq","$Vr","$Vs","$Vt","$Vu","$Vv","$Vw","$Vx","$Vy","$Vz","$VA","$VB","$VC","$VD","$VE","$VF","$VG","$VH","$VI","$VJ","$VK","$VL","$VM","$VN","$VO","$VP","$VQ","$VR","$VS","$VT","$VU","$VV","$VW","$VX","$VY","$VZ","$V_","$V$","$V01","$V11","$V21","$V31","$V41","$V51","$V61","$V71","$V81","trace","yy","symbols_","terminals_","productions_","performAction","yytext","yyleng","yylineno","yystate","$$","_$","$0","$","type","name","patterns","patternType","returnValue","definition","assignTo","expression","args","undefined","left","right","pattern","start","stop","elements","Infinity","substring","parseInt","parseFloat","table","defaultActions","parseError","str","hash","recoverable","error","parse","input","self","stack","tstack","lstack","call","lexer","Object","create","sharedState","prototype","hasOwnProperty","setInput","yylloc","yyloc","ranges","options","getPrototypeOf","symbol","preErrorSymbol","state","action","r","p","len","newState","expected","lex","token","yyval","errStr","showPosition","join","text","match","line","loc","vstack","first_line","last_line","first_column","last_column","apply","EOF","_input","_more","_backtrack","done","matched","conditionStack","ch","unput","lines","split","substr","oldLines","more","reject","backtrack_lexer","less","pastInput","past","replace","upcomingInput","next","pre","test_match","indexed_rule","backup","matches","tempMatch","index","rules","_currentRules","flex","begin","condition","popState","conditions","topState","pushState","stateStackSize","yy_","$avoiding_name_collisions","YY_START","Parser","isObject","obj","_typeof","Transformer","types","transforms","generators","typeCreators","messages","verbose","source","addDefinitionsFromTable","forEach","description","_this","message","level","structure","statements","statement","executeTransform","executeType","addError","symbolTable","transform","currentObject","executePattern","executeGenerator","assign","executeArrayType","includes","executeObjectType","isArray","element","elementValue","executeAssignment","property","propertyValue","executeTransforms","assignment","executeArrayPattern","propertyPattern","referencedPattern","executeArrayPatternElement","executeArrayElementPattern","executeArrayElementGroupPattern","actualIndex","group","getNumbers","operation","_this2","object","arg","createType","elementExpression","propertyExpression","addDefinitionsFromSource","console","ShapeInfo","ARC","QUADRATIC_BEZIER","CUBIC_BEZIER","CIRCLE","ELLIPSE","LINE","PATH","POLYGON","POLYLINE","RECTANGLE","properties","transformType","data","transformer","execute","JSON","stringify","fromSource","ListOfCoords","ps","ListOfPoints","TWO_PI","PI","UNIT_X","isNullish","normalizeAngle","normal","restrictPointsToArc","intersections","radiusX","radiusY","startRadians","endRadians","points","Intersection","startNormal","endNormal","angleBetween","fromPoints","appendPoint","status","closePolygon","copy","init","point","shape1","shape2","intersectPathShape","intersectArcShape","method","path","shape","segment","inter","intersect","appendPoints","arc","ellipse","a3","b1","b2","b3","c12","add","c11","c10","c22","c21","c20","g","xp","xRoots","yp","yRoots","checkRoots","xRoot","b4","c23","c10x2","c10y2","c11x2","c11y2","c12x2","c12y2","c20x2","c20y2","c21x2","c21y2","c22x2","c22y2","c23x2","c23y2","p3","intersectBezier2Ellipse","ec","rx","ry","c0","rxrx","ryry","cl","p4","lerp","p5","p6","intersectBezier2Polyline","intersectBezier2Line","r1","r2","topRight","bottomLeft","inter1","inter2","inter3","inter4","a4","c13","e0","e1","e2","e3","f0","f1","f2","f3","g0","g1","g2","g3","h0","h1","h2","h3","i0","i1","i2","i3","intersectBezier3Ellipse","p7","p8","p9","p10","intersectBezier3Polyline","intersectBezier3Line","r_max","r_min","c_dist","distanceFrom","cc","intersectEllipseEllipse","deter","u1","u2","intersectCirclePolyline","intersectCircleLine","rx1","ry1","rx2","ry2","AB","AC","AD","AE","AF","BC","BE","BF","CD","DE","DF","BFpDE","BEmCD","norm0","norm1","tst","orign","dir","mDir","mDiff","t_a","t_b","intersectEllipsePolyline","intersectEllipseLine","ua_t","ub_t","u_b","ua","ub","intersectLinePolyline","intersectLineLine","points1","points2","intersectPolylinePolyline","intersectPolylineRectangle","intersectLineRectangle","PathLexeme","UNDEFINED","COMMAND","NUMBER","EOD","PathLexer","pathData","setPathData","_pathData","RegExp","$1","SyntaxError","PathParser","_lexer","_handler","beginParse","mode","lastToken","getNextToken","typeis","parameterCount","params","PARAMCOUNT","toUpperCase","handler","methodName","METHODNAME","endParse","A","C","L","M","S","T","V","Z","q","z","getArcParameters","startPoint","endPoint","arcFlag","sweepFlag","halfDiff","x1p","y1p","x1px1p","y1py1p","lambda","factor","rxy1","ryx1","sq","mid","cxp","cyp","xcr1","xcr2","ycr1","ycr2","theta1","deltaTheta","PathHandler","shapes","firstX","firstY","lastX","lastY","lastCommand","xAxisRotation","addShape","Shapes","arcParameters","x1","y1","x2","y2","cubicBezier","quadraticBezier","controlX","controlY","secondToLast","setHandler","centerX","centerY","p1x","p1y","p2x","p2y","p3x","p3y","p4x","p4y","radius","parseData","coords","some","width","height","y0","x3","y3","degree90","segments","AffineShapes","topLeft","size","rectangle","SvgShapes","circle","SVGCircleElement","baseVal","SVGEllipseElement","SVGLineElement","SVGPathElement","getAttributeNS","polygon","SVGPolygonElement","numberOfItems","getItem","polyline","SVGPolylineElement","rect","SVGRectElement","SVGElement","tagName","IntersectionQuery","xInter","counter","minY","maxY","pointInPolygon","pointInPolyline","pointInRectangle","bottomRight"],"mappings":"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CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIC,EAAI,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,EAAE,EAAE,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,EAAE,IAAIC,EAAI,CAAC,GAAG,IA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"}