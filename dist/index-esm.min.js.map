{"version":3,"file":"index-esm.min.js","sources":["../node_modules/kld-affine/lib/Point2D.js","../node_modules/kld-affine/lib/Vector2D.js","../node_modules/kld-affine/lib/Matrix2D.js","../node_modules/kld-affine/index.js","../node_modules/kld-polynomial/lib/Polynomial.js","../node_modules/kld-polynomial/lib/SqrtPolynomial.js","../node_modules/kld-polynomial/index.js","../lib/Intersection.js","../lib/IntersectionArgs.js","../lib/Shapes.js","../lib/AffineShapes.js","../lib/IntersectionQuery.js"],"sourcesContent":["/**\n *\n *   Point2D.js\n *\n *   copyright 2001-2002, 2013, 2017 Kevin Lindsey\n *\n */\n\n/**\n *  Point2D\n *\n *  @param {Number} x\n *  @param {Number} y\n *  @returns {Point2D}\n */\nfunction Point2D(x, y) {\n    Object.defineProperties(this, {\n        \"x\": {\n            value: x !== undefined ? x : 0.0,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        },\n        \"y\": {\n            value: y !== undefined ? y : 0.0,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        }\n    });\n}\n\n/**\n *  clone\n *\n *  @returns {Point2D}\n */\nPoint2D.prototype.clone = function() {\n    return new this.constructor(this.x, this.y);\n};\n\n/**\n *  add\n *\n *  @param {Point2D|Vector2D} that\n *  @returns {Point2D}\n */\nPoint2D.prototype.add = function(that) {\n    return new this.constructor(this.x+that.x, this.y+that.y);\n};\n\n/**\n *  subtract\n *\n *  @param { Vector2D | Point2D } that\n *  @returns {Point2D}\n */\nPoint2D.prototype.subtract = function(that) {\n    return new this.constructor(this.x-that.x, this.y-that.y);\n};\n\n/**\n *  multiply\n *\n *  @param {Number} scalar\n *  @returns {Point2D}\n */\nPoint2D.prototype.multiply = function(scalar) {\n    return new this.constructor(this.x*scalar, this.y*scalar);\n};\n\n/**\n *  divide\n *\n *  @param {Number} scalar\n *  @returns {Point2D}\n */\nPoint2D.prototype.divide = function(scalar) {\n    return new this.constructor(this.x/scalar, this.y/scalar);\n};\n\n/**\n *  equals\n *\n *  @param {Point2D} that\n *  @returns {Boolean}\n */\nPoint2D.prototype.equals = function(that) {\n    return ( this.x === that.x && this.y === that.y );\n};\n\n/**\n *  precisionEquals\n *\n *  @param {Point2D} that\n *  @param {Number} precision\n *  @returns {Boolean}\n */\nPoint2D.prototype.precisionEquals = function(that, precision) {\n    return (\n        Math.abs(this.x - that.x) < precision &&\n        Math.abs(this.y - that.y) < precision\n    );\n};\n\n// utility methods\n\n/**\n *  lerp\n *\n *  @param { Vector2D | Point2D } that\n *  @param {Number} t\n @  @returns {Point2D}\n */\nPoint2D.prototype.lerp = function(that, t) {\n    var omt = 1.0 - t;\n\n    return new this.constructor(\n        this.x * omt + that.x * t,\n        this.y * omt + that.y * t\n    );\n};\n\n/**\n *  distanceFrom\n *\n *  @param {Point2D} that\n *  @returns {Number}\n */\nPoint2D.prototype.distanceFrom = function(that) {\n    var dx = this.x - that.x;\n    var dy = this.y - that.y;\n\n    return Math.sqrt(dx*dx + dy*dy);\n};\n\n/**\n *  min\n *\n *  @param {Point2D} that\n *  @returns {Number}\n */\nPoint2D.prototype.min = function(that) {\n    return new this.constructor(\n        Math.min( this.x, that.x ),\n        Math.min( this.y, that.y )\n    );\n};\n\n/**\n *  max\n *\n *  @param {Point2D} that\n *  @returns {Number}\n */\nPoint2D.prototype.max = function(that) {\n    return new this.constructor(\n        Math.max( this.x, that.x ),\n        Math.max( this.y, that.y )\n    );\n};\n\n/**\n *  transform\n *\n *  @param {Matrix2D}\n *  @result {Point2D}\n */\nPoint2D.prototype.transform = function(matrix) {\n    return new this.constructor(\n        matrix.a * this.x + matrix.c * this.y + matrix.e,\n        matrix.b * this.x + matrix.d * this.y + matrix.f\n    );\n};\n\n/**\n *  toString\n *\n *  @returns {String}\n */\nPoint2D.prototype.toString = function() {\n    return \"point(\" + this.x + \",\" + this.y + \")\";\n};\n\nif (typeof module !== \"undefined\") {\n    module.exports = Point2D;\n}\n","/**\n *\n *   Vector2D.js\n *\n *   copyright 2001-2002, 2013, 2017 Kevin Lindsey\n *\n */\n\n/**\n *  Vector2D\n *\n *  @param {Number} x\n *  @param {Number} y\n *  @returns {Vector2D}\n */\nfunction Vector2D(x, y) {\n    Object.defineProperties(this, {\n        \"x\": {\n            value: x !== undefined ? x : 0.0,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        },\n        \"y\": {\n            value: y !== undefined ? y : 0.0,\n            writable: false,\n            enumerable: true,\n            configurable: false\n        }\n    });\n}\n\n/**\n *  fromPoints\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @returns {Vector2D}\n */\nVector2D.fromPoints = function(p1, p2) {\n    return new Vector2D(\n        p2.x - p1.x,\n        p2.y - p1.y\n    );\n};\n\n/**\n *  length\n *\n *  @returns {Number}\n */\nVector2D.prototype.length = function() {\n    return Math.sqrt(this.x*this.x + this.y*this.y);\n};\n\n/**\n *  magnitude\n *\n *  @returns {Number}\n */\nVector2D.prototype.magnitude = function() {\n    return this.x*this.x + this.y*this.y;\n};\n\n/**\n *  dot\n *\n *  @param {Vector2D} that\n *  @returns {Number}\n */\nVector2D.prototype.dot = function(that) {\n    return this.x*that.x + this.y*that.y;\n};\n\n/**\n *  cross\n *\n *  @param {Vector2D} that\n *  @returns {Number}\n */\nVector2D.prototype.cross = function(that) {\n    return this.x*that.y - this.y*that.x;\n};\n\n/**\n *  determinant\n *\n *  @param {Vector2D} that\n *  @returns {Number}\n */\nVector2D.prototype.determinant = function(that) {\n    return this.x*that.y - this.y*that.x;\n};\n\n/**\n *  unit\n *\n *  @returns {Vector2D}\n */\nVector2D.prototype.unit = function() {\n    return this.divide( this.length() );\n};\n\n/**\n *  add\n *\n *  @param {Vector2D} that\n *  @returns {Vector2D}\n */\nVector2D.prototype.add = function(that) {\n    return new this.constructor(this.x + that.x, this.y + that.y);\n};\n\n/**\n *  subtract\n *\n *  @param {Vector2D} that\n *  @returns {Vector2D}\n */\nVector2D.prototype.subtract = function(that) {\n    return new this.constructor(this.x - that.x, this.y - that.y);\n};\n\n/**\n *  multiply\n *\n *  @param {Number} scalar\n *  @returns {Vector2D}\n */\nVector2D.prototype.multiply = function(scalar) {\n    return new this.constructor(this.x * scalar, this.y * scalar);\n};\n\n/**\n *  divide\n *\n *  @param {Number} scalar\n *  @returns {Vector2D}\n */\nVector2D.prototype.divide = function(scalar) {\n    return new this.constructor(this.x / scalar, this.y / scalar);\n};\n\n/**\n *  angleBetween\n *\n *  @param {Vector2D} that\n *  @returns {Number}\n */\nVector2D.prototype.angleBetween = function(that) {\n    var cos = this.dot(that) / (this.length() * that.length());\n    cos = Math.max(-1, Math.min(cos, 1));\n    var radians = Math.acos(cos);\n\n    return (this.cross(that) < 0.0) ? -radians : radians;\n};\n\n/**\n *  Find a vector is that is perpendicular to this vector\n *\n *  @returns {Vector2D}\n */\nVector2D.prototype.perp = function() {\n    return new this.constructor(-this.y, this.x);\n};\n\n/**\n *  Find the component of the specified vector that is perpendicular to\n *  this vector\n *\n *  @param {Vector2D} that\n *  @returns {Vector2D}\n */\nVector2D.prototype.perpendicular = function(that) {\n    return this.subtract(this.project(that));\n};\n\n/**\n *  project\n *\n *  @param {Vector2D} that\n *  @returns {Vector2D}\n */\nVector2D.prototype.project = function(that) {\n    var percent = this.dot(that) / that.dot(that);\n\n    return that.multiply(percent);\n};\n\n/**\n *  transform\n *\n *  @param {Matrix2D}\n *  @returns {Vector2D}\n */\nVector2D.prototype.transform = function(matrix) {\n    return new this.constructor(\n        matrix.a * this.x + matrix.c * this.y,\n        matrix.b * this.x + matrix.d * this.y\n    );\n};\n\n/**\n *  equals\n *\n *  @param {Vector2D} that\n *  @returns {Boolean}\n */\nVector2D.prototype.equals = function(that) {\n    return (\n        this.x === that.x &&\n        this.y === that.y\n    );\n};\n\n/**\n *  precisionEquals\n *\n *  @param {Vector2D} that\n *  @param {Number} precision\n *  @returns {Boolean}\n */\nVector2D.prototype.precisionEquals = function(that, precision) {\n    return (\n        Math.abs(this.x - that.x) < precision &&\n        Math.abs(this.y - that.y) < precision\n    );\n};\n\n/**\n *  toString\n *\n *  @returns {String}\n */\nVector2D.prototype.toString = function() {\n    return \"vector(\" + this.x + \",\" + this.y + \")\";\n};\n\nif (typeof module !== \"undefined\") {\n    module.exports = Vector2D;\n}\n","/**\n *   Matrix2D.js\n *\n *   copyright 2001-2002, 2013, 2017 Kevin Lindsey\n */\n\nfunction setReadonlyProperty(object, property, value) {\n    Object.defineProperty(object, property, {\n        value: value,\n        writable: false,\n        enumerable: true,\n        configurable: false\n    });\n}\n\n/**\n *  Identity matrix\n *\n *  @returns {Matrix2D}\n */\nsetReadonlyProperty(Matrix2D, \"IDENTITY\", new Matrix2D(1, 0, 0, 1, 0, 0));\nsetReadonlyProperty(Matrix2D.IDENTITY, \"isIdentity\", function () { return true; });\n\n\n/**\n *  Matrix2D\n *\n *  [a c e]\n *  [b d f]\n *  [0 0 1]\n *\n *  @param {Number} a\n *  @param {Number} b\n *  @param {Number} c\n *  @param {Number} d\n *  @param {Number} e\n *  @param {Number} f\n *  @returns {Matrix2D}\n */\nfunction Matrix2D(a, b, c, d, e, f) {\n    setReadonlyProperty(this, \"a\", (a !== undefined) ? a : 1);\n    setReadonlyProperty(this, \"b\", (b !== undefined) ? b : 0);\n    setReadonlyProperty(this, \"c\", (c !== undefined) ? c : 0);\n    setReadonlyProperty(this, \"d\", (d !== undefined) ? d : 1);\n    setReadonlyProperty(this, \"e\", (e !== undefined) ? e : 0);\n    setReadonlyProperty(this, \"f\", (f !== undefined) ? f : 0);\n}\n\n\n// *** STATIC METHODS\n\n/**\n *  translation\n *\n *  @param {Number} tx\n *  @param {Number} ty\n *  @returns {Matrix2D}\n */\nMatrix2D.translation = function(tx, ty) {\n    return new Matrix2D(1, 0, 0, 1, tx, ty);\n};\n\n/**\n *  scaling\n *\n *  @param {Number} scale\n *  @returns {Matrix2D}\n */\nMatrix2D.scaling = function(scale) {\n    return new Matrix2D(scale, 0, 0, scale, 0, 0);\n};\n\n/**\n *  scalingAt\n *\n *  @param {Number} scale\n *  @param {Point2D} center\n *  @returns {Matrix2D}\n */\nMatrix2D.scalingAt = function(scale, center) {\n    return new Matrix2D(\n        scale,\n        0,\n        0,\n        scale,\n        center.x - center.x * scale,\n        center.y - center.y * scale\n    );\n}\n\n\n/**\n *  nonUniformScaling\n *\n *  @param {Number} scaleX\n *  @param {Number} scaleY\n *  @returns {Matrix2D}\n */\nMatrix2D.nonUniformScaling = function(scaleX, scaleY) {\n    return new Matrix2D(scaleX, 0, 0, scaleY, 0, 0);\n};\n\n/**\n *  nonUniformScalingAt\n *\n *  @param {Number} scaleX\n *  @param {Number} scaleY\n *  @param {Point2D} center\n *  @returns {Matrix2D}\n */\nMatrix2D.nonUniformScalingAt = function(scaleX, scaleY, center) {\n    return new Matrix2D(\n        scaleX,\n        0,\n        0,\n        scaleY,\n        center.x - center.x * scaleX,\n        center.y - center.y * scaleY\n    );\n};\n\n/**\n *  rotation\n *\n *  @param {Number} radians\n *  @returns {Matrix2D}\n */\nMatrix2D.rotation = function(radians) {\n    let c = Math.cos(radians);\n    let s = Math.sin(radians);\n\n    return new Matrix2D(c, s, -s, c, 0, 0);\n};\n\n/**\n *  rotationAt\n *\n *  @param {Number} radians\n *  @param {Point2D} center\n *  @returns {Matrix2D}\n */\nMatrix2D.rotationAt = function(radians, center) {\n    let c = Math.cos(radians);\n    let s = Math.sin(radians);\n\n    return new Matrix2D(\n        c,\n        s,\n        -s,\n        c,\n        center.x - center.x * c + center.y * s,\n        center.y - center.y * c - center.x * s\n    );\n};\n\n/**\n *  rotationFromVector\n *\n *  @param {Vector2D}\n *  @returns {Matrix2D}\n */\nMatrix2D.rotationFromVector = function(vector) {\n    var unit = vector.unit();\n    var c = unit.x; // cos\n    var s = unit.y; // sin\n\n    return new Matrix2D(c, s, -s, c, 0, 0);\n};\n\n/**\n *  xFlip\n *\n *  @returns {Matrix2D}\n */\nMatrix2D.xFlip = function() {\n    return new Matrix2D(-1, 0, 0, 1, 0, 0);\n};\n\n/**\n *  yFlip\n *\n *  @returns {Matrix2D}\n */\nMatrix2D.yFlip = function() {\n    return new Matrix2D(1, 0, 0, -1, 0, 0);\n};\n\n/**\n *  xSkew\n *\n *  @param {Number} radians\n *  @returns {Matrix2D}\n */\nMatrix2D.xSkew = function(radians) {\n    var t = Math.tan(radians);\n\n    return new Matrix2D(1, 0, t, 1, 0, 0);\n};\n\n/**\n *  ySkew\n *\n *  @param {Number} radians\n *  @returns {Matrix2D}\n */\nMatrix2D.ySkew = function(radians) {\n    var t = Math.tan(radians);\n\n    return new Matrix2D(1, t, 0, 1, 0, 0);\n};\n\n\n// *** METHODS\n\n/**\n *  multiply\n *\n *  @pararm {Matrix2D} that\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.multiply = function (that) {\n    if (this.isIdentity()) {\n        return that;\n    }\n\n    if (that.isIdentity()) {\n        return this;\n    }\n\n    return new this.constructor(\n        this.a * that.a + this.c * that.b,\n        this.b * that.a + this.d * that.b,\n        this.a * that.c + this.c * that.d,\n        this.b * that.c + this.d * that.d,\n        this.a * that.e + this.c * that.f + this.e,\n        this.b * that.e + this.d * that.f + this.f\n    );\n};\n\n/**\n *  inverse\n *\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.inverse = function () {\n    if (this.isIdentity()) {\n        return this;\n    }\n\n    var det1 = this.a * this.d - this.b * this.c;\n\n    if ( det1 === 0.0 ) {\n        throw(\"Matrix is not invertible\");\n    }\n\n    var idet = 1.0 / det1;\n    var det2 = this.f * this.c - this.e * this.d;\n    var det3 = this.e * this.b - this.f * this.a;\n\n    return new this.constructor(\n        this.d * idet,\n       -this.b * idet,\n       -this.c * idet,\n        this.a * idet,\n          det2 * idet,\n          det3 * idet\n    );\n};\n\n/**\n *  translate\n *\n *  @param {Number} tx\n *  @param {Number} ty\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.translate = function(tx, ty) {\n    return new this.constructor(\n        this.a,\n        this.b,\n        this.c,\n        this.d,\n        this.a * tx + this.c * ty + this.e,\n        this.b * tx + this.d * ty + this.f\n    );\n};\n\n/**\n *  scale\n *\n *  @param {Number} scale\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.scale = function(scale) {\n    return new this.constructor(\n        this.a * scale,\n        this.b * scale,\n        this.c * scale,\n        this.d * scale,\n        this.e,\n        this.f\n    );\n};\n\n/**\n *  scaleAt\n *\n *  @param {Number} scale\n *  @param {Point2D} center\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.scaleAt = function(scale, center) {\n    var dx = center.x - scale * center.x;\n    var dy = center.y - scale * center.y;\n\n    return new this.constructor(\n        this.a * scale,\n        this.b * scale,\n        this.c * scale,\n        this.d * scale,\n        this.a * dx + this.c * dy + this.e,\n        this.b * dx + this.d * dy + this.f\n    );\n};\n\n/**\n *  scaleNonUniform\n *\n *  @param {Number} scaleX\n *  @param {Number} scaleY\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.scaleNonUniform = function(scaleX, scaleY) {\n    return new this.constructor(\n        this.a * scaleX,\n        this.b * scaleX,\n        this.c * scaleY,\n        this.d * scaleY,\n        this.e,\n        this.f\n    );\n};\n\n/**\n *  scaleNonUniformAt\n *\n *  @param {Number} scaleX\n *  @param {Number} scaleY\n *  @param {Point2D} center\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.scaleNonUniformAt = function(scaleX, scaleY, center) {\n    var dx = center.x - scaleX * center.x;\n    var dy = center.y - scaleY * center.y;\n\n    return new this.constructor(\n        this.a * scaleX,\n        this.b * scaleX,\n        this.c * scaleY,\n        this.d * scaleY,\n        this.a * dx + this.c * dy + this.e,\n        this.b * dx + this.d * dy + this.f\n    );\n};\n\n/**\n *  rotate\n *\n *  @param {Number} radians\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.rotate = function(radians) {\n    var c = Math.cos(radians);\n    var s = Math.sin(radians);\n\n    return new this.constructor(\n        this.a *  c + this.c * s,\n        this.b *  c + this.d * s,\n        this.a * -s + this.c * c,\n        this.b * -s + this.d * c,\n        this.e,\n        this.f\n    );\n};\n\n/**\n *  rotateAt\n *\n *  @param {Number} radians\n *  @param {Point2D} center\n *  @result {Matrix2D}\n */\nMatrix2D.prototype.rotateAt = function(radians, center) {\n    var cos = Math.cos(radians);\n    var sin = Math.sin(radians);\n    var cx = center.x;\n    var cy = center.y;\n\n    var a = this.a * cos + this.c * sin;\n    var b = this.b * cos + this.d * sin;\n    var c = this.c * cos - this.a * sin;\n    var d = this.d * cos - this.b * sin;\n\n    return new this.constructor(\n        a,\n        b,\n        c,\n        d,\n        (this.a - a) * cx + (this.c - c) * cy + this.e,\n        (this.b - b) * cx + (this.d - d) * cy + this.f\n    );\n};\n\n/**\n *  rotateFromVector\n *\n *  @param {Vector2D}\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.rotateFromVector = function(vector) {\n    var unit = vector.unit();\n    var c = unit.x; // cos\n    var s = unit.y; // sin\n\n    return new this.constructor(\n        this.a *  c + this.c * s,\n        this.b *  c + this.d * s,\n        this.a * -s + this.c * c,\n        this.b * -s + this.d * c,\n        this.e,\n        this.f\n    );\n};\n\n/**\n *  flipX\n *\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.flipX = function() {\n    return new this.constructor(\n        -this.a,\n        -this.b,\n         this.c,\n         this.d,\n         this.e,\n         this.f\n    );\n};\n\n/**\n *  flipY\n *\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.flipY = function() {\n    return new this.constructor(\n         this.a,\n         this.b,\n        -this.c,\n        -this.d,\n         this.e,\n         this.f\n    );\n};\n\n/**\n *  skewX\n *\n *  @pararm {Number} radians\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.skewX = function(radians) {\n    var t = Math.tan(radians);\n\n    return new this.constructor(\n        this.a,\n        this.b,\n        this.c + this.a * t,\n        this.d + this.b * t,\n        this.e,\n        this.f\n    );\n};\n\n// TODO: skewXAt\n\n/**\n *  skewY\n *\n *  @pararm {Number} radians\n *  @returns {Matrix2D}\n */\nMatrix2D.prototype.skewY = function(radians) {\n    var t = Math.tan(radians);\n\n    return new this.constructor(\n        this.a + this.c * t,\n        this.b + this.d * t,\n        this.c,\n        this.d,\n        this.e,\n        this.f\n    );\n};\n\n// TODO: skewYAt\n\n/**\n *  isIdentity\n *\n *  @returns {Boolean}\n */\nMatrix2D.prototype.isIdentity = function() {\n    return (\n        this.a === 1.0 &&\n        this.b === 0.0 &&\n        this.c === 0.0 &&\n        this.d === 1.0 &&\n        this.e === 0.0 &&\n        this.f === 0.0\n    );\n};\n\n/**\n *  isInvertible\n *\n *  @returns {Boolean}\n */\nMatrix2D.prototype.isInvertible = function() {\n    return this.a * this.d - this.b * this.c !== 0.0;\n};\n\n/**\n *  getScale\n *\n *  @returns {{ scaleX: Number, scaleY: Number }}\n */\nMatrix2D.prototype.getScale = function() {\n    return {\n        scaleX: Math.sqrt(this.a * this.a + this.c * this.c),\n        scaleY: Math.sqrt(this.b * this.b + this.d * this.d)\n    };\n};\n\n/**\n *  getDecomposition\n *\n *  Calculates matrix Singular Value Decomposition\n *\n *  The resulting matrices, translation, rotation, scale, and rotation0, return\n *  this matrix when they are muliplied together in the listed order\n *\n *  @see Jim Blinn's article {@link http://dx.doi.org/10.1109/38.486688}\n *  @see {@link http://math.stackexchange.com/questions/861674/decompose-a-2d-arbitrary-transform-into-only-scaling-and-rotation}\n *\n *  @returns {{ translation: Matrix2D, rotation: Matrix2D, scale: Matrix2D, rotation0: Matrix2D }}\n */\nMatrix2D.prototype.getDecomposition = function () {\n    var E      = (this.a + this.d) * 0.5;\n    var F      = (this.a - this.d) * 0.5;\n    var G      = (this.b + this.c) * 0.5;\n    var H      = (this.b - this.c) * 0.5;\n\n    var Q      = Math.sqrt(E * E + H * H);\n    var R      = Math.sqrt(F * F + G * G);\n    var scaleX = Q + R;\n    var scaleY = Q - R;\n\n    var a1     = Math.atan2(G, F);\n    var a2     = Math.atan2(H, E);\n    var theta  = (a2 - a1) * 0.5;\n    var phi    = (a2 + a1) * 0.5;\n\n    // TODO: Add static methods to generate translation, rotation, etc.\n    // matrices directly\n\n    return {\n        translation: new this.constructor(1, 0, 0, 1, this.e, this.f),\n        rotation:    this.constructor.IDENTITY.rotate(phi),\n        scale:       new this.constructor(scaleX, 0, 0, scaleY, 0, 0),\n        rotation0:   this.constructor.IDENTITY.rotate(theta)\n    };\n};\n\n/**\n *  equals\n *\n *  @param {Matrix2D} that\n *  @returns {Boolean}\n */\nMatrix2D.prototype.equals = function(that) {\n    return (\n        this.a === that.a &&\n        this.b === that.b &&\n        this.c === that.c &&\n        this.d === that.d &&\n        this.e === that.e &&\n        this.f === that.f\n    );\n};\n\n/**\n *  precisionEquals\n *\n *  @param {Matrix2D} that\n *  @param {Number} precision\n *  @returns {Boolean}\n */\nMatrix2D.prototype.precisionEquals = function(that, precision) {\n    return (\n        Math.abs(this.a - that.a) < precision &&\n        Math.abs(this.b - that.b) < precision &&\n        Math.abs(this.c - that.c) < precision &&\n        Math.abs(this.d - that.d) < precision &&\n        Math.abs(this.e - that.e) < precision &&\n        Math.abs(this.f - that.f) < precision\n    );\n};\n\n/**\n *  toString\n *\n *  @returns {String}\n */\nMatrix2D.prototype.toString = function() {\n    return \"matrix(\" + [this.a, this.b, this.c, this.d, this.e, this.f].join(\",\") + \")\";\n};\n\nif (typeof module !== \"undefined\") {\n    module.exports = Matrix2D;\n}\n","// expose classes\n\nexports.Point2D = require('./lib/Point2D');\nexports.Vector2D = require('./lib/Vector2D');\nexports.Matrix2D = require('./lib/Matrix2D');\n","/**\n *\n *   Polynomial.js\n *\n *   copyright 2002, 2013 Kevin Lindsey\n * \n *   contribution {@link http://github.com/Quazistax/kld-polynomial}\n *       @copyright 2015 Robert Benko (Quazistax) <quazistax@gmail.com>\n *       @license MIT\n */\n\nPolynomial.TOLERANCE = 1e-6;\nPolynomial.ACCURACY  = 15;\n\n\n/**\n *  interpolate\n *\n *  Based on poloint in \"Numerical Recipes in C, 2nd Edition\", pages 109-110\n *\n *  @param {Array<Number>} xs\n *  @param {Array<Number>} ys\n *  @param {Number} n\n *  @param {Number} offset\n *  @param {Number} x\n *\n *  @returns {{y: Number, dy: Number}}\n */\nPolynomial.interpolate = function(xs, ys, n, offset, x) {\n    if ( xs.constructor !== Array || ys.constructor !== Array ) {\n        throw new Error(\"Polynomial.interpolate: xs and ys must be arrays\");\n    }\n    if ( isNaN(n) || isNaN(offset) || isNaN(x) ) {\n        throw new Error(\"Polynomial.interpolate: n, offset, and x must be numbers\");\n    }\n\n    var y  = 0;\n    var dy = 0;\n    var c = new Array(n);\n    var d = new Array(n);\n    var ns = 0;\n\n    var diff = Math.abs(x - xs[offset]);\n\n    for ( var i = 0; i < n; i++ ) {\n        var dift = Math.abs(x - xs[offset+i]);\n\n        if ( dift < diff ) {\n            ns = i;\n            diff = dift;\n        }\n        c[i] = d[i] = ys[offset+i];\n    }\n\n    y = ys[offset+ns];\n    ns--;\n\n    for ( var m = 1; m < n; m++ ) {\n        for ( var i = 0; i < n-m; i++ ) {\n            var ho = xs[offset+i] - x;\n            var hp = xs[offset+i+m] - x;\n            var w = c[i+1]-d[i];\n            var den = ho - hp;\n\n            if ( den == 0.0 ) {\n                throw new Error(\"Unable to interpolate polynomial. Two numbers in n were identical (to within roundoff)\");\n            }\n\n            den = w / den;\n            d[i] = hp*den;\n            c[i] = ho*den;\n        }\n\n        dy = (2*(ns+1) < (n-m)) ? c[ns+1] : d[ns--];\n        y += dy;\n    }\n\n    return { y: y, dy: dy };\n};\n\n\n/**\n *  Polynomial\n *\n *  @returns {Polynomial}\n */\nfunction Polynomial() {\n    this.init( arguments );\n}\n\n\n/**\n *  init\n */\nPolynomial.prototype.init = function(coefs) {\n    this.coefs = new Array();\n\n    for ( var i = coefs.length - 1; i >= 0; i-- )\n        this.coefs.push( coefs[i] );\n\n    this._variable = \"t\";\n    this._s = 0;\n};\n\n\n/**\n *  eval\n */\nPolynomial.prototype.eval = function(x) {\n    if ( isNaN(x) ) {\n        throw new Error(\"Polynomial.eval: parameter must be a number\");\n    }\n\n    var result = 0;\n\n    for ( var i = this.coefs.length - 1; i >= 0; i-- ) {\n        result = result * x + this.coefs[i];\n    }\n\n    return result;\n};\n\n\n/**\n *  add\n */\nPolynomial.prototype.add = function(that) {\n    var result = new Polynomial();\n    var d1 = this.getDegree();\n    var d2 = that.getDegree();\n    var dmax = Math.max(d1,d2);\n\n    for ( var i = 0; i <= dmax; i++ ) {\n        var v1 = (i <= d1) ? this.coefs[i] : 0;\n        var v2 = (i <= d2) ? that.coefs[i] : 0;\n\n        result.coefs[i] = v1 + v2;\n    }\n\n    return result;\n};\n\n\n/**\n *  multiply\n */\nPolynomial.prototype.multiply = function(that) {\n    var result = new Polynomial();\n\n    for ( var i = 0; i <= this.getDegree() + that.getDegree(); i++ ) {\n        result.coefs.push(0);\n    }\n\n    for ( var i = 0; i <= this.getDegree(); i++ ) {\n        for ( var j = 0; j <= that.getDegree(); j++ ) {\n            result.coefs[i+j] += this.coefs[i] * that.coefs[j];\n        }\n    }\n\n    return result;\n};\n\n\n/**\n *  divide_scalar\n */\nPolynomial.prototype.divide_scalar = function(scalar) {\n    for ( var i = 0; i < this.coefs.length; i++ ) {\n        this.coefs[i] /= scalar;\n    }\n};\n\n\n/**\n *  simplify\n */\nPolynomial.prototype.simplify = function(TOLERANCE) {\n    if (TOLERANCE === undefined) TOLERANCE = 1e-12;\n\n    for ( var i = this.getDegree(); i >= 0; i-- ) {\n        if ( Math.abs( this.coefs[i] ) <= TOLERANCE ) {\n            this.coefs.pop();\n        }\n        else {\n            break;\n        }\n    }\n};\n\n\n/**\n *  bisection\n */\nPolynomial.prototype.bisection = function(min, max) {\n    var minValue = this.eval(min);\n    var maxValue = this.eval(max);\n    var result;\n\n    if ( Math.abs(minValue) <= Polynomial.TOLERANCE ) {\n        result = min;\n    }\n    else if ( Math.abs(maxValue) <= Polynomial.TOLERANCE ) {\n        result = max;\n    }\n    else if ( minValue * maxValue <= 0 ) {\n        var tmp1  = Math.log(max - min);\n        var tmp2  = Math.LN10 * Polynomial.ACCURACY;\n        var iters = Math.ceil( (tmp1+tmp2) / Math.LN2 );\n\n        for ( var i = 0; i < iters; i++ ) {\n            result = 0.5 * (min + max);\n            var value = this.eval(result);\n\n            if ( Math.abs(value) <= Polynomial.TOLERANCE ) {\n                break;\n            }\n\n            if ( value * minValue < 0 ) {\n                max = result;\n                maxValue = value;\n            }\n            else {\n                min = result;\n                minValue = value;\n            }\n        }\n    }\n\n    return result;\n};\n\n\n/**\n *  toString\n */\nPolynomial.prototype.toString = function() {\n    var coefs = new Array();\n    var signs = new Array();\n\n    for ( var i = this.coefs.length - 1; i >= 0; i-- ) {\n        var value = Math.round(this.coefs[i]*1000)/1000;\n        //var value = this.coefs[i];\n\n        if ( value != 0 ) {\n            var sign = ( value < 0 ) ? \" - \" : \" + \";\n\n            value = Math.abs(value);\n\n            if ( i > 0 ) {\n                if ( value == 1 ) {\n                    value = this._variable;\n                }\n                else {\n                    value += this._variable;\n                }\n            }\n\n            if ( i > 1 ) {\n                value += \"^\" + i;\n            }\n\n            signs.push( sign );\n            coefs.push( value );\n        }\n    }\n\n    signs[0] = ( signs[0] == \" + \" ) ? \"\" : \"-\";\n\n    var result = \"\";\n\n    for ( var i = 0; i < coefs.length; i++ ) {\n        result += signs[i] + coefs[i];\n    }\n\n    return result;\n};\n\n\n/**\n *  trapezoid\n *\n *  Based on trapzd in \"Numerical Recipes in C, 2nd Edition\", page 137\n */\nPolynomial.prototype.trapezoid = function(min, max, n) {\n    if ( isNaN(min) || isNaN(max) || isNaN(n) ) {\n        throw new Error(\"Polynomial.trapezoid: parameters must be numbers\");\n    }\n\n    var range = max - min;\n    var TOLERANCE = 1e-7;\n\n    if ( n == 1 ) {\n        var minValue = this.eval(min);\n        var maxValue = this.eval(max);\n\n        this._s = 0.5*range*( minValue + maxValue );\n    }\n    else {\n        var it = 1 << (n-2);\n        var delta = range / it;\n        var x = min + 0.5*delta;\n        var sum = 0;\n\n        for ( var i = 0; i < it; i++ ) {\n            sum += this.eval(x);\n            x += delta;\n        }\n\n        this._s = 0.5*(this._s + range*sum/it);\n    }\n\n    if ( isNaN(this._s) ) {\n        throw new Error(\"Polynomial.trapezoid: this._s is NaN\");\n    }\n\n    return this._s;\n};\n\n\n/**\n *  simpson\n *\n *  Based on trapzd in \"Numerical Recipes in C, 2nd Edition\", page 139\n */\nPolynomial.prototype.simpson = function(min, max) {\n    if ( isNaN(min) || isNaN(max) ) {\n        throw new Error(\"Polynomial.simpson: parameters must be numbers\");\n    }\n\n    var range = max - min;\n    var st = 0.5 * range * ( this.eval(min) + this.eval(max) );\n    var t = st;\n    var s = 4.0*st/3.0;\n    var os = s;\n    var ost = st;\n    var TOLERANCE = 1e-7;\n\n    var it = 1;\n\n    for ( var n = 2; n <= 20; n++ ) {\n        var delta = range / it;\n        var x     = min + 0.5*delta;\n        var sum   = 0;\n\n        for ( var i = 1; i <= it; i++ ) {\n            sum += this.eval(x);\n            x += delta;\n        }\n\n        t = 0.5 * (t + range * sum / it);\n        st = t;\n        s = (4.0*st - ost)/3.0;\n\n        if ( Math.abs(s-os) < TOLERANCE*Math.abs(os) ) {\n            break;\n        }\n\n        os = s;\n        ost = st;\n        it <<= 1;\n    }\n\n    return s;\n};\n\n\n/**\n *  romberg\n */\nPolynomial.prototype.romberg = function(min, max) {\n    if ( isNaN(min) || isNaN(max) ) {\n        throw new Error(\"Polynomial.romberg: parameters must be numbers\");\n    }\n\n    var MAX = 20;\n    var K = 3;\n    var TOLERANCE = 1e-6;\n    var s = new Array(MAX+1);\n    var h = new Array(MAX+1);\n    var result = { y: 0, dy: 0 };\n\n    h[0] = 1.0;\n\n    for ( var j = 1; j <= MAX; j++ ) {\n        s[j-1] = this.trapezoid(min, max, j);\n\n        if ( j >= K ) {\n            result = Polynomial.interpolate(h, s, K, j-K, 0.0);\n            if ( Math.abs(result.dy) <= TOLERANCE*result.y) break;\n        }\n\n        s[j] = s[j-1];\n        h[j] = 0.25 * h[j-1];\n    }\n\n    return result.y;\n};\n\n// getters and setters\n\n/**\n *  get degree\n */\nPolynomial.prototype.getDegree = function() {\n    return this.coefs.length - 1;\n};\n\n\n/**\n *  getDerivative\n */\nPolynomial.prototype.getDerivative = function() {\n    var derivative = new Polynomial();\n\n    for ( var i = 1; i < this.coefs.length; i++ ) {\n        derivative.coefs.push(i*this.coefs[i]);\n    }\n\n    return derivative;\n};\n\n\n/**\n *  getRoots\n */\nPolynomial.prototype.getRoots = function() {\n    var result;\n\n    this.simplify();\n\n    switch ( this.getDegree() ) {\n        case 0: result = [];                       break;\n        case 1: result = this.getLinearRoot();     break;\n        case 2: result = this.getQuadraticRoots(); break;\n        case 3: result = this.getCubicRoots();     break;\n        case 4: result = this.getQuarticRoots();   break;\n        default:\n            result = [];\n    }\n\n    return result;\n};\n\n\n/**\n *  getRootsInInterval\n */\nPolynomial.prototype.getRootsInInterval = function(min, max) {\n    var roots = new Array();\n    var root;\n\n    if ( this.getDegree() == 1 ) {\n        root = this.bisection(min, max);\n\n        if ( root != null ) {\n            roots.push(root);\n        }\n    }\n    else {\n        // get roots of derivative\n        var deriv  = this.getDerivative();\n        var droots = deriv.getRootsInInterval(min, max);\n\n        if ( droots.length > 0 ) {\n            // find root on [min, droots[0]]\n            root = this.bisection(min, droots[0]);\n\n            if ( root != null ) {\n                roots.push(root);\n            }\n\n            // find root on [droots[i],droots[i+1]] for 0 <= i <= count-2\n            for ( i = 0; i <= droots.length-2; i++ ) {\n                root = this.bisection(droots[i], droots[i+1]);\n\n                if ( root != null ) {\n                    roots.push(root);\n                }\n            }\n\n            // find root on [droots[count-1],xmax]\n            root = this.bisection(droots[droots.length-1], max);\n\n            if ( root != null ) {\n                roots.push(root);\n            }\n        }\n        else {\n            // polynomial is monotone on [min,max], has at most one root\n            root = this.bisection(min, max);\n\n            if ( root != null ) {\n                roots.push(root);\n            }\n        }\n    }\n\n    return roots;\n};\n\n\n/**\n *  getLinearRoot\n */\nPolynomial.prototype.getLinearRoot = function() {\n    var result = [];\n    var a = this.coefs[1];\n\n    if ( a != 0 ) {\n        result.push( -this.coefs[0] / a );\n    }\n\n    return result;\n};\n\n\n/**\n *  getQuadraticRoots\n */\nPolynomial.prototype.getQuadraticRoots = function() {\n    var results = [];\n\n    if ( this.getDegree() == 2 ) {\n        var a = this.coefs[2];\n        var b = this.coefs[1] / a;\n        var c = this.coefs[0] / a;\n        var d = b*b - 4*c;\n\n        if ( d > 0 ) {\n            var e = Math.sqrt(d);\n\n            results.push( 0.5 * (-b + e) );\n            results.push( 0.5 * (-b - e) );\n        }\n        else if ( d == 0 ) {\n            // really two roots with same value, but we only return one\n            results.push( 0.5 * -b );\n        }\n    }\n\n    return results;\n};\n\n\n/**\n *  getCubicRoots\n *\n *  This code is based on MgcPolynomial.cpp written by David Eberly.  His\n *  code along with many other excellent examples are avaiable at his site:\n *  http://www.geometrictools.com\n */\nPolynomial.prototype.getCubicRoots = function() {\n    var results = [];\n\n    if ( this.getDegree() == 3 ) {\n        var c3 = this.coefs[3];\n        var c2 = this.coefs[2] / c3;\n        var c1 = this.coefs[1] / c3;\n        var c0 = this.coefs[0] / c3;\n\n        var a       = (3*c1 - c2*c2) / 3;\n        var b       = (2*c2*c2*c2 - 9*c1*c2 + 27*c0) / 27;\n        var offset  = c2 / 3;\n        var discrim = b*b/4 + a*a*a/27;\n        var halfB   = b / 2;\n\n        var ZEROepsilon = this.zeroErrorEstimate();\n        if (Math.abs(discrim) <= ZEROepsilon) {\n            discrim = 0;\n        }\n\n        if ( discrim > 0 ) {\n            var e = Math.sqrt(discrim);\n            var tmp;\n            var root;\n\n            tmp = -halfB + e;\n\n            if ( tmp >= 0 ) {\n                root = Math.pow(tmp, 1/3);\n            }\n            else {\n                root = -Math.pow(-tmp, 1/3);\n            }\n\n            tmp = -halfB - e;\n\n            if ( tmp >= 0 ) {\n                root += Math.pow(tmp, 1/3);\n            }\n            else {\n                root -= Math.pow(-tmp, 1/3);\n            }\n\n            results.push( root - offset );\n        }\n        else if ( discrim < 0 ) {\n            var distance = Math.sqrt(-a/3);\n            var angle    = Math.atan2( Math.sqrt(-discrim), -halfB) / 3;\n            var cos      = Math.cos(angle);\n            var sin      = Math.sin(angle);\n            var sqrt3    = Math.sqrt(3);\n\n            results.push( 2*distance*cos - offset );\n            results.push( -distance * (cos + sqrt3 * sin) - offset);\n            results.push( -distance * (cos - sqrt3 * sin) - offset);\n        }\n        else {\n            var tmp;\n\n            if ( halfB >= 0 ) {\n                tmp = -Math.pow(halfB, 1/3);\n            }\n            else {\n                tmp = Math.pow(-halfB, 1/3);\n            }\n\n            results.push( 2*tmp - offset );\n            // really should return next root twice, but we return only one\n            results.push( -tmp - offset );\n        }\n    }\n\n    return results;\n};\n\n\n/**\n *  Sign of a number (+1, -1, +0, -0).\n */\nvar sign = function (x) {\n    return typeof x === 'number' ? x ? x < 0 ? -1 : 1 : x === x ? x : NaN : NaN;\n};\n\n\n/**\n *  Calculates roots of quartic polynomial. <br/>\n *  First, derivative roots are found, then used to split quartic polynomial \n *  into segments, each containing one root of quartic polynomial.\n *  Segments are then passed to newton's method to find roots.\n *\n *  @returns {Array<Number>} roots\n */\nPolynomial.prototype.getQuarticRoots = function () {\n    var results = [];\n\n    var n = this.getDegree();\n\n    if (n == 4) {\n        var poly = new Polynomial();\n\n        poly.coefs = this.coefs.slice();\n        poly.divide_scalar(poly.coefs[n]);\n\n        var ERRF = 1e-15;\n\n        if (Math.abs(poly.coefs[0]) < 10 * ERRF * Math.abs(poly.coefs[3])) {\n            poly.coefs[0] = 0;\n        }\n\n        var poly_d = poly.getDerivative();\n        var derrt = poly_d.getRoots().sort(function (a, b) { return a - b; });\n        var dery = [];\n        var nr = derrt.length - 1;\n        var i;\n        var rb = this.bounds();\n\n        maxabsX = Math.max(Math.abs(rb.minX), Math.abs(rb.maxX));\n\n        var ZEROepsilon = this.zeroErrorEstimate(maxabsX);\n        \n        for (i = 0; i <= nr; i++) {\n            dery.push(poly.eval(derrt[i]));\n        }\n\n        for (i = 0; i <= nr; i++) {\n            if (Math.abs(dery[i]) < ZEROepsilon) {\n                dery[i] = 0;\n            }\n        }\n\n        i = 0;\n        var dx = Math.max(0.1 * (rb.maxX - rb.minX) / n, ERRF);\n        var guesses = [];\n        var minmax = [];\n\n        if (nr > -1) {\n            if (dery[0] != 0) {\n                if (sign(dery[0]) != sign(poly.eval(derrt[0] - dx) - dery[0])) {\n                    guesses.push(derrt[0] - dx);\n                    minmax.push([rb.minX, derrt[0]]);\n                }\n            }\n            else {\n                results.push(derrt[0], derrt[0]);\n                i++;\n            }\n\n            for (; i < nr; i++) {\n                if (dery[i + 1] == 0) {\n                    results.push(derrt[i + 1], derrt[i + 1]);\n                    i++;\n                }\n                else if (sign(dery[i]) != sign(dery[i + 1])) {\n                    guesses.push((derrt[i] + derrt[i + 1]) / 2);\n                    minmax.push([derrt[i], derrt[i + 1]]);\n                }\n            }\n            if (dery[nr] != 0 && sign(dery[nr]) != sign(poly.eval(derrt[nr] + dx) - dery[nr])) {\n                guesses.push(derrt[nr] + dx);\n                minmax.push([derrt[nr], rb.maxX]);\n            }\n        }\n\n        var f = function (x) { return poly.eval(x); };\n        var df = function (x) { return poly_d.eval(x); };\n\n        if (guesses.length > 0) {\n            for (i = 0; i < guesses.length; i++) {\n                guesses[i] = Polynomial.newton_secant_bisection(guesses[i], f, df, 32, minmax[i][0], minmax[i][1]);\n            }\n        }\n\n        results = results.concat(guesses);\n    }\n\n    return results;\n};\n\n\n/**\n *  Estimate what is the maximum polynomial evaluation error value under which polynomial evaluation could be in fact 0.\n *  \n *  @returns {Number} \n */\nPolynomial.prototype.zeroErrorEstimate = function (maxabsX) {\n    var poly = this;\n    var ERRF = 1e-15;\n\n    if (typeof maxabsX === 'undefined') {\n        var rb = poly.bounds();\n        maxabsX = Math.max(Math.abs(rb.minX), Math.abs(rb.maxX));\n    }\n\n    if (maxabsX < 0.001) {\n        return 2*Math.abs(poly.eval(ERRF));\n    }\n\n    var n = poly.coefs.length - 1;\n    var an = poly.coefs[n];\n\n    return 10 * ERRF * poly.coefs.reduce(function (m, v, i) {\n        var nm = v / an * Math.pow(maxabsX, i);\n        return nm > m ? nm : m;\n    }, 0);\n}\n\n\n/**\n *  Calculates upper Real roots bounds. <br/>\n *  Real roots are in interval [negX, posX]. Determined by Fujiwara method.\n *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n *\n *  @returns {{ negX: Number, posX: Number }}\n */\nPolynomial.prototype.bounds_UpperReal_Fujiwara = function () {\n    var a = this.coefs;\n    var n = a.length - 1;\n    var an = a[n];\n\n    if (an != 1) {\n        a = this.coefs.map(function (v) {\n            return v / an;\n        });\n    }\n\n    var b = a.map(function (v, i) {\n        return (i < n)\n            ? Math.pow(Math.abs((i == 0) ? v / 2 : v), 1 / (n - i))\n            : v;\n    });\n\n    var coefSelectionFunc;\n    var find2Max = function (acc, bi, i) {\n        if (coefSelectionFunc(i)) {\n            if (acc.max < bi) {\n                acc.nearmax = acc.max;\n                acc.max = bi;\n            }\n            else if (acc.nearmax < bi) {\n                acc.nearmax = bi;\n            }\n        }\n        return acc;\n    };\n\n    coefSelectionFunc = function (i) { return i < n && a[i] < 0; };\n    var max_nearmax_pos = b.reduce(find2Max, { max: 0, nearmax: 0 });\n\n    coefSelectionFunc = function (i) { return i < n && ((n % 2 == i % 2) ? a[i] < 0 : a[i] > 0); };\n    var max_nearmax_neg = b.reduce(find2Max, { max: 0, nearmax: 0 });\n\n    return {\n        negX: -2 * max_nearmax_neg.max,\n        posX: 2 * max_nearmax_pos.max\n    };\n};\n\n\n/** \n *  Calculates lower Real roots bounds. <br/>\n *  There are no Real roots in interval <negX, posX>. Determined by Fujiwara method.\n *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n *\n *  @returns {{ negX: Number, posX: Number }}\n */\nPolynomial.prototype.bounds_LowerReal_Fujiwara = function () {\n    var poly = new Polynomial();\n\n    poly.coefs = this.coefs.slice().reverse();\n\n    var res = poly.bounds_UpperReal_Fujiwara();\n\n    res.negX = 1 / res.negX;\n    res.posX = 1 / res.posX;\n\n    return res;\n};\n\n\n/** \n *  Calculates left and right Real roots bounds. <br/>\n *  Real roots are in interval [minX, maxX]. Combines Fujiwara lower and upper bounds to get minimal interval.\n *  @see {@link http://en.wikipedia.org/wiki/Properties_of_polynomial_roots}\n *\n *  @returns {{ minX: Number, maxX: Number }}\n*/\nPolynomial.prototype.bounds = function () {\n    var urb = this.bounds_UpperReal_Fujiwara();\n    var rb = { minX: urb.negX, maxX: urb.posX };\n\n    if (urb.negX === 0 && urb.posX === 0) {\n        return rb;\n    }\n\n    if (urb.negX === 0) {\n        rb.minX = this.bounds_LowerReal_Fujiwara().posX;\n    }\n    else if (urb.posX === 0) {\n        rb.maxX = this.bounds_LowerReal_Fujiwara().negX;\n    }\n\n    if (rb.minX > rb.maxX) {\n        //console.log('Polynomial.prototype.bounds: poly has no real roots? or floating point error?');\n        rb.minX = rb.maxX = 0;\n    }\n\n    return rb;\n    // TODO: if sure that there are no complex roots \n    // (maybe by using Sturm's theorem) use:\n    // return this.bounds_Real_Laguerre();\n};\n\n\n/**\n *  Newton's (Newton-Raphson) method for finding Real roots on univariate function. <br/>\n *  When using bounds, algorithm falls back to secant if newton goes out of range.\n *  Bisection is fallback for secant when determined secant is not efficient enough.\n *  @see {@link http://en.wikipedia.org/wiki/Newton%27s_method}\n *  @see {@link http://en.wikipedia.org/wiki/Secant_method}\n *  @see {@link http://en.wikipedia.org/wiki/Bisection_method}\n *\n *  @param {Number} x0 - Inital root guess\n *  @param {function(x)} f - Function which root we are trying to find\n *  @param {function(x)} df - Derivative of function f\n *  @param {Number} max_iterations - Maximum number of algorithm iterations\n *  @param {Number} [min_x] - Left bound value\n *  @param {Number} [max_x] - Right bound value\n *  @returns {Number} - root\n */\nPolynomial.newton_secant_bisection = function (x0, f, df, max_iterations, min, max) {\n    var x, prev_dfx = 0, dfx, prev_x_ef_correction = 0, x_correction, x_new;\n    var v, y_atmin, y_atmax;\n\n    x = x0;\n\n    var ACCURACY = 14;\n    var min_correction_factor = Math.pow(10, -ACCURACY);\n    var isBounded = (typeof min === 'number' && typeof max === 'number');\n\n    if (isBounded) {\n        if (min > max) {\n            throw new Error(\"newton root finding: min must be greater than max\");\n        }\n\n        y_atmin = f(min);\n        y_atmax = f(max);\n\n        if (sign(y_atmin) ==  sign(y_atmax)) {\n            throw new Error(\"newton root finding: y values of bounds must be of opposite sign\");\n        }\n    }\n\n    var isEnoughCorrection = function () {\n        // stop if correction is too small or if correction is in simple loop\n        return (Math.abs(x_correction) <= min_correction_factor * Math.abs(x))\n            || (prev_x_ef_correction == (x - x_correction) - x);\n    };\n\n    var i;\n\n    for (i = 0; i < max_iterations; i++) {\n        dfx = df(x);\n\n        if (dfx == 0) {\n            if (prev_dfx == 0) {\n                // error\n                throw new Error(\"newton root finding: df(x) is zero\");\n            }\n            else {\n                // use previous derivation value\n                dfx = prev_dfx;\n            }\n            // or move x a little?\n            //dfx = df(x != 0 ? x + x * 1e-15 : 1e-15);\n        }\n\n        prev_dfx = dfx;\n        y = f(x);\n        x_correction = y / dfx;\n        x_new = x - x_correction;\n\n        if (isEnoughCorrection()) {\n            break;\n        }\n\n        if (isBounded) {\n            if (sign(y) == sign(y_atmax)) {\n                max = x;\n                y_atmax = y;\n            }\n            else if (sign(y) == sign(y_atmin)) {\n                min = x;\n                y_atmin = y;\n            }\n            else {\n                x = x_new;\n                break;\n            }\n\n            if ((x_new < min) || (x_new > max)) {\n                if (sign(y_atmin) == sign(y_atmax)) {\n                    break;\n                }\n\n                var RATIO_LIMIT = 50;\n                var AIMED_BISECT_OFFSET = 0.25; // [0, 0.5)\n                var dy = y_atmax - y_atmin;\n                var dx = max - min;\n\n                if (dy == 0) {\n                    x_correction = x - (min + dx * 0.5);\n                }\n                else if (Math.abs(dy / Math.min(y_atmin, y_atmax)) > RATIO_LIMIT) {\n                    x_correction = x - (min + dx * (0.5 + (Math.abs(y_atmin) < Math.abs(y_atmax) ? -AIMED_BISECT_OFFSET : AIMED_BISECT_OFFSET)));\n                }\n                else {\n                    x_correction = x - (min - y_atmin / dy * dx);\n                }\n                x_new = x - x_correction;\n\n                if (isEnoughCorrection()) {\n                    break;\n                }\n            }\n        }\n\n        prev_x_ef_correction = x - x_new;\n        x = x_new;\n    }\n\n    return x;\n};\n\nif (typeof module !== \"undefined\") {\n    module.exports = Polynomial;\n}\n","/**\n *\n *   SqrtPolynomial.js\n *\n *   copyright 2003, 2013 Kevin Lindsey\n *\n */\n\nif (typeof module !== \"undefined\") {\n    var Polynomial = require(\"./Polynomial\");\n}\n\n/**\n *   class variables\n */\nSqrtPolynomial.VERSION = 1.0;\n\n// setup inheritance\nSqrtPolynomial.prototype             = new Polynomial();\nSqrtPolynomial.prototype.constructor = SqrtPolynomial;\nSqrtPolynomial.superclass            = Polynomial.prototype;\n\n\n/**\n *  SqrtPolynomial\n */\nfunction SqrtPolynomial() {\n    this.init( arguments );\n}\n\n\n/**\n *  eval\n *\n *  @param {Number} x\n *  @returns {Number}\n */\nSqrtPolynomial.prototype.eval = function(x) {\n    var TOLERANCE = 1e-7;\n    var result = SqrtPolynomial.superclass.eval.call(this, x);\n\n    // NOTE: May need to change the following.  I added these to capture\n    // some really small negative values that were being generated by one\n    // of my Bezier arcLength functions\n    if ( Math.abs(result) < TOLERANCE ) result = 0;\n    if ( result < 0 )\n        throw new Error(\"SqrtPolynomial.eval: cannot take square root of negative number\");\n\n    return Math.sqrt(result);\n};\n\nSqrtPolynomial.prototype.toString = function() {\n    var result = SqrtPolynomial.superclass.toString.call(this);\n\n    return \"sqrt(\" + result + \")\";\n};\n\nif (typeof module !== \"undefined\") {\n    module.exports = SqrtPolynomial;\n}\n","// expose classes\n\nexports.Polynomial = require('./lib/Polynomial');\nexports.SqrtPolynomial = require('./lib/SqrtPolynomial');\n","/* eslint-disable camelcase, eqeqeq, no-labels, space-infix-ops */\n/**\n *\n *  Intersection.js\n *\n *  copyright 2002, 2013 Kevin Lindsey\n *\n */\n\nimport {Point2D, Vector2D} from \"kld-affine\";\nimport {Polynomial} from \"kld-polynomial\";\n\n/**\n *\n * @param {*} o\n * @returns {boolean}\n */\nfunction isNullish(o) {\n    return o === null || o === undefined;\n}\n\n/**\n *  closePolygon\n *\n *  @param {Array<Point2D>} points\n *  @returns {Array<Point2D>}\n */\nfunction closePolygon(points) {\n    const copy = points.slice();\n\n    copy.push(points[0]);\n\n    return copy;\n}\n\n\n/**\n *  Intersection\n *  @class\n *  @param {string} status\n */\nfunction Intersection(status) {\n    this.init(status);\n}\n\n\n/**\n *  init\n *\n *  @param {string} status\n *  @returns {Intersection}\n */\nIntersection.prototype.init = function(status) {\n    this.status = status;\n    this.points = [];\n};\n\n\n/**\n *  appendPoint\n *\n *  @param {Point2D} point\n */\nIntersection.prototype.appendPoint = function(point) {\n    this.points.push(point);\n};\n\n\n/**\n *  appendPoints\n *\n *  @param {Array<Point2D>} points\n */\nIntersection.prototype.appendPoints = function(points) {\n    this.points = this.points.concat(points);\n};\n\n\n// static methods\n\n/**\n *  intersect\n *\n *  @param {IntersectionArgs} shape1\n *  @param {IntersectionArgs} shape2\n *  @returns {Intersection}\n */\nIntersection.intersect = function(shape1, shape2) {\n    let result;\n\n    if (!isNullish(shape1) && !isNullish(shape2)) {\n        if (shape1.name === \"Path\") {\n            result = Intersection.intersectPathShape(shape1, shape2);\n        }\n        else if (shape2.name === \"Path\") {\n            result = Intersection.intersectPathShape(shape2, shape1);\n        }\n        else {\n            let method;\n            let args;\n\n            if (shape1.name < shape2.name) {\n                method = \"intersect\" + shape1.name + shape2.name;\n                args = shape1.args.concat(shape2.args);\n            }\n            else {\n                method = \"intersect\" + shape2.name + shape1.name;\n                args = shape2.args.concat(shape1.args);\n            }\n\n            if (!(method in Intersection)) {\n                throw new Error(\"Intersection not available: \" + method);\n            }\n\n            result = Intersection[method].apply(null, args);\n        }\n    }\n    else {\n        result = new Intersection(\"No Intersection\");\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectPathShape\n *\n *  @param {IntersectionArgs} path\n *  @param {IntersectionArgs} shape\n *  @returns {Intersection}\n */\nIntersection.intersectPathShape = function(path, shape) {\n    const result = new Intersection(\"No Intersection\");\n\n    for (const segment of path.args) {\n        const inter = Intersection.intersect(segment, shape);\n\n        result.appendPoints(inter.points);\n    }\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectBezier2Bezier2\n *\n *  @param {Point2D} a1\n *  @param {Point2D} a2\n *  @param {Point2D} a3\n *  @param {Point2D} b1\n *  @param {Point2D} b2\n *  @param {Point2D} b3\n *  @returns {Intersection}\n */\nIntersection.intersectBezier2Bezier2 = function(a1, a2, a3, b1, b2, b3) {\n    let a, b;\n    const result = new Intersection(\"No Intersection\");\n\n    a = a2.multiply(-2);\n    const c12 = a1.add(a.add(a3));\n\n    a = a1.multiply(-2);\n    b = a2.multiply(2);\n    const c11 = a.add(b);\n\n    const c10 = new Point2D(a1.x, a1.y);\n\n    a = b2.multiply(-2);\n    const c22 = b1.add(a.add(b3));\n\n    a = b1.multiply(-2);\n    b = b2.multiply(2);\n    const c21 = a.add(b);\n\n    const c20 = new Point2D(b1.x, b1.y);\n\n    // bezout\n    a = c12.x*c11.y - c11.x*c12.y;\n    b = c22.x*c11.y - c11.x*c22.y;\n    const c = c21.x*c11.y - c11.x*c21.y;\n    const d = c11.x*(c10.y - c20.y) + c11.y*(-c10.x + c20.x);\n    const e = c22.x*c12.y - c12.x*c22.y;\n    const f = c21.x*c12.y - c12.x*c21.y;\n    const g = c12.x*(c10.y - c20.y) + c12.y*(-c10.x + c20.x);\n\n    // determinant\n    const poly = new Polynomial(\n        -e*e,\n        -2*e*f,\n        a*b - f*f - 2*e*g,\n        a*c - 2*f*g,\n        a*d - g*g\n    );\n\n    const roots = poly.getRoots();\n\n    for (const s of roots) {\n        if (0 <= s && s <= 1) {\n            const xp = new Polynomial(\n                c12.x,\n                c11.x,\n                c10.x - c20.x - s*c21.x - s*s*c22.x\n            );\n            xp.simplify();\n            const xRoots = xp.getRoots();\n            const yp = new Polynomial(\n                c12.y,\n                c11.y,\n                c10.y - c20.y - s*c21.y - s*s*c22.y\n            );\n            yp.simplify();\n            const yRoots = yp.getRoots();\n\n            if (xRoots.length > 0 && yRoots.length > 0) {\n                const TOLERANCE = 1e-4;\n\n                checkRoots:\n                for (const xRoot of xRoots) {\n                    if (0 <= xRoot && xRoot <= 1) {\n                        for (let k = 0; k < yRoots.length; k++) {\n                            if (Math.abs(xRoot - yRoots[k]) < TOLERANCE) {\n                                result.points.push(c22.multiply(s*s).add(c21.multiply(s).add(c20)));\n                                break checkRoots;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectBezier2Bezier3\n *\n *  @param {Point2D} a1\n *  @param {Point2D} a2\n *  @param {Point2D} a3\n *  @param {Point2D} b1\n *  @param {Point2D} b2\n *  @param {Point2D} b3\n *  @param {Point2D} b4\n *  @returns {Intersection}\n */\nIntersection.intersectBezier2Bezier3 = function(a1, a2, a3, b1, b2, b3, b4) {\n    let a, b, c, d;\n    const result = new Intersection(\"No Intersection\");\n\n    a = a2.multiply(-2);\n    const c12 = a1.add(a.add(a3));\n\n    a = a1.multiply(-2);\n    b = a2.multiply(2);\n    const c11 = a.add(b);\n\n    const c10 = new Point2D(a1.x, a1.y);\n\n    a = b1.multiply(-1);\n    b = b2.multiply(3);\n    c = b3.multiply(-3);\n    d = a.add(b.add(c.add(b4)));\n    const c23 = new Vector2D(d.x, d.y);\n\n    a = b1.multiply(3);\n    b = b2.multiply(-6);\n    c = b3.multiply(3);\n    d = a.add(b.add(c));\n    const c22 = new Vector2D(d.x, d.y);\n\n    a = b1.multiply(-3);\n    b = b2.multiply(3);\n    c = a.add(b);\n    const c21 = new Vector2D(c.x, c.y);\n\n    const c20 = new Vector2D(b1.x, b1.y);\n\n    const c10x2 = c10.x*c10.x;\n    const c10y2 = c10.y*c10.y;\n    const c11x2 = c11.x*c11.x;\n    const c11y2 = c11.y*c11.y;\n    const c12x2 = c12.x*c12.x;\n    const c12y2 = c12.y*c12.y;\n    const c20x2 = c20.x*c20.x;\n    const c20y2 = c20.y*c20.y;\n    const c21x2 = c21.x*c21.x;\n    const c21y2 = c21.y*c21.y;\n    const c22x2 = c22.x*c22.x;\n    const c22y2 = c22.y*c22.y;\n    const c23x2 = c23.x*c23.x;\n    const c23y2 = c23.y*c23.y;\n\n    const poly = new Polynomial(\n        -2*c12.x*c12.y*c23.x*c23.y + c12x2*c23y2 + c12y2*c23x2,\n        -2*c12.x*c12.y*c22.x*c23.y - 2*c12.x*c12.y*c22.y*c23.x + 2*c12y2*c22.x*c23.x +\n            2*c12x2*c22.y*c23.y,\n        -2*c12.x*c21.x*c12.y*c23.y - 2*c12.x*c12.y*c21.y*c23.x - 2*c12.x*c12.y*c22.x*c22.y +\n            2*c21.x*c12y2*c23.x + c12y2*c22x2 + c12x2*(2*c21.y*c23.y + c22y2),\n        2*c10.x*c12.x*c12.y*c23.y + 2*c10.y*c12.x*c12.y*c23.x + c11.x*c11.y*c12.x*c23.y +\n            c11.x*c11.y*c12.y*c23.x - 2*c20.x*c12.x*c12.y*c23.y - 2*c12.x*c20.y*c12.y*c23.x -\n            2*c12.x*c21.x*c12.y*c22.y - 2*c12.x*c12.y*c21.y*c22.x - 2*c10.x*c12y2*c23.x -\n            2*c10.y*c12x2*c23.y + 2*c20.x*c12y2*c23.x + 2*c21.x*c12y2*c22.x -\n            c11y2*c12.x*c23.x - c11x2*c12.y*c23.y + c12x2*(2*c20.y*c23.y + 2*c21.y*c22.y),\n        2*c10.x*c12.x*c12.y*c22.y + 2*c10.y*c12.x*c12.y*c22.x + c11.x*c11.y*c12.x*c22.y +\n            c11.x*c11.y*c12.y*c22.x - 2*c20.x*c12.x*c12.y*c22.y - 2*c12.x*c20.y*c12.y*c22.x -\n            2*c12.x*c21.x*c12.y*c21.y - 2*c10.x*c12y2*c22.x - 2*c10.y*c12x2*c22.y +\n            2*c20.x*c12y2*c22.x - c11y2*c12.x*c22.x - c11x2*c12.y*c22.y + c21x2*c12y2 +\n            c12x2*(2*c20.y*c22.y + c21y2),\n        2*c10.x*c12.x*c12.y*c21.y + 2*c10.y*c12.x*c21.x*c12.y + c11.x*c11.y*c12.x*c21.y +\n            c11.x*c11.y*c21.x*c12.y - 2*c20.x*c12.x*c12.y*c21.y - 2*c12.x*c20.y*c21.x*c12.y -\n            2*c10.x*c21.x*c12y2 - 2*c10.y*c12x2*c21.y + 2*c20.x*c21.x*c12y2 -\n            c11y2*c12.x*c21.x - c11x2*c12.y*c21.y + 2*c12x2*c20.y*c21.y,\n        -2*c10.x*c10.y*c12.x*c12.y - c10.x*c11.x*c11.y*c12.y - c10.y*c11.x*c11.y*c12.x +\n            2*c10.x*c12.x*c20.y*c12.y + 2*c10.y*c20.x*c12.x*c12.y + c11.x*c20.x*c11.y*c12.y +\n            c11.x*c11.y*c12.x*c20.y - 2*c20.x*c12.x*c20.y*c12.y - 2*c10.x*c20.x*c12y2 +\n            c10.x*c11y2*c12.x + c10.y*c11x2*c12.y - 2*c10.y*c12x2*c20.y -\n            c20.x*c11y2*c12.x - c11x2*c20.y*c12.y + c10x2*c12y2 + c10y2*c12x2 +\n            c20x2*c12y2 + c12x2*c20y2\n    );\n    const roots = poly.getRootsInInterval(0, 1);\n\n    for (const s of roots) {\n        const xRoots = new Polynomial(\n            c12.x,\n            c11.x,\n            c10.x - c20.x - s*c21.x - s*s*c22.x - s*s*s*c23.x\n        ).getRoots();\n        const yRoots = new Polynomial(\n            c12.y,\n            c11.y,\n            c10.y - c20.y - s*c21.y - s*s*c22.y - s*s*s*c23.y\n        ).getRoots();\n\n        if (xRoots.length > 0 && yRoots.length > 0) {\n            const TOLERANCE = 1e-4;\n\n            checkRoots:\n            for (const xRoot of xRoots) {\n                if (0 <= xRoot && xRoot <= 1) {\n                    for (let k = 0; k < yRoots.length; k++) {\n                        if (Math.abs(xRoot - yRoots[k]) < TOLERANCE) {\n                            result.points.push(\n                                c23.multiply(s*s*s).add(c22.multiply(s*s).add(c21.multiply(s).add(c20)))\n                            );\n                            break checkRoots;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectBezier2Circle\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @param {Point2D} p3\n *  @param {Point2D} c\n *  @param {number} r\n *  @returns {Intersection}\n */\nIntersection.intersectBezier2Circle = function(p1, p2, p3, c, r) {\n    return Intersection.intersectBezier2Ellipse(p1, p2, p3, c, r, r);\n};\n\n\n/**\n *  intersectBezier2Ellipse\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @param {Point2D} p3\n *  @param {Point2D} ec\n *  @param {number} rx\n *  @param {number} ry\n *  @returns {Intersection}\n */\nIntersection.intersectBezier2Ellipse = function(p1, p2, p3, ec, rx, ry) {\n    let a; // temporary variables\n    // c2, c1, c0; // coefficients of quadratic\n    const result = new Intersection(\"No Intersection\");\n\n    a = p2.multiply(-2);\n    const c2 = p1.add(a.add(p3));\n\n    a = p1.multiply(-2);\n    const b = p2.multiply(2);\n    const c1 = a.add(b);\n\n    const c0 = new Point2D(p1.x, p1.y);\n\n    const rxrx = rx*rx;\n    const ryry = ry*ry;\n    const roots = new Polynomial(\n        ryry*c2.x*c2.x + rxrx*c2.y*c2.y,\n        2*(ryry*c2.x*c1.x + rxrx*c2.y*c1.y),\n        ryry*(2*c2.x*c0.x + c1.x*c1.x) + rxrx*(2*c2.y*c0.y+c1.y*c1.y) -\n            2*(ryry*ec.x*c2.x + rxrx*ec.y*c2.y),\n        2*(ryry*c1.x*(c0.x-ec.x) + rxrx*c1.y*(c0.y-ec.y)),\n        ryry*(c0.x*c0.x+ec.x*ec.x) + rxrx*(c0.y*c0.y + ec.y*ec.y) -\n            2*(ryry*ec.x*c0.x + rxrx*ec.y*c0.y) - rxrx*ryry\n    ).getRoots();\n\n    for (const t of roots) {\n        if (0 <= t && t <= 1) {\n            result.points.push(c2.multiply(t*t).add(c1.multiply(t).add(c0)));\n        }\n    }\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectBezier2Line\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @param {Point2D} p3\n *  @param {Point2D} a1\n *  @param {Point2D} a2\n *  @returns {Intersection}\n */\nIntersection.intersectBezier2Line = function(p1, p2, p3, a1, a2) {\n    let a; // temporary variables\n    // let c2, c1, c0; // coefficients of quadratic\n    // cl; // c coefficient for normal form of line\n    // n; // normal for normal form of line\n    const min = a1.min(a2); // used to determine if point is on line segment\n    const max = a1.max(a2); // used to determine if point is on line segment\n    const result = new Intersection(\"No Intersection\");\n\n    a = p2.multiply(-2);\n    const c2 = p1.add(a.add(p3));\n\n    a = p1.multiply(-2);\n    const b = p2.multiply(2);\n    const c1 = a.add(b);\n\n    const c0 = new Point2D(p1.x, p1.y);\n\n    // Convert line to normal form: ax + by + c = 0\n    // Find normal to line: negative inverse of original line's slope\n    const n = new Vector2D(a1.y - a2.y, a2.x - a1.x);\n\n    // Determine new c coefficient\n    const cl = a1.x*a2.y - a2.x*a1.y;\n\n    // Transform cubic coefficients to line's coordinate system and find roots\n    // of cubic\n    const roots = new Polynomial(\n        n.dot(c2),\n        n.dot(c1),\n        n.dot(c0) + cl\n    ).getRoots();\n\n    // Any roots in closed interval [0,1] are intersections on Bezier, but\n    // might not be on the line segment.\n    // Find intersections and calculate point coordinates\n    for (const t of roots) {\n        if (0 <= t && t <= 1) {\n            // We're within the Bezier curve\n            // Find point on Bezier\n            const p4 = p1.lerp(p2, t);\n            const p5 = p2.lerp(p3, t);\n\n            const p6 = p4.lerp(p5, t);\n\n            // See if point is on line segment\n            // Had to make special cases for vertical and horizontal lines due\n            // to slight errors in calculation of p6\n            if (a1.x == a2.x) {\n                if (min.y <= p6.y && p6.y <= max.y) {\n                    result.status = \"Intersection\";\n                    result.appendPoint(p6);\n                }\n            }\n            else if (a1.y == a2.y) {\n                if (min.x <= p6.x && p6.x <= max.x) {\n                    result.status = \"Intersection\";\n                    result.appendPoint(p6);\n                }\n            }\n            else if (min.x <= p6.x && p6.x <= max.x && min.y <= p6.y && p6.y <= max.y) {\n                result.status = \"Intersection\";\n                result.appendPoint(p6);\n            }\n        }\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectBezier2Polygon\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @param {Point2D} p3\n *  @param {Array<Point2D>} points\n *  @returns {Intersection}\n */\nIntersection.intersectBezier2Polygon = function(p1, p2, p3, points) {\n    return Intersection.intersectBezier2Polyline(p1, p2, p3, closePolygon(points));\n};\n\n\n/**\n *  intersectBezier2Polyline\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @param {Point2D} p3\n *  @param {Array<Point2D>} points\n *  @returns {Intersection}\n */\nIntersection.intersectBezier2Polyline = function(p1, p2, p3, points) {\n    const result = new Intersection(\"No Intersection\");\n    const {length: len} = points;\n\n    for (let i = 0; i < len - 1; i++) {\n        const a1 = points[i];\n        const a2 = points[i + 1];\n        const inter = Intersection.intersectBezier2Line(p1, p2, p3, a1, a2);\n\n        result.appendPoints(inter.points);\n    }\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectBezier2Rectangle\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @param {Point2D} p3\n *  @param {Point2D} r1\n *  @param {Point2D} r2\n *  @returns {Intersection}\n */\nIntersection.intersectBezier2Rectangle = function(p1, p2, p3, r1, r2) {\n    const min = r1.min(r2);\n    const max = r1.max(r2);\n    const topRight = new Point2D(max.x, min.y);\n    const bottomLeft = new Point2D(min.x, max.y);\n\n    const inter1 = Intersection.intersectBezier2Line(p1, p2, p3, min, topRight);\n    const inter2 = Intersection.intersectBezier2Line(p1, p2, p3, topRight, max);\n    const inter3 = Intersection.intersectBezier2Line(p1, p2, p3, max, bottomLeft);\n    const inter4 = Intersection.intersectBezier2Line(p1, p2, p3, bottomLeft, min);\n\n    const result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectBezier3Bezier3\n *\n *  @param {Point2D} a1\n *  @param {Point2D} a2\n *  @param {Point2D} a3\n *  @param {Point2D} a4\n *  @param {Point2D} b1\n *  @param {Point2D} b2\n *  @param {Point2D} b3\n *  @param {Point2D} b4\n *  @returns {Intersection}\n */\nIntersection.intersectBezier3Bezier3 = function(a1, a2, a3, a4, b1, b2, b3, b4) {\n    let a, b, c, d; // temporary variables\n    // c13, c12, c11, c10; // coefficients of cubic\n    // c23, c22, c21, c20; // coefficients of cubic\n    const result = new Intersection(\"No Intersection\");\n\n    // Calculate the coefficients of cubic polynomial\n    a = a1.multiply(-1);\n    b = a2.multiply(3);\n    c = a3.multiply(-3);\n    d = a.add(b.add(c.add(a4)));\n    const c13 = new Vector2D(d.x, d.y);\n\n    a = a1.multiply(3);\n    b = a2.multiply(-6);\n    c = a3.multiply(3);\n    d = a.add(b.add(c));\n    const c12 = new Vector2D(d.x, d.y);\n\n    a = a1.multiply(-3);\n    b = a2.multiply(3);\n    c = a.add(b);\n    const c11 = new Vector2D(c.x, c.y);\n\n    const c10 = new Vector2D(a1.x, a1.y);\n\n    a = b1.multiply(-1);\n    b = b2.multiply(3);\n    c = b3.multiply(-3);\n    d = a.add(b.add(c.add(b4)));\n    const c23 = new Vector2D(d.x, d.y);\n\n    a = b1.multiply(3);\n    b = b2.multiply(-6);\n    c = b3.multiply(3);\n    d = a.add(b.add(c));\n    const c22 = new Vector2D(d.x, d.y);\n\n    a = b1.multiply(-3);\n    b = b2.multiply(3);\n    c = a.add(b);\n    const c21 = new Vector2D(c.x, c.y);\n\n    const c20 = new Vector2D(b1.x, b1.y);\n\n    // bezout\n    a = c13.x * c12.y - c12.x * c13.y;\n    b = c13.x * c11.y - c11.x * c13.y;\n    const c0 = c13.x * c10.y - c10.x * c13.y + c20.x * c13.y - c13.x * c20.y;\n    const c1 = c21.x * c13.y - c13.x * c21.y;\n    const c2 = c22.x * c13.y - c13.x * c22.y;\n    const c3 = c23.x * c13.y - c13.x * c23.y;\n    d = c13.x * c11.y - c11.x * c13.y;\n    const e0 = c13.x * c10.y + c12.x * c11.y - c11.x * c12.y - c10.x * c13.y + c20.x * c13.y - c13.x * c20.y;\n    const e1 = c21.x * c13.y - c13.x * c21.y;\n    const e2 = c22.x * c13.y - c13.x * c22.y;\n    const e3 = c23.x * c13.y - c13.x * c23.y;\n    const f0 = c12.x * c10.y - c10.x * c12.y + c20.x * c12.y - c12.x * c20.y;\n    const f1 = c21.x * c12.y - c12.x * c21.y;\n    const f2 = c22.x * c12.y - c12.x * c22.y;\n    const f3 = c23.x * c12.y - c12.x * c23.y;\n    const g0 = c13.x * c10.y - c10.x * c13.y + c20.x * c13.y - c13.x * c20.y;\n    const g1 = c21.x * c13.y - c13.x * c21.y;\n    const g2 = c22.x * c13.y - c13.x * c22.y;\n    const g3 = c23.x * c13.y - c13.x * c23.y;\n    const h0 = c12.x * c10.y - c10.x * c12.y + c20.x * c12.y - c12.x * c20.y;\n    const h1 = c21.x * c12.y - c12.x * c21.y;\n    const h2 = c22.x * c12.y - c12.x * c22.y;\n    const h3 = c23.x * c12.y - c12.x * c23.y;\n    const i0 = c11.x * c10.y - c10.x * c11.y + c20.x * c11.y - c11.x * c20.y;\n    const i1 = c21.x * c11.y - c11.x * c21.y;\n    const i2 = c22.x * c11.y - c11.x * c22.y;\n    const i3 = c23.x * c11.y - c11.x * c23.y;\n\n    // determinant\n    const poly = new Polynomial(\n        -c3 * e3 * g3,\n        -c3 * e3 * g2 - c3 * e2 * g3 - c2 * e3 * g3,\n        -c3 * e3 * g1 - c3 * e2 * g2 - c2 * e3 * g2 - c3 * e1 * g3 - c2 * e2 * g3 - c1 * e3 * g3,\n        -c3 * e3 * g0 - c3 * e2 * g1 - c2 * e3 * g1 - c3 * e1 * g2 - c2 * e2 * g2 - c1 * e3 * g2 - c3 * e0 * g3 - c2 * e1 * g3 - c1 * e2 * g3 - c0 * e3 * g3 + b * f3 * g3 + c3 * d * h3 - a * f3 * h3 + a * e3 * i3,\n        -c3 * e2 * g0 - c2 * e3 * g0 - c3 * e1 * g1 - c2 * e2 * g1 - c1 * e3 * g1 - c3 * e0 * g2 - c2 * e1 * g2 - c1 * e2 * g2 - c0 * e3 * g2 + b * f3 * g2 - c2 * e0 * g3 - c1 * e1 * g3 - c0 * e2 * g3 + b * f2 * g3 + c3 * d * h2 - a * f3 * h2 + c2 * d * h3 - a * f2 * h3 + a * e3 * i2 + a * e2 * i3,\n        -c3 * e1 * g0 - c2 * e2 * g0 - c1 * e3 * g0 - c3 * e0 * g1 - c2 * e1 * g1 - c1 * e2 * g1 - c0 * e3 * g1 + b * f3 * g1 - c2 * e0 * g2 - c1 * e1 * g2 - c0 * e2 * g2 + b * f2 * g2 - c1 * e0 * g3 - c0 * e1 * g3 + b * f1 * g3 + c3 * d * h1 - a * f3 * h1 + c2 * d * h2 - a * f2 * h2 + c1 * d * h3 - a * f1 * h3 + a * e3 * i1 + a * e2 * i2 + a * e1 * i3,\n        -c3 * e0 * g0 - c2 * e1 * g0 - c1 * e2 * g0 - c0 * e3 * g0 + b * f3 * g0 - c2 * e0 * g1 - c1 * e1 * g1 - c0 * e2 * g1 + b * f2 * g1 - c1 * e0 * g2 - c0 * e1 * g2 + b * f1 * g2 - c0 * e0 * g3 + b * f0 * g3 + c3 * d * h0 - a * f3 * h0 + c2 * d * h1 - a * f2 * h1 + c1 * d * h2 - a * f1 * h2 + c0 * d * h3 - a * f0 * h3 + a * e3 * i0 + a * e2 * i1 + a * e1 * i2 - b * d * i3 + a * e0 * i3,\n        -c2 * e0 * g0 - c1 * e1 * g0 - c0 * e2 * g0 + b * f2 * g0 - c1 * e0 * g1 - c0 * e1 * g1 + b * f1 * g1 - c0 * e0 * g2 + b * f0 * g2 + c2 * d * h0 - a * f2 * h0 + c1 * d * h1 - a * f1 * h1 + c0 * d * h2 - a * f0 * h2 + a * e2 * i0 + a * e1 * i1 - b * d * i2 + a * e0 * i2,\n        -c1 * e0 * g0 - c0 * e1 * g0 + b * f1 * g0 - c0 * e0 * g1 + b * f0 * g1 + c1 * d * h0 - a * f1 * h0 + c0 * d * h1 - a * f0 * h1 + a * e1 * i0 - b * d * i1 + a * e0 * i1,\n        -c0 * e0 * g0 + b * f0 * g0 + c0 * d * h0 - a * f0 * h0 - b * d * i0 + a * e0 * i0\n    );\n    poly.simplify();\n    const roots = poly.getRootsInInterval(0, 1);\n\n    for (const s of roots) {\n        const xp = new Polynomial(\n            c13.x,\n            c12.x,\n            c11.x,\n            c10.x - c20.x - s*c21.x - s*s*c22.x - s*s*s*c23.x\n        );\n        xp.simplify();\n        const xRoots = xp.getRoots();\n        const yp = new Polynomial(\n            c13.y,\n            c12.y,\n            c11.y,\n            c10.y - c20.y - s*c21.y - s*s*c22.y - s*s*s*c23.y\n        );\n        yp.simplify();\n        const yRoots = yp.getRoots();\n\n        if (xRoots.length > 0 && yRoots.length > 0) {\n            const TOLERANCE = 1e-4;\n\n            checkRoots:\n            for (const xRoot of xRoots) {\n                if (0 <= xRoot && xRoot <= 1) {\n                    for (let k = 0; k < yRoots.length; k++) {\n                        if (Math.abs(xRoot - yRoots[k]) < TOLERANCE) {\n                            result.points.push(\n                                c23.multiply(s*s*s).add(c22.multiply(s*s).add(c21.multiply(s).add(c20)))\n                            );\n                            break checkRoots;\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectBezier3Circle\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @param {Point2D} p3\n *  @param {Point2D} p4\n *  @param {Point2D} c\n *  @param {number} r\n *  @returns {Intersection}\n */\nIntersection.intersectBezier3Circle = function(p1, p2, p3, p4, c, r) {\n    return Intersection.intersectBezier3Ellipse(p1, p2, p3, p4, c, r, r);\n};\n\n\n/**\n *  intersectBezier3Ellipse\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @param {Point2D} p3\n *  @param {Point2D} p4\n *  @param {Point2D} ec\n *  @param {number} rx\n *  @param {number} ry\n *  @returns {Intersection}\n */\nIntersection.intersectBezier3Ellipse = function(p1, p2, p3, p4, ec, rx, ry) {\n    let a, b, c, d; // temporary variables\n    // c3, c2, c1, c0; // coefficients of cubic\n    const result = new Intersection(\"No Intersection\");\n\n    // Calculate the coefficients of cubic polynomial\n    a = p1.multiply(-1);\n    b = p2.multiply(3);\n    c = p3.multiply(-3);\n    d = a.add(b.add(c.add(p4)));\n    const c3 = new Vector2D(d.x, d.y);\n\n    a = p1.multiply(3);\n    b = p2.multiply(-6);\n    c = p3.multiply(3);\n    d = a.add(b.add(c));\n    const c2 = new Vector2D(d.x, d.y);\n\n    a = p1.multiply(-3);\n    b = p2.multiply(3);\n    c = a.add(b);\n    const c1 = new Vector2D(c.x, c.y);\n\n    const c0 = new Vector2D(p1.x, p1.y);\n\n    const rxrx = rx*rx;\n    const ryry = ry*ry;\n    const poly = new Polynomial(\n        c3.x*c3.x*ryry + c3.y*c3.y*rxrx,\n        2*(c3.x*c2.x*ryry + c3.y*c2.y*rxrx),\n        2*(c3.x*c1.x*ryry + c3.y*c1.y*rxrx) + c2.x*c2.x*ryry + c2.y*c2.y*rxrx,\n        2*c3.x*ryry*(c0.x - ec.x) + 2*c3.y*rxrx*(c0.y - ec.y) +\n            2*(c2.x*c1.x*ryry + c2.y*c1.y*rxrx),\n        2*c2.x*ryry*(c0.x - ec.x) + 2*c2.y*rxrx*(c0.y - ec.y) +\n            c1.x*c1.x*ryry + c1.y*c1.y*rxrx,\n        2*c1.x*ryry*(c0.x - ec.x) + 2*c1.y*rxrx*(c0.y - ec.y),\n        c0.x*c0.x*ryry - 2*c0.y*ec.y*rxrx - 2*c0.x*ec.x*ryry +\n            c0.y*c0.y*rxrx + ec.x*ec.x*ryry + ec.y*ec.y*rxrx - rxrx*ryry\n    );\n    const roots = poly.getRootsInInterval(0, 1);\n\n    for (const t of roots) {\n        result.points.push(\n            c3.multiply(t*t*t).add(c2.multiply(t*t).add(c1.multiply(t).add(c0)))\n        );\n    }\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectBezier3Line\n *\n *  Many thanks to Dan Sunday at SoftSurfer.com.  He gave me a very thorough\n *  sketch of the algorithm used here.  Without his help, I'm not sure when I\n *  would have figured out this intersection problem.\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @param {Point2D} p3\n *  @param {Point2D} p4\n *  @param {Point2D} a1\n *  @param {Point2D} a2\n *  @returns {Intersection}\n */\nIntersection.intersectBezier3Line = function(p1, p2, p3, p4, a1, a2) {\n    let a, b, c, d; // temporary variables\n    // c3, c2, c1, c0; // coefficients of cubic\n    // cl; // c coefficient for normal form of line\n    // n; // normal for normal form of line\n    const min = a1.min(a2); // used to determine if point is on line segment\n    const max = a1.max(a2); // used to determine if point is on line segment\n    const result = new Intersection(\"No Intersection\");\n\n    // Start with Bezier using Bernstein polynomials for weighting functions:\n    //     (1-t^3)P1 + 3t(1-t)^2P2 + 3t^2(1-t)P3 + t^3P4\n    //\n    // Expand and collect terms to form linear combinations of original Bezier\n    // controls.  This ends up with a vector cubic in t:\n    //     (-P1+3P2-3P3+P4)t^3 + (3P1-6P2+3P3)t^2 + (-3P1+3P2)t + P1\n    //             /\\                  /\\                /\\       /\\\n    //             ||                  ||                ||       ||\n    //             c3                  c2                c1       c0\n\n    // Calculate the coefficients\n    a = p1.multiply(-1);\n    b = p2.multiply(3);\n    c = p3.multiply(-3);\n    d = a.add(b.add(c.add(p4)));\n    const c3 = new Vector2D(d.x, d.y);\n\n    a = p1.multiply(3);\n    b = p2.multiply(-6);\n    c = p3.multiply(3);\n    d = a.add(b.add(c));\n    const c2 = new Vector2D(d.x, d.y);\n\n    a = p1.multiply(-3);\n    b = p2.multiply(3);\n    c = a.add(b);\n    const c1 = new Vector2D(c.x, c.y);\n\n    const c0 = new Vector2D(p1.x, p1.y);\n\n    // Convert line to normal form: ax + by + c = 0\n    // Find normal to line: negative inverse of original line's slope\n    const n = new Vector2D(a1.y - a2.y, a2.x - a1.x);\n\n    // Determine new c coefficient\n    const cl = a1.x*a2.y - a2.x*a1.y;\n\n    // ?Rotate each cubic coefficient using line for new coordinate system?\n    // Find roots of rotated cubic\n    const roots = new Polynomial(\n        n.dot(c3),\n        n.dot(c2),\n        n.dot(c1),\n        n.dot(c0) + cl\n    ).getRoots();\n\n    // Any roots in closed interval [0,1] are intersections on Bezier, but\n    // might not be on the line segment.\n    // Find intersections and calculate point coordinates\n    for (const t of roots) {\n        if (0 <= t && t <= 1) {\n            // We're within the Bezier curve\n            // Find point on Bezier\n            const p5 = p1.lerp(p2, t);\n            const p6 = p2.lerp(p3, t);\n            const p7 = p3.lerp(p4, t);\n\n            const p8 = p5.lerp(p6, t);\n            const p9 = p6.lerp(p7, t);\n\n            const p10 = p8.lerp(p9, t);\n\n            // See if point is on line segment\n            // Had to make special cases for vertical and horizontal lines due\n            // to slight errors in calculation of p10\n            if (a1.x == a2.x) {\n                if (min.y <= p10.y && p10.y <= max.y) {\n                    result.status = \"Intersection\";\n                    result.appendPoint(p10);\n                }\n            }\n            else if (a1.y == a2.y) {\n                if (min.x <= p10.x && p10.x <= max.x) {\n                    result.status = \"Intersection\";\n                    result.appendPoint(p10);\n                }\n            }\n            else if (min.x <= p10.x && p10.x <= max.x && min.y <= p10.y && p10.y <= max.y) {\n                result.status = \"Intersection\";\n                result.appendPoint(p10);\n            }\n        }\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectBezier3Polygon\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @param {Point2D} p3\n *  @param {Point2D} p4\n *  @param {Array<Point2D>} points\n *  @returns {Intersection}\n */\nIntersection.intersectBezier3Polygon = function(p1, p2, p3, p4, points) {\n    return this.intersectBezier3Polyline(p1, p2, p3, p4, closePolygon(points));\n};\n\n\n/**\n *  intersectBezier3Polyline\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @param {Point2D} p3\n *  @param {Point2D} p4\n *  @param {Array<Point2D>} points\n *  @returns {Intersection}\n */\nIntersection.intersectBezier3Polyline = function(p1, p2, p3, p4, points) {\n    const result = new Intersection(\"No Intersection\");\n    const {length: len} = points;\n\n    for (let i = 0; i < len - 1; i++) {\n        const a1 = points[i];\n        const a2 = points[i + 1];\n        const inter = Intersection.intersectBezier3Line(p1, p2, p3, p4, a1, a2);\n\n        result.appendPoints(inter.points);\n    }\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectBezier3Rectangle\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @param {Point2D} p3\n *  @param {Point2D} p4\n *  @param {Point2D} r1\n *  @param {Point2D} r2\n *  @returns {Intersection}\n */\nIntersection.intersectBezier3Rectangle = function(p1, p2, p3, p4, r1, r2) {\n    const min = r1.min(r2);\n    const max = r1.max(r2);\n    const topRight = new Point2D(max.x, min.y);\n    const bottomLeft = new Point2D(min.x, max.y);\n\n    const inter1 = Intersection.intersectBezier3Line(p1, p2, p3, p4, min, topRight);\n    const inter2 = Intersection.intersectBezier3Line(p1, p2, p3, p4, topRight, max);\n    const inter3 = Intersection.intersectBezier3Line(p1, p2, p3, p4, max, bottomLeft);\n    const inter4 = Intersection.intersectBezier3Line(p1, p2, p3, p4, bottomLeft, min);\n\n    const result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectCircleCircle\n *\n *  @param {Point2D} c1\n *  @param {number} r1\n *  @param {Point2D} c2\n *  @param {number} r2\n *  @returns {Intersection}\n */\nIntersection.intersectCircleCircle = function(c1, r1, c2, r2) {\n    let result;\n\n    // Determine minimum and maximum radii where circles can intersect\n    const r_max = r1 + r2;\n    const r_min = Math.abs(r1 - r2);\n\n    // Determine actual distance between circle circles\n    const c_dist = c1.distanceFrom(c2);\n\n    if (c_dist > r_max) {\n        result = new Intersection(\"Outside\");\n    }\n    else if (c_dist < r_min) {\n        result = new Intersection(\"Inside\");\n    }\n    else {\n        result = new Intersection(\"Intersection\");\n\n        const a = (r1*r1 - r2*r2 + c_dist*c_dist) / (2*c_dist);\n        const h = Math.sqrt(r1*r1 - a*a);\n        const p = c1.lerp(c2, a/c_dist);\n        const b = h / c_dist;\n\n        result.points.push(\n            new Point2D(\n                p.x - b * (c2.y - c1.y),\n                p.y + b * (c2.x - c1.x)\n            )\n        );\n        result.points.push(\n            new Point2D(\n                p.x + b * (c2.y - c1.y),\n                p.y - b * (c2.x - c1.x)\n            )\n        );\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectCircleEllipse\n *\n *  @param {Point2D} cc\n *  @param {number} r\n *  @param {Point2D} ec\n *  @param {number} rx\n *  @param {number} ry\n *  @returns {Intersection}\n */\nIntersection.intersectCircleEllipse = function(cc, r, ec, rx, ry) {\n    return Intersection.intersectEllipseEllipse(cc, r, r, ec, rx, ry);\n};\n\n\n/**\n *  intersectCircleLine\n *\n *  @param {Point2D} c\n *  @param {number} r\n *  @param {Point2D} a1\n *  @param {Point2D} a2\n *  @returns {Intersection}\n */\nIntersection.intersectCircleLine = function(c, r, a1, a2) {\n    let result;\n    const a = (a2.x - a1.x) * (a2.x - a1.x) +\n             (a2.y - a1.y) * (a2.y - a1.y);\n    const b = 2 * ((a2.x - a1.x) * (a1.x - c.x) +\n                   (a2.y - a1.y) * (a1.y - c.y));\n    const cc = c.x*c.x + c.y*c.y + a1.x*a1.x + a1.y*a1.y -\n             2 * (c.x * a1.x + c.y * a1.y) - r*r;\n    const deter = b*b - 4*a*cc;\n\n    if (deter < 0) {\n        result = new Intersection(\"Outside\");\n    }\n    else if (deter == 0) {\n        result = new Intersection(\"Tangent\");\n        // NOTE: should calculate this point\n    }\n    else {\n        const e = Math.sqrt(deter);\n        const u1 = (-b + e) / (2*a);\n        const u2 = (-b - e) / (2*a);\n\n        if ((u1 < 0 || u1 > 1) && (u2 < 0 || u2 > 1)) {\n            if ((u1 < 0 && u2 < 0) || (u1 > 1 && u2 > 1)) {\n                result = new Intersection(\"Outside\");\n            }\n            else {\n                result = new Intersection(\"Inside\");\n            }\n        }\n        else {\n            result = new Intersection(\"Intersection\");\n\n            if (0 <= u1 && u1 <= 1) {\n                result.points.push(a1.lerp(a2, u1));\n            }\n\n            if (0 <= u2 && u2 <= 1) {\n                result.points.push(a1.lerp(a2, u2));\n            }\n        }\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectCirclePolygon\n *\n *  @param {Point2D} c\n *  @param {number} r\n *  @param {Array<Point2D>} points\n *  @returns {Intersection}\n */\nIntersection.intersectCirclePolygon = function(c, r, points) {\n    return this.intersectCirclePolyline(c, r, closePolygon(points));\n};\n\n\n/**\n *  intersectCirclePolyline\n *\n *  @param {Point2D} c\n *  @param {number} r\n *  @param {Array<Point2D>} points\n *  @returns {Intersection}\n */\nIntersection.intersectCirclePolyline = function(c, r, points) {\n    const result = new Intersection(\"No Intersection\");\n    const {length: len} = points;\n    let inter;\n\n    for (let i = 0; i < len - 1; i++) {\n        const a1 = points[i];\n        const a2 = points[i + 1];\n\n        inter = Intersection.intersectCircleLine(c, r, a1, a2);\n        result.appendPoints(inter.points);\n    }\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n    else {\n        result.status = inter.status;\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectCircleRectangle\n *\n *  @param {Point2D} c\n *  @param {number} r\n *  @param {Point2D} r1\n *  @param {Point2D} r2\n *  @returns {Intersection}\n */\nIntersection.intersectCircleRectangle = function(c, r, r1, r2) {\n    const min = r1.min(r2);\n    const max = r1.max(r2);\n    const topRight = new Point2D(max.x, min.y);\n    const bottomLeft = new Point2D(min.x, max.y);\n\n    const inter1 = Intersection.intersectCircleLine(c, r, min, topRight);\n    const inter2 = Intersection.intersectCircleLine(c, r, topRight, max);\n    const inter3 = Intersection.intersectCircleLine(c, r, max, bottomLeft);\n    const inter4 = Intersection.intersectCircleLine(c, r, bottomLeft, min);\n\n    const result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n    else {\n        result.status = inter1.status;\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectEllipseEllipse\n *\n *  This code is based on MgcIntr2DElpElp.cpp written by David Eberly.  His\n *  code along with many other excellent examples are avaiable at his site:\n *  http://www.magic-software.com\n *\n *  NOTE: Rotation will need to be added to this function\n *\n *  @param {Point2D} c1\n *  @param {number} rx1\n *  @param {number} ry1\n *  @param {Point2D} c2\n *  @param {number} rx2\n *  @param {number} ry2\n *  @returns {Intersection}\n */\nIntersection.intersectEllipseEllipse = function(c1, rx1, ry1, c2, rx2, ry2) {\n    const a = [\n        ry1*ry1, 0, rx1*rx1, -2*ry1*ry1*c1.x, -2*rx1*rx1*c1.y,\n        ry1*ry1*c1.x*c1.x + rx1*rx1*c1.y*c1.y - rx1*rx1*ry1*ry1\n    ];\n    const b = [\n        ry2*ry2, 0, rx2*rx2, -2*ry2*ry2*c2.x, -2*rx2*rx2*c2.y,\n        ry2*ry2*c2.x*c2.x + rx2*rx2*c2.y*c2.y - rx2*rx2*ry2*ry2\n    ];\n\n    const yPoly = Intersection.bezout(a, b);\n    const yRoots = yPoly.getRoots();\n    const epsilon = 1e-3;\n    const norm0 = (a[0]*a[0] + 2*a[1]*a[1] + a[2]*a[2]) * epsilon;\n    const norm1 = (b[0]*b[0] + 2*b[1]*b[1] + b[2]*b[2]) * epsilon;\n    const result = new Intersection(\"No Intersection\");\n\n    for (let y = 0; y < yRoots.length; y++) {\n        const xPoly = new Polynomial(\n            a[0],\n            a[3] + yRoots[y] * a[1],\n            a[5] + yRoots[y] * (a[4] + yRoots[y]*a[2])\n        );\n        const xRoots = xPoly.getRoots();\n\n        for (let x = 0; x < xRoots.length; x++) {\n            let tst =\n                (a[0]*xRoots[x] + a[1]*yRoots[y] + a[3]) * xRoots[x] +\n                (a[2]*yRoots[y] + a[4]) * yRoots[y] + a[5];\n            if (Math.abs(tst) < norm0) {\n                tst =\n                    (b[0]*xRoots[x] + b[1]*yRoots[y] + b[3]) * xRoots[x] +\n                    (b[2]*yRoots[y] + b[4]) * yRoots[y] + b[5];\n                if (Math.abs(tst) < norm1) {\n                    result.appendPoint(new Point2D(xRoots[x], yRoots[y]));\n                }\n            }\n        }\n    }\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectEllipseLine\n *\n *  NOTE: Rotation will need to be added to this function\n *\n *  @param {Point2D} c\n *  @param {number} rx\n *  @param {number} ry\n *  @param {Point2D} a1\n *  @param {Point2D} a2\n *  @returns {Intersection}\n */\nIntersection.intersectEllipseLine = function(c, rx, ry, a1, a2) {\n    let result;\n    const orign = new Vector2D(a1.x, a1.y);\n    const dir = Vector2D.fromPoints(a1, a2);\n    const center = new Vector2D(c.x, c.y);\n    const diff = orign.subtract(center);\n    const mDir = new Vector2D(dir.x/(rx*rx), dir.y/(ry*ry));\n    const mDiff = new Vector2D(diff.x/(rx*rx), diff.y/(ry*ry));\n\n    const a = dir.dot(mDir);\n    const b = dir.dot(mDiff);\n    c = diff.dot(mDiff) - 1.0;\n    const d = b*b - a*c;\n\n    if (d < 0) {\n        result = new Intersection(\"Outside\");\n    }\n    else if (d > 0) {\n        const root = Math.sqrt(d); // eslint-disable-line no-shadow\n        const t_a = (-b - root) / a;\n        const t_b = (-b + root) / a;\n\n        if ((t_a < 0 || 1 < t_a) && (t_b < 0 || 1 < t_b)) {\n            if ((t_a < 0 && t_b < 0) || (t_a > 1 && t_b > 1)) {\n                result = new Intersection(\"Outside\");\n            }\n            else {\n                result = new Intersection(\"Inside\");\n            }\n        }\n        else {\n            result = new Intersection(\"Intersection\");\n            if (0 <= t_a && t_a <= 1) {\n                result.appendPoint(a1.lerp(a2, t_a));\n            }\n            if (0 <= t_b && t_b <= 1) {\n                result.appendPoint(a1.lerp(a2, t_b));\n            }\n        }\n    }\n    else {\n        const t = -b/a;\n\n        if (0 <= t && t <= 1) {\n            result = new Intersection(\"Intersection\");\n            result.appendPoint(a1.lerp(a2, t));\n        }\n        else {\n            result = new Intersection(\"Outside\");\n        }\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectEllipsePolygon\n *\n *  @param {Point2D} c\n *  @param {number} rx\n *  @param {number} ry\n *  @param {Array<Point2D>} points\n *  @returns {Intersection}\n */\nIntersection.intersectEllipsePolygon = function(c, rx, ry, points) {\n    return this.intersectEllipsePolyline(c, rx, ry, closePolygon(points));\n};\n\n\n/**\n *  intersectEllipsePolyline\n *\n *  @param {Point2D} c\n *  @param {number} rx\n *  @param {number} ry\n *  @param {Array<Point2D>} points\n *  @returns {Intersection}\n */\nIntersection.intersectEllipsePolyline = function(c, rx, ry, points) {\n    const result = new Intersection(\"No Intersection\");\n    const {length: len} = points;\n\n    for (let i = 0; i < len - 1; i++) {\n        const b1 = points[i];\n        const b2 = points[i + 1];\n        const inter = Intersection.intersectEllipseLine(c, rx, ry, b1, b2);\n\n        result.appendPoints(inter.points);\n    }\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectEllipseRectangle\n *\n *  @param {Point2D} c\n *  @param {number} rx\n *  @param {number} ry\n *  @param {Point2D} r1\n *  @param {Point2D} r2\n *  @returns {Intersection}\n */\nIntersection.intersectEllipseRectangle = function(c, rx, ry, r1, r2) {\n    const min = r1.min(r2);\n    const max = r1.max(r2);\n    const topRight = new Point2D(max.x, min.y);\n    const bottomLeft = new Point2D(min.x, max.y);\n\n    const inter1 = Intersection.intersectEllipseLine(c, rx, ry, min, topRight);\n    const inter2 = Intersection.intersectEllipseLine(c, rx, ry, topRight, max);\n    const inter3 = Intersection.intersectEllipseLine(c, rx, ry, max, bottomLeft);\n    const inter4 = Intersection.intersectEllipseLine(c, rx, ry, bottomLeft, min);\n\n    const result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectLineLine\n *\n *  @param {Point2D} a1\n *  @param {Point2D} a2\n *  @param {Point2D} b1\n *  @param {Point2D} b2\n *  @returns {Intersection}\n */\nIntersection.intersectLineLine = function(a1, a2, b1, b2) {\n    let result;\n\n    const ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n    const ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n    const u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n    if (u_b != 0) {\n        const ua = ua_t / u_b;\n        const ub = ub_t / u_b;\n\n        if (0 <= ua && ua <= 1 && 0 <= ub && ub <= 1) {\n            result = new Intersection(\"Intersection\");\n            result.points.push(\n                new Point2D(\n                    a1.x + ua * (a2.x - a1.x),\n                    a1.y + ua * (a2.y - a1.y)\n                )\n            );\n        }\n        else {\n            result = new Intersection(\"No Intersection\");\n        }\n    }\n    else if (ua_t == 0 || ub_t == 0) {\n        result = new Intersection(\"Coincident\");\n    }\n    else {\n        result = new Intersection(\"Parallel\");\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectLinePolygon\n *\n *  @param {Point2D} a1\n *  @param {Point2D} a2\n *  @param {Array<Point2D>} points\n *  @returns {Intersection}\n */\nIntersection.intersectLinePolygon = function(a1, a2, points) {\n    return this.intersectLinePolyline(a1, a2, closePolygon(points));\n};\n\n\n/**\n *  intersectLinePolyline\n *\n *  @param {Point2D} a1\n *  @param {Point2D} a2\n *  @param {Array<Point2D>} points\n *  @returns {Intersection}\n */\nIntersection.intersectLinePolyline = function(a1, a2, points) {\n    const result = new Intersection(\"No Intersection\");\n    const {length: len} = points;\n\n    for (let i = 0; i < len - 1; i++) {\n        const b1 = points[i];\n        const b2 = points[i + 1];\n        const inter = Intersection.intersectLineLine(a1, a2, b1, b2);\n\n        result.appendPoints(inter.points);\n    }\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectLineRectangle\n *\n *  @param {Point2D} a1\n *  @param {Point2D} a2\n *  @param {Point2D} r1\n *  @param {Point2D} r2\n *  @returns {Intersection}\n */\nIntersection.intersectLineRectangle = function(a1, a2, r1, r2) {\n    const min = r1.min(r2);\n    const max = r1.max(r2);\n    const topRight = new Point2D(max.x, min.y);\n    const bottomLeft = new Point2D(min.x, max.y);\n\n    const inter1 = Intersection.intersectLineLine(min, topRight, a1, a2);\n    const inter2 = Intersection.intersectLineLine(topRight, max, a1, a2);\n    const inter3 = Intersection.intersectLineLine(max, bottomLeft, a1, a2);\n    const inter4 = Intersection.intersectLineLine(bottomLeft, min, a1, a2);\n\n    const result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectPolygonPolygon\n *\n *  @param {Array<Point2D>} points1\n *  @param {Array<Point2D>} points2\n *  @returns {Intersection}\n */\nIntersection.intersectPolygonPolygon = function(points1, points2) {\n    return this.intersectPolylinePolyline(closePolygon(points1), closePolygon(points2));\n};\n\n\n/**\n *  intersectPolygonPolyline\n *\n *  @param {Array<Point2D>} points1\n *  @param {Array<Point2D>} points2\n *  @returns {Intersection}\n */\nIntersection.intersectPolygonPolyline = function(points1, points2) {\n    return this.intersectPolylinePolyline(closePolygon(points1), points2);\n};\n\n\n/**\n *  intersectPolygonRectangle\n *\n *  @param {Array<Point2D>} points\n *  @param {Point2D} r1\n *  @param {Point2D} r2\n *  @returns {Intersection}\n */\nIntersection.intersectPolygonRectangle = function(points, r1, r2) {\n    return this.intersectPolylineRectangle(closePolygon(points), r1, r2);\n};\n\n\n/**\n *  intersectPolylinePolyline\n *\n *  @param {Array<Point2D>} points1\n *  @param {Array<Point2D>} points2\n *  @returns {Intersection}\n */\nIntersection.intersectPolylinePolyline = function(points1, points2) {\n    const result = new Intersection(\"No Intersection\");\n    const {length: len} = points1;\n\n    for (let i = 0; i < len - 1; i++) {\n        const a1 = points1[i];\n        const a2 = points1[i + 1];\n        const inter = Intersection.intersectLinePolyline(a1, a2, points2);\n\n        result.appendPoints(inter.points);\n    }\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectPolylineRectangle\n *\n *  @param {Array<Point2D>} points\n *  @param {Point2D} r1\n *  @param {Point2D} r2\n *  @returns {Intersection}\n */\nIntersection.intersectPolylineRectangle = function(points, r1, r2) {\n    const min = r1.min(r2);\n    const max = r1.max(r2);\n    const topRight = new Point2D(max.x, min.y);\n    const bottomLeft = new Point2D(min.x, max.y);\n\n    const inter1 = Intersection.intersectLinePolyline(min, topRight, points);\n    const inter2 = Intersection.intersectLinePolyline(topRight, max, points);\n    const inter3 = Intersection.intersectLinePolyline(max, bottomLeft, points);\n    const inter4 = Intersection.intersectLinePolyline(bottomLeft, min, points);\n\n    const result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectRectangleRectangle\n *\n *  @param {Point2D} a1\n *  @param {Point2D} a2\n *  @param {Point2D} b1\n *  @param {Point2D} b2\n *  @returns {Intersection}\n */\nIntersection.intersectRectangleRectangle = function(a1, a2, b1, b2) {\n    const min = a1.min(a2);\n    const max = a1.max(a2);\n    const topRight = new Point2D(max.x, min.y);\n    const bottomLeft = new Point2D(min.x, max.y);\n\n    const inter1 = Intersection.intersectLineRectangle(min, topRight, b1, b2);\n    const inter2 = Intersection.intersectLineRectangle(topRight, max, b1, b2);\n    const inter3 = Intersection.intersectLineRectangle(max, bottomLeft, b1, b2);\n    const inter4 = Intersection.intersectLineRectangle(bottomLeft, min, b1, b2);\n\n    const result = new Intersection(\"No Intersection\");\n\n    result.appendPoints(inter1.points);\n    result.appendPoints(inter2.points);\n    result.appendPoints(inter3.points);\n    result.appendPoints(inter4.points);\n\n    if (result.points.length > 0) {\n        result.status = \"Intersection\";\n    }\n\n    return result;\n};\n\n\n/**\n *  intersectRayRay\n *\n *  @param {Point2D} a1\n *  @param {Point2D} a2\n *  @param {Point2D} b1\n *  @param {Point2D} b2\n *  @returns {Intersection}\n */\nIntersection.intersectRayRay = function(a1, a2, b1, b2) {\n    let result;\n\n    const ua_t = (b2.x - b1.x) * (a1.y - b1.y) - (b2.y - b1.y) * (a1.x - b1.x);\n    const ub_t = (a2.x - a1.x) * (a1.y - b1.y) - (a2.y - a1.y) * (a1.x - b1.x);\n    const u_b = (b2.y - b1.y) * (a2.x - a1.x) - (b2.x - b1.x) * (a2.y - a1.y);\n\n    if (u_b != 0) {\n        const ua = ua_t / u_b;\n\n        result = new Intersection(\"Intersection\");\n        result.points.push(\n            new Point2D(\n                a1.x + ua * (a2.x - a1.x),\n                a1.y + ua * (a2.y - a1.y)\n            )\n        );\n    }\n    else if (ua_t == 0 || ub_t == 0) {\n        result = new Intersection(\"Coincident\");\n    }\n    else {\n        result = new Intersection(\"Parallel\");\n    }\n\n    return result;\n};\n\n\n/**\n *  bezout\n *\n *  This code is based on MgcIntr2DElpElp.cpp written by David Eberly.  His\n *  code along with many other excellent examples are avaiable at his site:\n *  http://www.magic-software.com\n *\n *  @param {Array<Point2D>} e1\n *  @param {Array<Point2D>} e2\n *  @returns {Polynomial}\n */\nIntersection.bezout = function(e1, e2) {\n    const AB = e1[0]*e2[1] - e2[0]*e1[1];\n    const AC = e1[0]*e2[2] - e2[0]*e1[2];\n    const AD = e1[0]*e2[3] - e2[0]*e1[3];\n    const AE = e1[0]*e2[4] - e2[0]*e1[4];\n    const AF = e1[0]*e2[5] - e2[0]*e1[5];\n    const BC = e1[1]*e2[2] - e2[1]*e1[2];\n    const BE = e1[1]*e2[4] - e2[1]*e1[4];\n    const BF = e1[1]*e2[5] - e2[1]*e1[5];\n    const CD = e1[2]*e2[3] - e2[2]*e1[3];\n    const DE = e1[3]*e2[4] - e2[3]*e1[4];\n    const DF = e1[3]*e2[5] - e2[3]*e1[5];\n    const BFpDE = BF + DE;\n    const BEmCD = BE - CD;\n\n    return new Polynomial(\n        AB*BC - AC*AC,\n        AB*BEmCD + AD*BC - 2*AC*AE,\n        AB*BFpDE + AD*BEmCD - AE*AE - 2*AC*AF,\n        AB*DF + AD*BFpDE - 2*AE*AF,\n        AD*DF - AF*AF\n    );\n};\n\nexport default Intersection;\n","/**\n *\n *   IntersectionArgs.js\n *\n *   @copyright 2002, 2017 Kevin Lindsey\n *\n */\n\n/**\n *  IntersectionArgs\n *\n *  @param {string} name\n *  @param {Array<Point2D>} args\n *  @returns {IntersectionArgs}\n */\nfunction IntersectionArgs(name, args) {\n    this.init(name, args);\n}\n\n/**\n *  init\n *\n *  @param {string} name\n *  @param {Array<Point2D>} args\n */\nIntersectionArgs.prototype.init = function(name, args) {\n    this.name = name;\n    this.args = args;\n};\n\nexport default IntersectionArgs;\n","/**\n *  Shapes\n *\n *  @copyright 2017, Kevin Lindsey\n */\n\nimport {Point2D} from \"kld-affine\";\n\nimport IntersectionArgs from \"./IntersectionArgs.js\";\n\nconst Shapes = {};\n\n/**\n *  quadraticBezier\n *\n *  @param {number} p1x\n *  @param {number} p1y\n *  @param {number} p2x\n *  @param {number} p2y\n *  @param {number} p3x\n *  @param {number} p3y\n *  @returns {IntersectionArgs}\n */\nShapes.quadraticBezier = function(p1x, p1y, p2x, p2y, p3x, p3y) {\n    return new IntersectionArgs(\"Bezier2\", [\n        new Point2D(p1x, p1y),\n        new Point2D(p2x, p2y),\n        new Point2D(p3x, p3y)\n    ]);\n};\n\n\n/**\n *  cubicBezier\n *\n *  @param {number} p1x\n *  @param {number} p1y\n *  @param {number} p2x\n *  @param {number} p2y\n *  @param {number} p3x\n *  @param {number} p3y\n *  @param {number} p4x\n *  @param {number} p4y\n *  @returns {IntersectionArgs}\n */\nShapes.cubicBezier = function(p1x, p1y, p2x, p2y, p3x, p3y, p4x, p4y) {\n    return new IntersectionArgs(\"Bezier3\", [\n        new Point2D(p1x, p1y),\n        new Point2D(p2x, p2y),\n        new Point2D(p3x, p3y),\n        new Point2D(p4x, p4y)\n    ]);\n};\n\n\n/**\n *  circle\n *\n *  @param {number} centerX\n *  @param {number} centerY\n *  @param {number} radius\n *  @returns {IntersectionArgs}\n */\nShapes.circle = function(centerX, centerY, radius) {\n    return new IntersectionArgs(\"Circle\", [\n        new Point2D(centerX, centerY),\n        radius\n    ]);\n};\n\n\n/**\n *  ellipse\n *\n *  @param {number} centerX\n *  @param {number} centerY\n *  @param {number} radiusX\n *  @param {number} radiusY\n *  @returns {IntersectionArgs}\n */\nShapes.ellipse = function(centerX, centerY, radiusX, radiusY) {\n    return new IntersectionArgs(\"Ellipse\", [\n        new Point2D(centerX, centerY),\n        radiusX,\n        radiusY\n    ]);\n};\n\n\n/**\n *  line\n *\n *  @param {number} p1x\n *  @param {number} p1y\n *  @param {number} p2x\n *  @param {number} p2y\n *  @returns {IntersectionArgs}\n */\nShapes.line = function(p1x, p1y, p2x, p2y) {\n    return new IntersectionArgs(\"Line\", [\n        new Point2D(p1x, p1y),\n        new Point2D(p2x, p2y)\n    ]);\n};\n\n\n/**\n *  path\n *\n *  @param {Array<Shapes>} segments\n *  @returns {IntersectionArgs}\n */\nShapes.path = function(segments) {\n    return new IntersectionArgs(\"Path\", segments);\n};\n\n\n/**\n *  polygon\n *\n *  @param {Array<number>} coords\n *  @returns {IntersectionArgs}\n */\nShapes.polygon = function(coords) {\n    const points = [];\n\n    for (let i = 0; i < coords.length; i += 2) {\n        points.push(new Point2D(coords[i], coords[i + 1]));\n    }\n\n    return new IntersectionArgs(\"Polygon\", [points]);\n};\n\n\n/**\n *  polyline\n *\n *  @param {Array<number>} coords\n *  @returns {IntersectionArgs}\n */\nShapes.polyline = function(coords) {\n    const points = [];\n\n    for (let i = 0; i < coords.length; i += 2) {\n        points.push(new Point2D(coords[i], coords[i + 1]));\n    }\n\n    return new IntersectionArgs(\"Polyline\", [points]);\n};\n\n\n/**\n *  rectangle\n *\n *  @param {number} x\n *  @param {number} y\n *  @param {number} width\n *  @param {number} height\n *  @returns {IntersectionArgs}\n */\nShapes.rectangle = function(x, y, width, height) {\n    return new IntersectionArgs(\"Rectangle\", [\n        new Point2D(x, y),\n        new Point2D(x + width, y + height)\n    ]);\n};\n\n\nexport default Shapes;\n","/**\n *  AffineShapes\n *\n *  @copyright 2017, Kevin Lindsey\n */\n\nimport IntersectionArgs from \"./IntersectionArgs.js\";\n\nconst AffineShapes = {};\n\n/**\n *  quadraticBezier\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @param {Point2D} p3\n *  @returns {IntersectionArgs}\n */\nAffineShapes.quadraticBezier = function(p1, p2, p3) {\n    return new IntersectionArgs(\"Bezier2\", [p1, p2, p3]);\n};\n\n\n/**\n *  cubicBezier\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @param {Point2D} p3\n *  @param {Point2D} p4\n *  @returns {IntersectionArgs}\n */\nAffineShapes.cubicBezier = function(p1, p2, p3, p4) {\n    return new IntersectionArgs(\"Bezier3\", [p1, p2, p3, p4]);\n};\n\n\n/**\n *  circle\n *\n *  @param {Point2D} center\n *  @param {number} radius\n *  @returns {IntersectionArgs}\n */\nAffineShapes.circle = function(center, radius) {\n    return new IntersectionArgs(\"Circle\", [center, radius]);\n};\n\n\n/**\n *  ellipse\n *\n *  @param {Point2D} center\n *  @param {number} radiusX\n *  @param {number} radiusY\n *  @returns {IntersectionArgs}\n */\nAffineShapes.ellipse = function(center, radiusX, radiusY) {\n    return new IntersectionArgs(\"Ellipse\", [center, radiusX, radiusY]);\n};\n\n\n/**\n *  line\n *\n *  @param {Point2D} p1\n *  @param {Point2D} p2\n *  @returns {IntersectionArgs}\n */\nAffineShapes.line = function(p1, p2) {\n    return new IntersectionArgs(\"Line\", [p1, p2]);\n};\n\n\n/**\n *  path\n *\n *  @param {Array<AffineShapes>} segments\n *  @returns {IntersectionArgs}\n */\nAffineShapes.path = function(segments) {\n    return new IntersectionArgs(\"Path\", [segments]);\n};\n\n\n/**\n *  polygon\n *\n *  @param {Array<Point2D>} points\n *  @returns {IntersectionArgs}\n */\nAffineShapes.polygon = function(points) {\n    return new IntersectionArgs(\"Polygon\", [points]);\n};\n\n\n/**\n *  polyline\n *\n *  @param {Array<Point2D>} points\n *  @returns {IntersectionArgs}\n */\nAffineShapes.polyline = function(points) {\n    return new IntersectionArgs(\"Polyline\", [points]);\n};\n\n\n/**\n *  rectangle\n *\n *  @param {Point2D} topLeft\n *  @param {Vector2D} size\n *  @returns {IntersectionArgs}\n */\nAffineShapes.rectangle = function(topLeft, size) {\n    return new IntersectionArgs(\"Rectangle\", [topLeft, topLeft.add(size)]);\n};\n\n\nexport default AffineShapes;\n","/**\n *\n *  IntersectionQuery.js\n *\n *  @copyright 2017 Kevin Lindsey\n *\n */\n\nimport {Vector2D} from \"kld-affine\";\n\n/**\n *\n */\nconst IntersectionQuery = {};\n\n\n/**\n *  pointInCircle\n *\n *  @param {Point2D} point\n *  @param {Point2D} center\n *  @param {number} radius\n *  @returns {boolean}\n */\nIntersectionQuery.pointInCircle = function(point, center, radius) {\n    const v = Vector2D.fromPoints(center, point);\n\n    return v.length() <= radius;\n};\n\n\n/**\n *  pointInEllipse\n *\n *  @param {Point2D} point\n *  @param {Point2D} center\n *  @param {number} radiusX\n *  @param {number} radiusY\n *  @returns {boolean}\n */\nIntersectionQuery.pointInEllipse = function(point, center, radiusX, radiusY) {\n    const len = point.subtract(center);\n\n    return (len.x * len.x) / (radiusX * radiusX) + (len.y * len.y) / (radiusY * radiusY) <= 1;\n};\n\n\n/**\n *  pointInPolyline\n *\n *  @param {Point2D} point\n *  @param {Array<Point2D>} points\n */\nIntersectionQuery.pointInPolyline = function(point, points) {\n    const {length: len} = points;\n    let counter = 0;\n    let xInter;\n\n    let p1 = points[0];\n\n    for (let i = 1; i <= len; i++) {\n        const p2 = points[i % len];\n        const minY = Math.min(p1.y, p2.y);\n        const maxY = Math.max(p1.y, p2.y);\n        const maxX = Math.max(p1.x, p2.x);\n\n        if (p1.y !== p2.y && minY < point.y && point.y <= maxY && point.x <= maxX) {\n            xInter = (point.y - p1.y) * (p2.x - p1.x) / (p2.y - p1.y) + p1.x;\n\n            if (p1.x === p2.x || point.x <= xInter) {\n                counter++;\n            }\n        }\n\n        p1 = p2;\n    }\n\n    return (counter % 2 === 1);\n};\n\n\n/**\n *  pointInPolyline\n *\n *  @param {Point2D} point\n *  @param {Array<Point2D>} points\n */\nIntersectionQuery.pointInPolygon = IntersectionQuery.pointInPolyline;\n\n\n/**\n *  pointInRectangle\n *\n *  @param {Point2D} point\n *  @param {Point2D} topLeft\n *  @param {Point2D} bottomRight\n *  @returns {boolean}\n */\nIntersectionQuery.pointInRectangle = function(point, topLeft, bottomRight) {\n    return (\n        topLeft.x <= point.x && point.x < bottomRight.x &&\n        topLeft.y <= point.y && point.y < bottomRight.y\n    );\n};\n\n\nexport default IntersectionQuery;\n"],"names":["Point2D","x","y","Object","defineProperties","this","value","undefined","writable","enumerable","configurable","prototype","clone","constructor","add","that","subtract","multiply","scalar","divide","equals","precisionEquals","precision","Math","abs","lerp","t","omt","distanceFrom","dx","dy","sqrt","min","max","transform","matrix","a","c","e","b","d","f","toString","module","Vector2D","fromPoints","p1","p2","length","magnitude","dot","cross","determinant","unit","angleBetween","cos","radians","acos","perp","perpendicular","project","percent","setReadonlyProperty","object","property","defineProperty","Matrix2D","IDENTITY","translation","tx","ty","scaling","scale","scalingAt","center","nonUniformScaling","scaleX","scaleY","nonUniformScalingAt","rotation","s","sin","rotationAt","rotationFromVector","vector","xFlip","yFlip","xSkew","tan","ySkew","isIdentity","inverse","det1","idet","det2","det3","translate","scaleAt","scaleNonUniform","scaleNonUniformAt","rotate","rotateAt","cx","cy","rotateFromVector","flipX","flipY","skewX","skewY","isInvertible","getScale","getDecomposition","E","F","G","H","Q","R","a1","atan2","a2","theta","phi","rotation0","join","require","Polynomial","init","arguments","TOLERANCE","ACCURACY","interpolate","xs","ys","n","offset","Array","Error","isNaN","ns","diff","i","dift","m","ho","hp","w","den","coefs","push","_variable","_s","eval","result","d1","getDegree","d2","dmax","v1","v2","j","divide_scalar","simplify","pop","bisection","minValue","maxValue","tmp1","log","tmp2","LN10","iters","ceil","LN2","signs","round","sign","trapezoid","range","it","delta","sum","simpson","st","os","ost","romberg","MAX","h","getDerivative","derivative","getRoots","getLinearRoot","getQuadraticRoots","getCubicRoots","getQuarticRoots","getRootsInInterval","root","roots","droots","results","c3","c2","c1","discrim","halfB","ZEROepsilon","zeroErrorEstimate","tmp","pow","distance","angle","sqrt3","NaN","poly","slice","poly_d","derrt","sort","dery","nr","rb","bounds","maxabsX","minX","maxX","guesses","minmax","df","newton_secant_bisection","concat","an","reduce","v","nm","bounds_UpperReal_Fujiwara","map","coefSelectionFunc","find2Max","acc","bi","nearmax","max_nearmax_pos","negX","posX","bounds_LowerReal_Fujiwara","reverse","res","urb","x0","max_iterations","dfx","x_correction","x_new","y_atmin","y_atmax","prev_dfx","prev_x_ef_correction","min_correction_factor","isBounded","isEnoughCorrection","SqrtPolynomial","VERSION","superclass","call","isNullish","o","closePolygon","points","copy","Intersection","status","IntersectionArgs","name","args","appendPoint","point","appendPoints","intersect","shape1","shape2","intersectPathShape","method","apply","path","shape","segment","inter","intersectBezier2Bezier2","a3","b1","b2","b3","c12","c11","c10","c22","c21","c20","g","xp","xRoots","yp","yRoots","checkRoots","xRoot","k","intersectBezier2Bezier3","b4","c23","c10x2","c10y2","c11x2","c11y2","c12x2","c12y2","c20x2","c20y2","c21x2","c21y2","c22x2","c22y2","c23x2","c23y2","intersectBezier2Circle","p3","r","intersectBezier2Ellipse","ec","rx","ry","c0","rxrx","ryry","intersectBezier2Line","cl","p4","p5","p6","intersectBezier2Polygon","intersectBezier2Polyline","len","intersectBezier2Rectangle","r1","r2","topRight","bottomLeft","inter1","inter2","inter3","inter4","intersectBezier3Bezier3","a4","c13","e0","e1","e2","e3","f0","f1","f2","f3","g0","g1","g2","g3","h0","h1","h2","h3","i0","i1","i2","i3","intersectBezier3Circle","intersectBezier3Ellipse","intersectBezier3Line","p7","p8","p9","p10","intersectBezier3Polygon","intersectBezier3Polyline","intersectBezier3Rectangle","intersectCircleCircle","r_max","r_min","c_dist","p","intersectCircleEllipse","cc","intersectEllipseEllipse","intersectCircleLine","deter","u1","u2","intersectCirclePolygon","intersectCirclePolyline","intersectCircleRectangle","rx1","ry1","rx2","ry2","bezout","norm0","norm1","tst","intersectEllipseLine","orign","dir","mDir","mDiff","t_a","t_b","intersectEllipsePolygon","intersectEllipsePolyline","intersectEllipseRectangle","intersectLineLine","ua_t","ub_t","u_b","ua","ub","intersectLinePolygon","intersectLinePolyline","intersectLineRectangle","intersectPolygonPolygon","points1","points2","intersectPolylinePolyline","intersectPolygonPolyline","intersectPolygonRectangle","intersectPolylineRectangle","intersectRectangleRectangle","intersectRayRay","AB","AC","AD","AE","AF","BC","BE","BF","CD","DE","DF","BFpDE","BEmCD","Shapes","p1x","p1y","p2x","p2y","p3x","p3y","p4x","p4y","centerX","centerY","radius","radiusX","radiusY","segments","coords","width","height","AffineShapes","topLeft","size","IntersectionQuery","xInter","counter","minY","maxY","pointInPolygon","pointInPolyline","pointInRectangle","bottomRight"],"mappings":"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"}